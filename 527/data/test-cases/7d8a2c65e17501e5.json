{"uid":"7d8a2c65e17501e5","name":"Happy path: a newly published debt position with VALID status is updated","fullName":"tests.test_update#test_update_valid_newly_published_debt_position","historyId":"d7f5e78d661f272bbaa9150500c6eb6f","time":{"start":1757598418730,"stop":1757598717872,"duration":299142},"description":"\nVerify that a newly published debt position with VALID status\ncan be updated and changes are reflected in RTP lookups.\n","descriptionHtml":"<p>Verify that a newly published debt position with VALID status<br />\ncan be updated and changes are reflected in RTP lookups.</p>\n","status":"failed","statusMessage":"Failed: Timeout (>300.0s) from pytest-timeout.","statusTrace":"setup_data = {'debtor_fc': 'CLLNNT92R04X000V', 'iupd': '5216361ae26849578', 'iuv': '330962000906278869', 'organization_id': '02438750586', ...}\n\n    @allure.feature(\"Debt Positions\")\n    @allure.story(\"Update Valid Newly Published Debt Position\")\n    @pytest.mark.debt_positions\n    @pytest.mark.send\n    @pytest.mark.happy_path\n    @pytest.mark.timeout(TEST_TIMEOUT_SEC)\n    def test_update_valid_newly_published_debt_position(setup_data: dict[str, Any]) -> None:\n        \"\"\"\n        Verify that a newly published debt position with VALID status\n        can be updated and changes are reflected in RTP lookups.\n        \"\"\"\n        allure.dynamic.title(\"Happy path: a newly published debt position with VALID status is updated\")\n    \n        update_data = _setup_update_test(setup_data, \"VALID\", to_publish=False)\n        access_token = _get_rtp_reader_access_token()\n        expected_status = \"SENT\"\n    \n        while True:\n            response = get_rtp_by_notice_number(access_token, update_data.nav)\n    \n            if response.status_code != 200:\n                raise RuntimeError(\n                    f\"Error calling find_rtp_by_notice_number API. \"\n                    f\"Response {response.status_code}. Notice number: {update_data.nav}\"\n                )\n    \n            data = response.json()\n            assert isinstance(data, list), \"Invalid response body.\"\n    \n            if len(data) == 0:\n>               time.sleep(POLLING_RATE_SEC)\nE               Failed: Timeout (>300.0s) from pytest-timeout.\n\nfunctional-tests/tests/test_update.py:126: Failed","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"_session_faker","time":{"start":1757598299230,"stop":1757598299286,"duration":56},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"setup_data","time":{"start":1757598417872,"stop":1757598418729,"duration":857},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"afterStages":[],"labels":[{"name":"feature","value":"Debt Positions"},{"name":"story","value":"Update Valid Newly Published Debt Position"},{"name":"tag","value":"timeout(300)"},{"name":"tag","value":"happy_path"},{"name":"tag","value":"send"},{"name":"tag","value":"debt_positions"},{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_update"},{"name":"host","value":"runnervmf4ws1"},{"name":"thread","value":"2480-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_update"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":3,"broken":1,"skipped":0,"passed":6,"unknown":0,"total":10},"items":[{"uid":"673426120bd25ab3","reportUrl":"https://pagopa.github.io/rtp-platform-qa/526//#testresult/673426120bd25ab3","status":"failed","statusDetails":"Failed: Timeout (>300.0s) from pytest-timeout.","time":{"start":1757575345066,"stop":1757575644224,"duration":299158}},{"uid":"7aeec8ad88475e7f","reportUrl":"https://pagopa.github.io/rtp-platform-qa/525//#testresult/7aeec8ad88475e7f","status":"failed","statusDetails":"Failed: Timeout (>300.0s) from pytest-timeout.","time":{"start":1757489098311,"stop":1757489397466,"duration":299155}},{"uid":"dcd0055f7f392b3f","reportUrl":"https://pagopa.github.io/rtp-platform-qa/524//#testresult/dcd0055f7f392b3f","status":"passed","time":{"start":1757402573395,"stop":1757402615633,"duration":42238}},{"uid":"7a899a9f92ccbb4e","reportUrl":"https://pagopa.github.io/rtp-platform-qa/523//#testresult/7a899a9f92ccbb4e","status":"passed","time":{"start":1757316167624,"stop":1757316209817,"duration":42193}},{"uid":"64b95d0122fb1753","reportUrl":"https://pagopa.github.io/rtp-platform-qa/522//#testresult/64b95d0122fb1753","status":"passed","time":{"start":1757229716896,"stop":1757229759700,"duration":42804}},{"uid":"82fbc13f1474af1","reportUrl":"https://pagopa.github.io/rtp-platform-qa/521//#testresult/82fbc13f1474af1","status":"passed","time":{"start":1757143285252,"stop":1757143298665,"duration":13413}},{"uid":"7771a4dc3c5c0124","reportUrl":"https://pagopa.github.io/rtp-platform-qa/520//#testresult/7771a4dc3c5c0124","status":"broken","statusDetails":"requests.exceptions.HTTPError: 502 Server Error: Bad Gateway for url: https://api-mcshared.uat.cstar.pagopa.it/auth/token","time":{"start":1757057147455,"stop":1757057147455,"duration":0}},{"uid":"d12a44b449bbce58","reportUrl":"https://pagopa.github.io/rtp-platform-qa/519//#testresult/d12a44b449bbce58","status":"passed","time":{"start":1756969699919,"stop":1756969742235,"duration":42316}},{"uid":"60d6163196f67955","reportUrl":"https://pagopa.github.io/rtp-platform-qa/518//#testresult/60d6163196f67955","status":"passed","time":{"start":1756910943538,"stop":1756910956815,"duration":13277}}]},"tags":["debt_positions","timeout(300)","send","happy_path"]},"source":"7d8a2c65e17501e5.json","parameterValues":[]}