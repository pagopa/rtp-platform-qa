{"uid":"51875d9f08df6d32","name":"An RTP callback is successfully received","fullName":"tests.test_callback#test_receive_rtp_callback_DS_08N_compliant","historyId":"d5748ad5568cbf463a334911f922c3be","time":{"start":1755588476573,"stop":1755588479164,"duration":2591},"status":"failed","statusMessage":"AssertionError: assert 403 == 200\n +  where 403 = <Response [403]>.status_code","statusTrace":"@allure.feature('RTP Callback')\n    @allure.story('Service provider sends a callback referred to an RTP')\n    @allure.title('An RTP callback is successfully received')\n    @pytest.mark.callback\n    @pytest.mark.happy_path\n    def test_receive_rtp_callback_DS_08N_compliant():\n        rtp_data = generate_rtp_data()\n    \n        debtor_service_provider_access_token = get_valid_access_token(\n            client_id=secrets.debtor_service_provider.client_id,\n            client_secret=secrets.debtor_service_provider.client_secret,\n            access_token_function=get_access_token,\n        )\n    \n        creditor_service_provider_access_token = get_valid_access_token(\n            client_id=secrets.creditor_service_provider.client_id,\n            client_secret=secrets.creditor_service_provider.client_secret,\n            access_token_function=get_access_token,\n        )\n    \n        activation_response = activate(\n            debtor_service_provider_access_token,\n            rtp_data['payer']['payerId'],\n            secrets.debtor_service_provider.service_provider_id,\n        )\n        assert activation_response.status_code == 201\n    \n        send_response = send_rtp(\n            access_token=creditor_service_provider_access_token, rtp_payload=rtp_data\n        )\n        assert send_response.status_code == 201\n    \n        location = send_response.headers['Location']\n        resource_id = location.split('/')[-1]\n    \n        original_msg_id = resource_id.replace('-', '')\n    \n        callback_data = generate_callback_data_DS_08N_compliant()\n        callback_data['AsynchronousSepaRequestToPayResponse']['Document']['CdtrPmtActvtnReqStsRpt'][\n            'OrgnlGrpInfAndSts'\n        ]['OrgnlMsgId'] = original_msg_id\n    \n        cert, key = pfx_to_pem(\n            secrets.debtor_service_provider_mock_PFX_base64,\n            secrets.debtor_service_provider_mock_PFX_password_base64,\n            config.cert_path,\n            config.key_path,\n        )\n    \n        callback_response = srtp_callback(\n            rtp_payload=callback_data, cert_path=cert, key_path=key\n        )\n        assert (\n            callback_response.status_code == 200\n        ), f\"Error from callback, expected 200 got {callback_response.status_code}\"\n    \n        get_response = get_rtp(\n            access_token=creditor_service_provider_access_token, rtp_id=resource_id\n        )\n>       assert get_response.status_code == 200\nE       assert 403 == 200\nE        +  where 403 = <Response [403]>.status_code\n\nfunctional-tests/tests/test_callback.py:136: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"_session_faker","time":{"start":1755588460277,"stop":1755588460334,"duration":57},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"afterStages":[],"labels":[{"name":"story","value":"Service provider sends a callback referred to an RTP"},{"name":"feature","value":"RTP Callback"},{"name":"tag","value":"happy_path"},{"name":"tag","value":"callback"},{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_callback"},{"name":"host","value":"pkrvmubgrv54qmi"},{"name":"thread","value":"2494-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_callback"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":20,"broken":16,"skipped":0,"passed":4,"unknown":0,"total":40},"items":[{"uid":"3cef1722cb6765c5","reportUrl":"https://pagopa.github.io/rtp-platform-qa/495//#testresult/3cef1722cb6765c5","status":"failed","statusDetails":"AssertionError: assert 403 == 200\n +  where 403 = <Response [403]>.status_code","time":{"start":1755587254965,"stop":1755587257720,"duration":2755}},{"uid":"d95fc334d4ba166c","reportUrl":"https://pagopa.github.io/rtp-platform-qa/494//#testresult/d95fc334d4ba166c","status":"failed","statusDetails":"AssertionError: assert 403 == 200\n +  where 403 = <Response [403]>.status_code","time":{"start":1755500986538,"stop":1755500990442,"duration":3904}},{"uid":"ccbd178323668ff9","reportUrl":"https://pagopa.github.io/rtp-platform-qa/493//#testresult/ccbd178323668ff9","status":"failed","statusDetails":"AssertionError: assert 403 == 200\n +  where 403 = <Response [403]>.status_code","time":{"start":1755414400227,"stop":1755414402656,"duration":2429}},{"uid":"ced6322a03e3c5ad","reportUrl":"https://pagopa.github.io/rtp-platform-qa/492//#testresult/ced6322a03e3c5ad","status":"failed","statusDetails":"AssertionError: assert 403 == 200\n +  where 403 = <Response [403]>.status_code","time":{"start":1755327991862,"stop":1755327994267,"duration":2405}},{"uid":"155cf57852d73971","reportUrl":"https://pagopa.github.io/rtp-platform-qa/491//#testresult/155cf57852d73971","status":"failed","statusDetails":"AssertionError: assert 403 == 200\n +  where 403 = <Response [403]>.status_code","time":{"start":1755241678491,"stop":1755241680997,"duration":2506}},{"uid":"b26c479952341257","reportUrl":"https://pagopa.github.io/rtp-platform-qa/490//#testresult/b26c479952341257","status":"failed","statusDetails":"AssertionError: assert 403 == 200\n +  where 403 = <Response [403]>.status_code","time":{"start":1755166779971,"stop":1755166782978,"duration":3007}},{"uid":"aa066149bfe075c9","reportUrl":"https://pagopa.github.io/rtp-platform-qa/489//#testresult/aa066149bfe075c9","status":"failed","statusDetails":"AssertionError: assert 403 == 200\n +  where 403 = <Response [403]>.status_code","time":{"start":1755158295765,"stop":1755158298150,"duration":2385}},{"uid":"bb17af2522e6870e","reportUrl":"https://pagopa.github.io/rtp-platform-qa/488//#testresult/bb17af2522e6870e","status":"failed","statusDetails":"AssertionError: assert 403 == 200\n +  where 403 = <Response [403]>.status_code","time":{"start":1755155314497,"stop":1755155318335,"duration":3838}},{"uid":"c4c0d3d67f619e5c","reportUrl":"https://pagopa.github.io/rtp-platform-qa/487//#testresult/c4c0d3d67f619e5c","status":"failed","statusDetails":"AssertionError: assert 403 == 200\n +  where 403 = <Response [403]>.status_code","time":{"start":1755068903071,"stop":1755068905912,"duration":2841}},{"uid":"64855cc2e5807561","reportUrl":"https://pagopa.github.io/rtp-platform-qa/486//#testresult/64855cc2e5807561","status":"failed","statusDetails":"AssertionError: assert 403 == 200\n +  where 403 = <Response [403]>.status_code","time":{"start":1754982504125,"stop":1754982508085,"duration":3960}},{"uid":"ade8638b081cabd9","reportUrl":"https://pagopa.github.io/rtp-platform-qa/485//#testresult/ade8638b081cabd9","status":"failed","statusDetails":"AssertionError: assert 403 == 200\n +  where 403 = <Response [403]>.status_code","time":{"start":1754907836004,"stop":1754907838698,"duration":2694}},{"uid":"afa5c3ef96edd420","reportUrl":"https://pagopa.github.io/rtp-platform-qa/483//#testresult/afa5c3ef96edd420","status":"failed","statusDetails":"AssertionError: assert 403 == 200\n +  where 403 = <Response [403]>.status_code","time":{"start":1754896260464,"stop":1754896264421,"duration":3957}},{"uid":"3c8adf4a1bf67166","reportUrl":"https://pagopa.github.io/rtp-platform-qa/482//#testresult/3c8adf4a1bf67166","status":"failed","statusDetails":"AssertionError: assert 403 == 200\n +  where 403 = <Response [403]>.status_code","time":{"start":1754809603494,"stop":1754809606238,"duration":2744}},{"uid":"d5885df9eedf22c8","reportUrl":"https://pagopa.github.io/rtp-platform-qa/481//#testresult/d5885df9eedf22c8","status":"failed","statusDetails":"AssertionError: assert 403 == 200\n +  where 403 = <Response [403]>.status_code","time":{"start":1754723219524,"stop":1754723222260,"duration":2736}},{"uid":"1346518425602767","reportUrl":"https://pagopa.github.io/rtp-platform-qa/480//#testresult/1346518425602767","status":"failed","statusDetails":"AssertionError: assert 403 == 200\n +  where 403 = <Response [403]>.status_code","time":{"start":1754637093076,"stop":1754637097207,"duration":4131}},{"uid":"c6af0c2a40fa1154","reportUrl":"https://pagopa.github.io/rtp-platform-qa/479//#testresult/c6af0c2a40fa1154","status":"failed","statusDetails":"AssertionError: assert 403 == 200\n +  where 403 = <Response [403]>.status_code","time":{"start":1754550670663,"stop":1754550673844,"duration":3181}},{"uid":"5a2d1934400fc34a","reportUrl":"https://pagopa.github.io/rtp-platform-qa/478//#testresult/5a2d1934400fc34a","status":"failed","statusDetails":"AssertionError: assert 403 == 200\n +  where 403 = <Response [403]>.status_code","time":{"start":1754464771515,"stop":1754464775778,"duration":4263}},{"uid":"871713c2196972f8","reportUrl":"https://pagopa.github.io/rtp-platform-qa/477//#testresult/871713c2196972f8","status":"failed","statusDetails":"AssertionError: assert 403 == 200\n +  where 403 = <Response [403]>.status_code","time":{"start":1754464739127,"stop":1754464741924,"duration":2797}},{"uid":"da211255c332048f","reportUrl":"https://pagopa.github.io/rtp-platform-qa/475//#testresult/da211255c332048f","status":"failed","statusDetails":"AssertionError: assert 403 == 200\n +  where 403 = <Response [403]>.status_code","time":{"start":1754464276502,"stop":1754464280545,"duration":4043}},{"uid":"c0b438e0f165d86b","reportUrl":"https://pagopa.github.io/rtp-platform-qa/474//#testresult/c0b438e0f165d86b","status":"broken","statusDetails":"requests.exceptions.HTTPError: 401 Client Error: Unauthorized for url: https://api-mcshared.uat.cstar.pagopa.it/auth/token","time":{"start":1754387680861,"stop":1754387681581,"duration":720}}]},"tags":["callback","happy_path"]},"source":"51875d9f08df6d32.json","parameterValues":[]}