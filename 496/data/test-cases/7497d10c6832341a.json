{"uid":"7497d10c6832341a","name":"RTP is successfully retrieved","fullName":"tests.test_get_rtp#test_get_rtp_success","historyId":"caeb9610ab96a7a077f09cf26a913a9a","time":{"start":1755588525729,"stop":1755588527636,"duration":1907},"status":"failed","statusMessage":"AssertionError: assert 403 == 200\n +  where 403 = <Response [403]>.status_code","statusTrace":"@allure.feature('RTP Get')\n    @allure.story('Service provider retrieves an RTP')\n    @allure.title('RTP is successfully retrieved')\n    @pytest.mark.get\n    @pytest.mark.happy_path\n    def test_get_rtp_success():\n        rtp_data = generate_rtp_data()\n    \n        debtor_service_provider_access_token = get_valid_access_token(\n            client_id=secrets.debtor_service_provider.client_id,\n            client_secret=secrets.debtor_service_provider.client_secret,\n            access_token_function=get_access_token,\n        )\n    \n        creditor_service_provider_access_token = get_valid_access_token(\n            client_id=secrets.creditor_service_provider.client_id,\n            client_secret=secrets.creditor_service_provider.client_secret,\n            access_token_function=get_access_token,\n        )\n    \n        activation_response = activate(\n            debtor_service_provider_access_token,\n            rtp_data['payer']['payerId'],\n            secrets.debtor_service_provider.service_provider_id,\n        )\n        assert activation_response.status_code == 201, 'Error activating debtor'\n    \n        send_response = send_rtp(\n            access_token=creditor_service_provider_access_token, rtp_payload=rtp_data\n        )\n        assert send_response.status_code == 201\n    \n        location = send_response.headers['Location']\n        resource_id = location.split('/')[-1]\n    \n        get_response = get_rtp(\n            access_token=creditor_service_provider_access_token, rtp_id=resource_id\n        )\n>       assert get_response.status_code == 200\nE       assert 403 == 200\nE        +  where 403 = <Response [403]>.status_code\n\nfunctional-tests/tests/test_get_rtp.py:54: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"_session_faker","time":{"start":1755588460277,"stop":1755588460334,"duration":57},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"afterStages":[],"labels":[{"name":"story","value":"Service provider retrieves an RTP"},{"name":"feature","value":"RTP Get"},{"name":"tag","value":"happy_path"},{"name":"tag","value":"get"},{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_get_rtp"},{"name":"host","value":"pkrvmubgrv54qmi"},{"name":"thread","value":"2494-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_get_rtp"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":20,"broken":16,"skipped":0,"passed":66,"unknown":0,"total":102},"items":[{"uid":"43991e477cad6c73","reportUrl":"https://pagopa.github.io/rtp-platform-qa/495//#testresult/43991e477cad6c73","status":"failed","statusDetails":"AssertionError: assert 403 == 200\n +  where 403 = <Response [403]>.status_code","time":{"start":1755587314444,"stop":1755587316725,"duration":2281}},{"uid":"98b1b118a57befbb","reportUrl":"https://pagopa.github.io/rtp-platform-qa/494//#testresult/98b1b118a57befbb","status":"failed","statusDetails":"AssertionError: assert 403 == 200\n +  where 403 = <Response [403]>.status_code","time":{"start":1755501057368,"stop":1755501060685,"duration":3317}},{"uid":"5e09053379e2cbb1","reportUrl":"https://pagopa.github.io/rtp-platform-qa/493//#testresult/5e09053379e2cbb1","status":"failed","statusDetails":"AssertionError: assert 403 == 200\n +  where 403 = <Response [403]>.status_code","time":{"start":1755414452671,"stop":1755414454617,"duration":1946}},{"uid":"f80dd43ecd278ccf","reportUrl":"https://pagopa.github.io/rtp-platform-qa/492//#testresult/f80dd43ecd278ccf","status":"failed","statusDetails":"AssertionError: assert 403 == 200\n +  where 403 = <Response [403]>.status_code","time":{"start":1755328045228,"stop":1755328047059,"duration":1831}},{"uid":"40adef957555af69","reportUrl":"https://pagopa.github.io/rtp-platform-qa/491//#testresult/40adef957555af69","status":"failed","statusDetails":"AssertionError: assert 403 == 200\n +  where 403 = <Response [403]>.status_code","time":{"start":1755241730146,"stop":1755241732122,"duration":1976}},{"uid":"b1772101db4d1b69","reportUrl":"https://pagopa.github.io/rtp-platform-qa/490//#testresult/b1772101db4d1b69","status":"failed","statusDetails":"AssertionError: assert 403 == 200\n +  where 403 = <Response [403]>.status_code","time":{"start":1755166840316,"stop":1755166843071,"duration":2755}},{"uid":"51aff25853e154c9","reportUrl":"https://pagopa.github.io/rtp-platform-qa/489//#testresult/51aff25853e154c9","status":"failed","statusDetails":"AssertionError: assert 403 == 200\n +  where 403 = <Response [403]>.status_code","time":{"start":1755158346712,"stop":1755158348645,"duration":1933}},{"uid":"5cc202c12ea2bcd7","reportUrl":"https://pagopa.github.io/rtp-platform-qa/488//#testresult/5cc202c12ea2bcd7","status":"failed","statusDetails":"AssertionError: assert 403 == 200\n +  where 403 = <Response [403]>.status_code","time":{"start":1755155387550,"stop":1755155390614,"duration":3064}},{"uid":"fc7229dd156ef78e","reportUrl":"https://pagopa.github.io/rtp-platform-qa/487//#testresult/fc7229dd156ef78e","status":"failed","statusDetails":"AssertionError: assert 403 == 200\n +  where 403 = <Response [403]>.status_code","time":{"start":1755068961472,"stop":1755068963760,"duration":2288}},{"uid":"b72394be55673519","reportUrl":"https://pagopa.github.io/rtp-platform-qa/486//#testresult/b72394be55673519","status":"failed","statusDetails":"AssertionError: assert 403 == 200\n +  where 403 = <Response [403]>.status_code","time":{"start":1754982572279,"stop":1754982575505,"duration":3226}},{"uid":"697ee702e61dd9ab","reportUrl":"https://pagopa.github.io/rtp-platform-qa/485//#testresult/697ee702e61dd9ab","status":"failed","statusDetails":"AssertionError: assert 403 == 200\n +  where 403 = <Response [403]>.status_code","time":{"start":1754907886433,"stop":1754907888638,"duration":2205}},{"uid":"27874aa7f85e331a","reportUrl":"https://pagopa.github.io/rtp-platform-qa/483//#testresult/27874aa7f85e331a","status":"failed","statusDetails":"AssertionError: assert 403 == 200\n +  where 403 = <Response [403]>.status_code","time":{"start":1754896330115,"stop":1754896333353,"duration":3238}},{"uid":"a5de20a13fda917f","reportUrl":"https://pagopa.github.io/rtp-platform-qa/482//#testresult/a5de20a13fda917f","status":"failed","statusDetails":"AssertionError: assert 403 == 200\n +  where 403 = <Response [403]>.status_code","time":{"start":1754809662403,"stop":1754809664620,"duration":2217}},{"uid":"45704605873df765","reportUrl":"https://pagopa.github.io/rtp-platform-qa/481//#testresult/45704605873df765","status":"failed","statusDetails":"AssertionError: assert 403 == 200\n +  where 403 = <Response [403]>.status_code","time":{"start":1754723272713,"stop":1754723274636,"duration":1923}},{"uid":"86e4540105bbf6f","reportUrl":"https://pagopa.github.io/rtp-platform-qa/480//#testresult/86e4540105bbf6f","status":"failed","statusDetails":"AssertionError: assert 403 == 200\n +  where 403 = <Response [403]>.status_code","time":{"start":1754637175915,"stop":1754637179265,"duration":3350}},{"uid":"b897df7b2cd0b036","reportUrl":"https://pagopa.github.io/rtp-platform-qa/479//#testresult/b897df7b2cd0b036","status":"failed","statusDetails":"AssertionError: assert 403 == 200\n +  where 403 = <Response [403]>.status_code","time":{"start":1754550749776,"stop":1754550752280,"duration":2504}},{"uid":"24ad99cf7302a486","reportUrl":"https://pagopa.github.io/rtp-platform-qa/478//#testresult/24ad99cf7302a486","status":"failed","statusDetails":"AssertionError: assert 403 == 200\n +  where 403 = <Response [403]>.status_code","time":{"start":1754464837491,"stop":1754464840768,"duration":3277}},{"uid":"76074782795b6b7d","reportUrl":"https://pagopa.github.io/rtp-platform-qa/477//#testresult/76074782795b6b7d","status":"failed","statusDetails":"AssertionError: assert 403 == 200\n +  where 403 = <Response [403]>.status_code","time":{"start":1754464790087,"stop":1754464792349,"duration":2262}},{"uid":"d2972ab55723bea5","reportUrl":"https://pagopa.github.io/rtp-platform-qa/475//#testresult/d2972ab55723bea5","status":"failed","statusDetails":"AssertionError: assert 403 == 200\n +  where 403 = <Response [403]>.status_code","time":{"start":1754464345476,"stop":1754464348778,"duration":3302}},{"uid":"93c0a62a92ce0fb3","reportUrl":"https://pagopa.github.io/rtp-platform-qa/474//#testresult/93c0a62a92ce0fb3","status":"broken","statusDetails":"requests.exceptions.HTTPError: 401 Client Error: Unauthorized for url: https://api-mcshared.uat.cstar.pagopa.it/auth/token","time":{"start":1754387729723,"stop":1754387730473,"duration":750}}]},"tags":["get","happy_path"]},"source":"7497d10c6832341a.json","parameterValues":[]}