{"uid":"b20bb41f6ef739f5","name":"Happy path: a newly published debt position with VALID status is updated","fullName":"tests.test_debt_position_update#test_update_valid_newly_published_debt_position","historyId":"679ff7081714ee69d34bdd290b398cfd","time":{"start":1757665880618,"stop":1757666179359,"duration":298741},"description":"\nVerify that a newly published debt position with VALID status\ncan be updated and changes are reflected in RTP lookups.\n","descriptionHtml":"<p>Verify that a newly published debt position with VALID status<br />\ncan be updated and changes are reflected in RTP lookups.</p>\n","status":"failed","statusMessage":"Failed: Timeout (>300.0s) from pytest-timeout.","statusTrace":"setup_data = {'debtor_fc': 'CMMNSD64P45X000O', 'iupd': '355c523520ba4b47b', 'iuv': '183444757015891820', 'organization_id': '02438750586', ...}\n\n    @allure.feature('Debt Positions')\n    @allure.story('Update Valid Newly Published Debt Position')\n    @pytest.mark.debt_positions\n    @pytest.mark.send\n    @pytest.mark.happy_path\n    @pytest.mark.timeout(TEST_TIMEOUT_SEC)\n    def test_update_valid_newly_published_debt_position(setup_data: dict[str, Any]) -> None:\n        \"\"\"\n        Verify that a newly published debt position with VALID status\n        can be updated and changes are reflected in RTP lookups.\n        \"\"\"\n        allure.dynamic.title('Happy path: a newly published debt position with VALID status is updated')\n    \n        update_data = _setup_update_test(setup_data, 'VALID', to_publish=False)\n        access_token = _get_rtp_reader_access_token()\n        expected_status = 'SENT'\n    \n        while True:\n            response = get_rtp_by_notice_number(access_token, update_data.nav)\n    \n            if response.status_code != 200:\n                raise RuntimeError(\n                    f\"Error calling find_rtp_by_notice_number API. \"\n                    f\"Response {response.status_code}. Notice number: {update_data.nav}\"\n                )\n    \n            data = response.json()\n            assert isinstance(data, list), 'Invalid response body.'\n    \n            if len(data) == 0:\n>               time.sleep(POLLING_RATE_SEC)\nE               Failed: Timeout (>300.0s) from pytest-timeout.\n\nfunctional-tests/tests/test_debt_position_update.py:128: Failed","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"_session_faker","time":{"start":1757665796764,"stop":1757665796823,"duration":59},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"setup_data","time":{"start":1757665879359,"stop":1757665880618,"duration":1259},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"afterStages":[],"labels":[{"name":"feature","value":"Debt Positions"},{"name":"story","value":"Update Valid Newly Published Debt Position"},{"name":"tag","value":"timeout(300)"},{"name":"tag","value":"happy_path"},{"name":"tag","value":"send"},{"name":"tag","value":"debt_positions"},{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_debt_position_update"},{"name":"host","value":"runnervmf4ws1"},{"name":"thread","value":"2511-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_debt_position_update"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"tags":["debt_positions","timeout(300)","send","happy_path"]},"source":"b20bb41f6ef739f5.json","parameterValues":[]}