{"uid":"4e31b3e3e451ba01","name":"An RTP callback is successfully received","fullName":"tests.test_callback#test_receive_rtp_callback_DS_04b_compliant","historyId":"475e3c0708b05c2b7bfae9db8dc283af","time":{"start":1748761621156,"stop":1748761623851,"duration":2695},"status":"failed","statusMessage":"AssertionError: Error from callback, expected 200 got 400\nassert 400 == 200\n +  where 400 = <Response [400]>.status_code","statusTrace":"@allure.feature('RTP Callback')\n    @allure.story('Service provider sends a callback referred to an RTP')\n    @allure.title('An RTP callback is successfully received')\n    @pytest.mark.callback\n    @pytest.mark.happy_path\n    def test_receive_rtp_callback_DS_04b_compliant():\n        callback_data = generate_callback_data_DS_04b_compliant()\n    \n        cert, key = pfx_to_pem(secrets.debtor_service_provider_mock_PFX_base64,\n                               secrets.debtor_service_provider_mock_PFX_password_base64,\n                               config.cert_path,\n                               config.key_path)\n    \n        callback_response = srtp_callback(rtp_payload=callback_data,\n                                          cert_path=cert,\n                                          key_path=key)\n>       assert callback_response.status_code == 200, f'Error from callback, expected 200 got {callback_response.status_code}'\nE       AssertionError: Error from callback, expected 200 got 400\nE       assert 400 == 200\nE        +  where 400 = <Response [400]>.status_code\n\nfunctional-tests/tests/test_callback.py:28: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"_session_faker","time":{"start":1748761574728,"stop":1748761574786,"duration":58},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"afterStages":[],"labels":[{"name":"feature","value":"RTP Callback"},{"name":"story","value":"Service provider sends a callback referred to an RTP"},{"name":"tag","value":"happy_path"},{"name":"tag","value":"callback"},{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_callback"},{"name":"host","value":"pkrvmf6wy0o8zjz"},{"name":"thread","value":"2518-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_callback"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":5,"broken":0,"skipped":0,"passed":48,"unknown":0,"total":53},"items":[{"uid":"6ff9c8536a2aae9d","reportUrl":"https://pagopa.github.io/rtp-platform-qa/352//#testresult/6ff9c8536a2aae9d","status":"failed","statusDetails":"AssertionError: Error from callback, expected 200 got 400\nassert 400 == 200\n +  where 400 = <Response [400]>.status_code","time":{"start":1748675215311,"stop":1748675215898,"duration":587}},{"uid":"9e4d956406aa616c","reportUrl":"https://pagopa.github.io/rtp-platform-qa/351//#testresult/9e4d956406aa616c","status":"failed","statusDetails":"AssertionError: Error from callback, expected 200 got 400\nassert 400 == 200\n +  where 400 = <Response [400]>.status_code","time":{"start":1748588827402,"stop":1748588828303,"duration":901}},{"uid":"e538ca61b5e6f19","reportUrl":"https://pagopa.github.io/rtp-platform-qa/350//#testresult/e538ca61b5e6f19","status":"failed","statusDetails":"AssertionError: Error from callback, expected 200 got 400\nassert 400 == 200\n +  where 400 = <Response [400]>.status_code","time":{"start":1748534028006,"stop":1748534028622,"duration":616}},{"uid":"5ec37a29e1a97961","reportUrl":"https://pagopa.github.io/rtp-platform-qa/349//#testresult/5ec37a29e1a97961","status":"passed","time":{"start":1748502447591,"stop":1748502452909,"duration":5318}},{"uid":"9e6d4e55d19db370","reportUrl":"https://pagopa.github.io/rtp-platform-qa/348//#testresult/9e6d4e55d19db370","status":"passed","time":{"start":1748449647589,"stop":1748449648193,"duration":604}},{"uid":"711f23dffad78218","reportUrl":"https://pagopa.github.io/rtp-platform-qa/347//#testresult/711f23dffad78218","status":"passed","time":{"start":1748442441863,"stop":1748442442536,"duration":673}},{"uid":"64b7b50fc4d08442","reportUrl":"https://pagopa.github.io/rtp-platform-qa/343//#testresult/64b7b50fc4d08442","status":"passed","time":{"start":1748416025574,"stop":1748416027329,"duration":1755}},{"uid":"6184bbfe9c2e5a0f","reportUrl":"https://pagopa.github.io/rtp-platform-qa/342//#testresult/6184bbfe9c2e5a0f","status":"passed","time":{"start":1748329639728,"stop":1748329640729,"duration":1001}},{"uid":"315824675cccb704","reportUrl":"https://pagopa.github.io/rtp-platform-qa/341//#testresult/315824675cccb704","status":"passed","time":{"start":1748264263208,"stop":1748264263693,"duration":485}},{"uid":"83a57c47a46bc769","reportUrl":"https://pagopa.github.io/rtp-platform-qa/340//#testresult/83a57c47a46bc769","status":"passed","time":{"start":1748243385024,"stop":1748243386874,"duration":1850}},{"uid":"d344da13ab42aa01","reportUrl":"https://pagopa.github.io/rtp-platform-qa/339//#testresult/d344da13ab42aa01","status":"passed","time":{"start":1748156832872,"stop":1748156833393,"duration":521}},{"uid":"96ade7fa24ca6bd9","reportUrl":"https://pagopa.github.io/rtp-platform-qa/338//#testresult/96ade7fa24ca6bd9","status":"passed","time":{"start":1748070405903,"stop":1748070406442,"duration":539}},{"uid":"fb2e3aa98c04293f","reportUrl":"https://pagopa.github.io/rtp-platform-qa/337//#testresult/fb2e3aa98c04293f","status":"passed","time":{"start":1747984030908,"stop":1747984035813,"duration":4905}},{"uid":"6bdc084088bf6167","reportUrl":"https://pagopa.github.io/rtp-platform-qa/336//#testresult/6bdc084088bf6167","status":"passed","time":{"start":1747897632627,"stop":1747897633281,"duration":654}},{"uid":"cbbaed2abab4ca04","reportUrl":"https://pagopa.github.io/rtp-platform-qa/335//#testresult/cbbaed2abab4ca04","status":"passed","time":{"start":1747840415846,"stop":1747840417495,"duration":1649}},{"uid":"104ecffdf520abd5","reportUrl":"https://pagopa.github.io/rtp-platform-qa/334//#testresult/104ecffdf520abd5","status":"passed","time":{"start":1747811222964,"stop":1747811223472,"duration":508}},{"uid":"952c95ac21a5325","reportUrl":"https://pagopa.github.io/rtp-platform-qa/333//#testresult/952c95ac21a5325","status":"passed","time":{"start":1747724834602,"stop":1747724835166,"duration":564}},{"uid":"adaec2f103609a44","reportUrl":"https://pagopa.github.io/rtp-platform-qa/332//#testresult/adaec2f103609a44","status":"passed","time":{"start":1747661444728,"stop":1747661445195,"duration":467}},{"uid":"3c619db8912e25d1","reportUrl":"https://pagopa.github.io/rtp-platform-qa/331//#testresult/3c619db8912e25d1","status":"passed","time":{"start":1747638465483,"stop":1747638466178,"duration":695}},{"uid":"494d0d8e84cee37d","reportUrl":"https://pagopa.github.io/rtp-platform-qa/330//#testresult/494d0d8e84cee37d","status":"passed","time":{"start":1747551989591,"stop":1747551990015,"duration":424}}]},"tags":["callback","happy_path"]},"source":"4e31b3e3e451ba01.json","parameterValues":[]}