{"uid":"a3a158a842a6fb8","name":"Send GPD message with invalid payee_id and verify no RTP is created","fullName":"tests.test_producer_gpd_message#test_send_producer_gpd_message_invalid_registry_payee","historyId":"1264c21e0a0416347b354c00285607f6","time":{"start":1759484844261,"stop":1759484855555,"duration":11294},"status":"failed","statusMessage":"Failed: Failed to send valid_payee message after 3 attempts","statusTrace":"@allure.feature('GPD Message')\n    @allure.story('Send GPD message to queue with invalid payee')\n    @allure.title('Send GPD message with invalid payee_id and verify no RTP is created')\n    @pytest.mark.producer_gpd_message\n    @pytest.mark.happy_path\n    @pytest.mark.timeout(TEST_TIMEOUT_SEC)\n    def test_send_producer_gpd_message_invalid_registry_payee():\n        debtor_fc = activate_new_debtor()\n    \n        invalid_payee_id = '80015060728' # length = 11 || 16\n    \n        common_iuv = '12445678901294067'\n        common_nav = f\"3{common_iuv}\"\n    \n        timestamp = 1768442371790\n    \n        payload = generate_producer_gpd_message_payload(\n            operation='CREATE',\n            ec_tax_code=invalid_payee_id,\n            amount=30000,\n            status='VALID',\n            overrides={\n                'iuv': common_iuv,\n                'nav': common_nav,\n                'timestamp': timestamp,\n                'debtor_tax_code': debtor_fc\n            }\n        )\n    \n>       response = send_message_with_retry(payload, 'valid_payee')\n\nfunctional-tests/tests/test_producer_gpd_message.py:112: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\npayload = {'amount': 30000, 'debtor_tax_code': 'CRBGCM60L70X000D', 'description': 'wsJ6oRH49Bvv4FRu97 SSS3JpoXdYoJyfIicY6pmKLWxyDV8 hpP5Cd5Esp6OPBItZFOswfsknkYHWfeLpx1p22ngBXjKytcQdDF YBrQ8H', 'due_date': 1762076845517, ...}\nmessage_label = 'valid_payee', max_retries = 3, retry_delay = 5\n\n    def send_message_with_retry(payload, message_label='', max_retries=3, retry_delay=5):\n        \"\"\"Helper function to send a GPD message with retry mechanism.\n    \n        Args:\n            payload (dict): The message payload to send\n            message_label (str): A label for the message for logging purposes\n            max_retries (int): Maximum number of retry attempts\n            retry_delay (int): Seconds to wait between retry attempts\n    \n        Returns:\n            requests.Response: The API response if successful\n    \n        Raises:\n            AssertionError: If all retries fail\n        \"\"\"\n        for attempt in range(max_retries):\n            try:\n                print(f\"Sending {message_label} message (attempt {attempt+1}/{max_retries})...\")\n                response = send_producer_gpd_message(payload)\n    \n                if response.status_code == 200:\n                    print(f\"{message_label} message sent successfully\")\n                    return response\n                elif 'RequestTimedOutError' in response.text:\n                    print(f\"Timeout detected: {response.text}\")\n                    if attempt < max_retries - 1:\n                        print(f\"Waiting {retry_delay} seconds before retrying...\")\n                        time.sleep(retry_delay)\n                    continue\n                else:\n                    assert response.status_code == 200, f\"Failed to send {message_label} message: {response.text}\"\n            except Exception as e:\n                if attempt < max_retries - 1:\n                    print(f\"Error sending: {str(e)}. Retrying in {retry_delay} seconds...\")\n                    time.sleep(retry_delay)\n    \n>       pytest.fail(f\"Failed to send {message_label} message after {max_retries} attempts\")\nE       Failed: Failed to send valid_payee message after 3 attempts\n\nutils/producer_gpd_utils.py:50: Failed","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"_session_faker","time":{"start":1759483521947,"stop":1759483522010,"duration":63},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"status":"failed","statusMessage":"Failed: Failed to send valid_payee message after 3 attempts","statusTrace":"@allure.feature('GPD Message')\n    @allure.story('Send GPD message to queue with invalid payee')\n    @allure.title('Send GPD message with invalid payee_id and verify no RTP is created')\n    @pytest.mark.producer_gpd_message\n    @pytest.mark.happy_path\n    @pytest.mark.timeout(TEST_TIMEOUT_SEC)\n    def test_send_producer_gpd_message_invalid_registry_payee():\n        debtor_fc = activate_new_debtor()\n    \n        invalid_payee_id = '80015060728' # length = 11 || 16\n    \n        common_iuv = '12445678901294067'\n        common_nav = f\"3{common_iuv}\"\n    \n        timestamp = 1768442371790\n    \n        payload = generate_producer_gpd_message_payload(\n            operation='CREATE',\n            ec_tax_code=invalid_payee_id,\n            amount=30000,\n            status='VALID',\n            overrides={\n                'iuv': common_iuv,\n                'nav': common_nav,\n                'timestamp': timestamp,\n                'debtor_tax_code': debtor_fc\n            }\n        )\n    \n>       response = send_message_with_retry(payload, 'valid_payee')\n\nfunctional-tests/tests/test_producer_gpd_message.py:112: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\npayload = {'amount': 30000, 'debtor_tax_code': 'CRBGCM60L70X000D', 'description': 'wsJ6oRH49Bvv4FRu97 SSS3JpoXdYoJyfIicY6pmKLWxyDV8 hpP5Cd5Esp6OPBItZFOswfsknkYHWfeLpx1p22ngBXjKytcQdDF YBrQ8H', 'due_date': 1762076845517, ...}\nmessage_label = 'valid_payee', max_retries = 3, retry_delay = 5\n\n    def send_message_with_retry(payload, message_label='', max_retries=3, retry_delay=5):\n        \"\"\"Helper function to send a GPD message with retry mechanism.\n    \n        Args:\n            payload (dict): The message payload to send\n            message_label (str): A label for the message for logging purposes\n            max_retries (int): Maximum number of retry attempts\n            retry_delay (int): Seconds to wait between retry attempts\n    \n        Returns:\n            requests.Response: The API response if successful\n    \n        Raises:\n            AssertionError: If all retries fail\n        \"\"\"\n        for attempt in range(max_retries):\n            try:\n                print(f\"Sending {message_label} message (attempt {attempt+1}/{max_retries})...\")\n                response = send_producer_gpd_message(payload)\n    \n                if response.status_code == 200:\n                    print(f\"{message_label} message sent successfully\")\n                    return response\n                elif 'RequestTimedOutError' in response.text:\n                    print(f\"Timeout detected: {response.text}\")\n                    if attempt < max_retries - 1:\n                        print(f\"Waiting {retry_delay} seconds before retrying...\")\n                        time.sleep(retry_delay)\n                    continue\n                else:\n                    assert response.status_code == 200, f\"Failed to send {message_label} message: {response.text}\"\n            except Exception as e:\n                if attempt < max_retries - 1:\n                    print(f\"Error sending: {str(e)}. Retrying in {retry_delay} seconds...\")\n                    time.sleep(retry_delay)\n    \n>       pytest.fail(f\"Failed to send {message_label} message after {max_retries} attempts\")\nE       Failed: Failed to send valid_payee message after 3 attempts\n\nutils/producer_gpd_utils.py:50: Failed","steps":[],"attachments":[{"uid":"e6e88e4b2b131510","name":"stdout","source":"e6e88e4b2b131510.txt","type":"text/plain","size":938}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},"afterStages":[],"labels":[{"name":"story","value":"Send GPD message to queue with invalid payee"},{"name":"feature","value":"GPD Message"},{"name":"tag","value":"timeout(300)"},{"name":"tag","value":"happy_path"},{"name":"tag","value":"producer_gpd_message"},{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_producer_gpd_message"},{"name":"host","value":"runnervm3ublj"},{"name":"thread","value":"2547-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_producer_gpd_message"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"tags":["timeout(300)","producer_gpd_message","happy_path"]},"source":"a3a158a842a6fb8.json","parameterValues":[]}