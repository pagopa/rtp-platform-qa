{"uid":"8fa31f5d61291c42","name":"An RTP is sent through CBI API","fullName":"tests.test_debtor_service_provider_availability#test_send_rtp_to_cbi","historyId":"f80da3262bf8ce0e665c096b1873cbf4","time":{"start":1756883285969,"stop":1756883290485,"duration":4516},"status":"failed","statusMessage":"AssertionError: assert 400 == 201\n +  where 400 = <Response [400]>.status_code","statusTrace":"@allure.feature('RTP Send')\n    @allure.story('Service provider sends an RTP to CBI directly')\n    @allure.title('An RTP is sent through CBI API')\n    @pytest.mark.send\n    @pytest.mark.happy_path\n    @pytest.mark.cbi\n    def test_send_rtp_to_cbi():\n        rtp_data = generate_rtp_data()\n        cbi_payload = generate_epc_rtp_data(rtp_data, bic='UNCRITMM')\n    \n        auth = client_credentials_to_auth_token(\n            secrets.CBI_client_id, secrets.CBI_client_secret\n        )\n        cert, key = pfx_to_pem(\n            secrets.CBI_client_PFX_base64,\n            secrets.CBI_client_PFX_password_base64,\n            config.cert_path,\n            config.key_path,\n        )\n        cbi_token = get_cbi_access_token(cert, key, auth)\n        response = send_srtp_to_cbi(f\"Bearer {cbi_token}\", cbi_payload)\n>       assert response.status_code == 201\nE       assert 400 == 201\nE        +  where 400 = <Response [400]>.status_code\n\nfunctional-tests/tests/test_debtor_service_provider_availability.py:57: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"_session_faker","time":{"start":1756883223041,"stop":1756883223098,"duration":57},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"afterStages":[],"labels":[{"name":"feature","value":"RTP Send"},{"name":"story","value":"Service provider sends an RTP to CBI directly"},{"name":"tag","value":"cbi"},{"name":"tag","value":"happy_path"},{"name":"tag","value":"send"},{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_debtor_service_provider_availability"},{"name":"host","value":"pkrvm7jw40e0xgp"},{"name":"thread","value":"2483-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_debtor_service_provider_availability"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":71,"broken":5,"skipped":0,"passed":66,"unknown":0,"total":142},"items":[{"uid":"fc51649e2f37f1a5","reportUrl":"https://pagopa.github.io/rtp-platform-qa/516//#testresult/fc51649e2f37f1a5","status":"failed","statusDetails":"AssertionError: assert 400 == 201\n +  where 400 = <Response [400]>.status_code","time":{"start":1756798009297,"stop":1756798013935,"duration":4638}},{"uid":"397b4ab48eb62878","reportUrl":"https://pagopa.github.io/rtp-platform-qa/515//#testresult/397b4ab48eb62878","status":"failed","statusDetails":"AssertionError: assert 400 == 201\n +  where 400 = <Response [400]>.status_code","time":{"start":1756796878746,"stop":1756796887629,"duration":8883}},{"uid":"aa1118d694b4a63d","reportUrl":"https://pagopa.github.io/rtp-platform-qa/514//#testresult/aa1118d694b4a63d","status":"failed","statusDetails":"AssertionError: assert 400 == 201\n +  where 400 = <Response [400]>.status_code","time":{"start":1756719615688,"stop":1756719619683,"duration":3995}},{"uid":"c07031cfda59fc39","reportUrl":"https://pagopa.github.io/rtp-platform-qa/513//#testresult/c07031cfda59fc39","status":"failed","statusDetails":"AssertionError: assert 400 == 201\n +  where 400 = <Response [400]>.status_code","time":{"start":1756710561182,"stop":1756710568770,"duration":7588}},{"uid":"c15bbb7db2625051","reportUrl":"https://pagopa.github.io/rtp-platform-qa/512//#testresult/c15bbb7db2625051","status":"failed","statusDetails":"AssertionError: assert 400 == 201\n +  where 400 = <Response [400]>.status_code","time":{"start":1756624037198,"stop":1756624042237,"duration":5039}},{"uid":"69b07dbe4b8e38e6","reportUrl":"https://pagopa.github.io/rtp-platform-qa/511//#testresult/69b07dbe4b8e38e6","status":"failed","statusDetails":"AssertionError: assert 400 == 201\n +  where 400 = <Response [400]>.status_code","time":{"start":1756537629082,"stop":1756537633573,"duration":4491}},{"uid":"13949dbf998d61f1","reportUrl":"https://pagopa.github.io/rtp-platform-qa/510//#testresult/13949dbf998d61f1","status":"passed","time":{"start":1756451281369,"stop":1756451289882,"duration":8513}},{"uid":"9156c6001a26159","reportUrl":"https://pagopa.github.io/rtp-platform-qa/509//#testresult/9156c6001a26159","status":"passed","time":{"start":1756385943253,"stop":1756385949318,"duration":6065}},{"uid":"145a996bf04c7441","reportUrl":"https://pagopa.github.io/rtp-platform-qa/508//#testresult/145a996bf04c7441","status":"passed","time":{"start":1756364906498,"stop":1756364916278,"duration":9780}},{"uid":"50afb51abf4c1573","reportUrl":"https://pagopa.github.io/rtp-platform-qa/507//#testresult/50afb51abf4c1573","status":"passed","time":{"start":1756278496373,"stop":1756278501282,"duration":4909}},{"uid":"fb5c32239f321445","reportUrl":"https://pagopa.github.io/rtp-platform-qa/506//#testresult/fb5c32239f321445","status":"passed","time":{"start":1756192095633,"stop":1756192100323,"duration":4690}},{"uid":"a5c9de681d040f91","reportUrl":"https://pagopa.github.io/rtp-platform-qa/505//#testresult/a5c9de681d040f91","status":"failed","statusDetails":"AssertionError: assert 400 == 201\n +  where 400 = <Response [400]>.status_code","time":{"start":1756105725543,"stop":1756105747888,"duration":22345}},{"uid":"a0f339936d48c69c","reportUrl":"https://pagopa.github.io/rtp-platform-qa/504//#testresult/a0f339936d48c69c","status":"passed","time":{"start":1756019229410,"stop":1756019235419,"duration":6009}},{"uid":"c502624e4e23840","reportUrl":"https://pagopa.github.io/rtp-platform-qa/503//#testresult/c502624e4e23840","status":"passed","time":{"start":1755932821859,"stop":1755932827267,"duration":5408}},{"uid":"46598dc18b27a53a","reportUrl":"https://pagopa.github.io/rtp-platform-qa/502//#testresult/46598dc18b27a53a","status":"passed","time":{"start":1755847688747,"stop":1755847692533,"duration":3786}},{"uid":"69c04a50e1119629","reportUrl":"https://pagopa.github.io/rtp-platform-qa/501//#testresult/69c04a50e1119629","status":"passed","time":{"start":1755846480479,"stop":1755846483726,"duration":3247}},{"uid":"d9e5de7def68b067","reportUrl":"https://pagopa.github.io/rtp-platform-qa/500//#testresult/d9e5de7def68b067","status":"passed","time":{"start":1755843940501,"stop":1755843948822,"duration":8321}},{"uid":"4b2658d6b8d9fa2b","reportUrl":"https://pagopa.github.io/rtp-platform-qa/499//#testresult/4b2658d6b8d9fa2b","status":"passed","time":{"start":1755760211494,"stop":1755760217026,"duration":5532}},{"uid":"1b81c3e281830a1d","reportUrl":"https://pagopa.github.io/rtp-platform-qa/498//#testresult/1b81c3e281830a1d","status":"passed","time":{"start":1755673727351,"stop":1755673732978,"duration":5627}},{"uid":"7b0aea636b90d9e","reportUrl":"https://pagopa.github.io/rtp-platform-qa/497//#testresult/7b0aea636b90d9e","status":"passed","time":{"start":1755613330774,"stop":1755613337099,"duration":6325}}]},"tags":["cbi","send","happy_path"]},"source":"8fa31f5d61291c42.json","parameterValues":[]}