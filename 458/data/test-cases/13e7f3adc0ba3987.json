{"uid":"13e7f3adc0ba3987","name":"An RTP is sent to ICCREA service with activated fiscal code","fullName":"tests.test_send_rtp#test_send_rtp_to_iccrea","historyId":"43c6e6f1884b3efb611eee04b5b6eb0c","time":{"start":1753513683348,"stop":1753513683717,"duration":369},"status":"broken","statusMessage":"requests.exceptions.HTTPError: 401 Client Error: Unauthorized for url: https://api-mcshared.uat.cstar.pagopa.it/auth/token","statusTrace":"@allure.feature('RTP Send')\n    @allure.story('Service provider sends an RTP to a provider')\n    @allure.title('An RTP is sent to ICCREA service with activated fiscal code')\n    @pytest.mark.send\n    @pytest.mark.happy_path\n    @pytest.mark.real_integration\n    @pytest.mark.iccrea\n    def test_send_rtp_to_iccrea():\n        rtp_data = generate_rtp_data(payer_id=secrets.iccrea_activated_fiscal_code)\n    \n>       creditor_service_provider_access_token = get_valid_access_token(\n            client_id=secrets.creditor_service_provider.client_id,\n            client_secret=secrets.creditor_service_provider.client_secret,\n            access_token_function=get_access_token,\n        )\n\nfunctional-tests/tests/test_send_rtp.py:134: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \napi/auth.py:8: in get_valid_access_token\n    token_response.raise_for_status()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <Response [401]>\n\n    def raise_for_status(self):\n        \"\"\"Raises :class:`HTTPError`, if one occurred.\"\"\"\n    \n        http_error_msg = \"\"\n        if isinstance(self.reason, bytes):\n            # We attempt to decode utf-8 first because some servers\n            # choose to localize their reason strings. If the string\n            # isn't utf-8, we fall back to iso-8859-1 for all other\n            # encodings. (See PR #3538)\n            try:\n                reason = self.reason.decode(\"utf-8\")\n            except UnicodeDecodeError:\n                reason = self.reason.decode(\"iso-8859-1\")\n        else:\n            reason = self.reason\n    \n        if 400 <= self.status_code < 500:\n            http_error_msg = (\n                f\"{self.status_code} Client Error: {reason} for url: {self.url}\"\n            )\n    \n        elif 500 <= self.status_code < 600:\n            http_error_msg = (\n                f\"{self.status_code} Server Error: {reason} for url: {self.url}\"\n            )\n    \n        if http_error_msg:\n>           raise HTTPError(http_error_msg, response=self)\nE           requests.exceptions.HTTPError: 401 Client Error: Unauthorized for url: https://api-mcshared.uat.cstar.pagopa.it/auth/token\n\n/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/requests/models.py:1026: HTTPError","flaky":true,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"_session_faker","time":{"start":1753513625012,"stop":1753513625068,"duration":56},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"afterStages":[],"labels":[{"name":"feature","value":"RTP Send"},{"name":"story","value":"Service provider sends an RTP to a provider"},{"name":"tag","value":"iccrea"},{"name":"tag","value":"real_integration"},{"name":"tag","value":"happy_path"},{"name":"tag","value":"send"},{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_send_rtp"},{"name":"host","value":"pkrvmpptgkbjq6m"},{"name":"thread","value":"2481-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_send_rtp"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":15,"broken":1,"skipped":0,"passed":19,"unknown":0,"total":35},"items":[{"uid":"ea44d518c496bc3","reportUrl":"https://pagopa.github.io/rtp-platform-qa/457//#testresult/ea44d518c496bc3","status":"failed","statusDetails":"AssertionError: assert 422 == 201\n +  where 422 = <Response [422]>.status_code","time":{"start":1753433598611,"stop":1753433601932,"duration":3321}},{"uid":"7236dab265caea6f","reportUrl":"https://pagopa.github.io/rtp-platform-qa/456//#testresult/7236dab265caea6f","status":"passed","time":{"start":1753427413908,"stop":1753427415572,"duration":1664}},{"uid":"6866638594a65a91","reportUrl":"https://pagopa.github.io/rtp-platform-qa/455//#testresult/6866638594a65a91","status":"failed","statusDetails":"AssertionError: assert 422 == 201\n +  where 422 = <Response [422]>.status_code","time":{"start":1753367017510,"stop":1753367020511,"duration":3001}},{"uid":"87e2183d8f4bc2a5","reportUrl":"https://pagopa.github.io/rtp-platform-qa/454//#testresult/87e2183d8f4bc2a5","status":"passed","time":{"start":1753351374275,"stop":1753351375721,"duration":1446}},{"uid":"50bdc1f2d6968be8","reportUrl":"https://pagopa.github.io/rtp-platform-qa/453//#testresult/50bdc1f2d6968be8","status":"failed","statusDetails":"AssertionError: assert 422 == 201\n +  where 422 = <Response [422]>.status_code","time":{"start":1753341028458,"stop":1753341031947,"duration":3489}},{"uid":"9efa7f161b8e160e","reportUrl":"https://pagopa.github.io/rtp-platform-qa/452//#testresult/9efa7f161b8e160e","status":"passed","time":{"start":1753254648073,"stop":1753254649146,"duration":1073}},{"uid":"8c207d072a760d44","reportUrl":"https://pagopa.github.io/rtp-platform-qa/451//#testresult/8c207d072a760d44","status":"failed","statusDetails":"AssertionError: assert 422 == 201\n +  where 422 = <Response [422]>.status_code","time":{"start":1753168199954,"stop":1753168202535,"duration":2581}},{"uid":"caf835315fd30d11","reportUrl":"https://pagopa.github.io/rtp-platform-qa/450//#testresult/caf835315fd30d11","status":"failed","statusDetails":"AssertionError: assert 422 == 201\n +  where 422 = <Response [422]>.status_code","time":{"start":1753081919527,"stop":1753081922856,"duration":3329}},{"uid":"e5b1a8a201854faf","reportUrl":"https://pagopa.github.io/rtp-platform-qa/449//#testresult/e5b1a8a201854faf","status":"passed","time":{"start":1752995291509,"stop":1752995292598,"duration":1089}},{"uid":"8e2c358c637f2425","reportUrl":"https://pagopa.github.io/rtp-platform-qa/448//#testresult/8e2c358c637f2425","status":"passed","time":{"start":1752908936616,"stop":1752908938313,"duration":1697}},{"uid":"f2a4b5205d12200d","reportUrl":"https://pagopa.github.io/rtp-platform-qa/447//#testresult/f2a4b5205d12200d","status":"passed","time":{"start":1752822659224,"stop":1752822660846,"duration":1622}},{"uid":"c60a393ced51ffe0","reportUrl":"https://pagopa.github.io/rtp-platform-qa/446//#testresult/c60a393ced51ffe0","status":"failed","statusDetails":"AssertionError: assert 422 == 201\n +  where 422 = <Response [422]>.status_code","time":{"start":1752736203907,"stop":1752736207309,"duration":3402}},{"uid":"44388ae8ba157856","reportUrl":"https://pagopa.github.io/rtp-platform-qa/445//#testresult/44388ae8ba157856","status":"failed","statusDetails":"AssertionError: assert 422 == 201\n +  where 422 = <Response [422]>.status_code","time":{"start":1752672670480,"stop":1752672674594,"duration":4114}},{"uid":"9f296939173b9a6b","reportUrl":"https://pagopa.github.io/rtp-platform-qa/444//#testresult/9f296939173b9a6b","status":"passed","time":{"start":1752649801439,"stop":1752649803049,"duration":1610}},{"uid":"5c9f4d6148be0abe","reportUrl":"https://pagopa.github.io/rtp-platform-qa/443//#testresult/5c9f4d6148be0abe","status":"failed","statusDetails":"AssertionError: assert 422 == 201\n +  where 422 = <Response [422]>.status_code","time":{"start":1752569327145,"stop":1752569329958,"duration":2813}},{"uid":"3a0372a24dd9870e","reportUrl":"https://pagopa.github.io/rtp-platform-qa/442//#testresult/3a0372a24dd9870e","status":"passed","time":{"start":1752563413104,"stop":1752563417113,"duration":4009}},{"uid":"7df0e95f81dff712","reportUrl":"https://pagopa.github.io/rtp-platform-qa/441//#testresult/7df0e95f81dff712","status":"passed","time":{"start":1752477019162,"stop":1752477020326,"duration":1164}},{"uid":"d46d43f0080eb66a","reportUrl":"https://pagopa.github.io/rtp-platform-qa/440//#testresult/d46d43f0080eb66a","status":"passed","time":{"start":1752390590106,"stop":1752390591337,"duration":1231}},{"uid":"36677ecc8e309a1d","reportUrl":"https://pagopa.github.io/rtp-platform-qa/439//#testresult/36677ecc8e309a1d","status":"passed","time":{"start":1752304123658,"stop":1752304124939,"duration":1281}},{"uid":"652b519415c3431f","reportUrl":"https://pagopa.github.io/rtp-platform-qa/438//#testresult/652b519415c3431f","status":"passed","time":{"start":1752217755651,"stop":1752217757253,"duration":1602}}]},"tags":["iccrea","real_integration","send","happy_path"]},"source":"13e7f3adc0ba3987.json","parameterValues":[]}