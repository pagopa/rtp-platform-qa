{"uid":"f0d635ae14bfc350","name":"inexistent RTP -> empty body","fullName":"tests.test_get_rtp#test_get_rtp_not_found","historyId":"f374baeb8e6aa77fbe08e6036a22e13b","time":{"start":1753513677085,"stop":1753513678332,"duration":1247},"status":"broken","statusMessage":"requests.exceptions.HTTPError: 401 Client Error: Unauthorized for url: https://api-mcshared.uat.cstar.pagopa.it/auth/token","statusTrace":"@allure.feature('RTP Get')\n    @allure.story('Service provider retrieves an RTP')\n    @allure.title('inexistent RTP -> empty body')\n    @pytest.mark.get\n    @pytest.mark.unhappy_path\n    def test_get_rtp_not_found():\n        fake_rtp_id = str(uuid.uuid4())\n    \n>       token = get_valid_access_token(\n            client_id=secrets.creditor_service_provider.client_id,\n            client_secret=secrets.creditor_service_provider.client_secret,\n            access_token_function=get_access_token,\n        )\n\nfunctional-tests/tests/test_get_rtp.py:67: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \napi/auth.py:8: in get_valid_access_token\n    token_response.raise_for_status()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <Response [401]>\n\n    def raise_for_status(self):\n        \"\"\"Raises :class:`HTTPError`, if one occurred.\"\"\"\n    \n        http_error_msg = \"\"\n        if isinstance(self.reason, bytes):\n            # We attempt to decode utf-8 first because some servers\n            # choose to localize their reason strings. If the string\n            # isn't utf-8, we fall back to iso-8859-1 for all other\n            # encodings. (See PR #3538)\n            try:\n                reason = self.reason.decode(\"utf-8\")\n            except UnicodeDecodeError:\n                reason = self.reason.decode(\"iso-8859-1\")\n        else:\n            reason = self.reason\n    \n        if 400 <= self.status_code < 500:\n            http_error_msg = (\n                f\"{self.status_code} Client Error: {reason} for url: {self.url}\"\n            )\n    \n        elif 500 <= self.status_code < 600:\n            http_error_msg = (\n                f\"{self.status_code} Server Error: {reason} for url: {self.url}\"\n            )\n    \n        if http_error_msg:\n>           raise HTTPError(http_error_msg, response=self)\nE           requests.exceptions.HTTPError: 401 Client Error: Unauthorized for url: https://api-mcshared.uat.cstar.pagopa.it/auth/token\n\n/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/requests/models.py:1026: HTTPError","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"_session_faker","time":{"start":1753513625012,"stop":1753513625068,"duration":56},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"afterStages":[],"labels":[{"name":"story","value":"Service provider retrieves an RTP"},{"name":"feature","value":"RTP Get"},{"name":"tag","value":"unhappy_path"},{"name":"tag","value":"get"},{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_get_rtp"},{"name":"host","value":"pkrvmpptgkbjq6m"},{"name":"thread","value":"2481-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_get_rtp"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":1,"skipped":0,"passed":66,"unknown":0,"total":67},"items":[{"uid":"77c8e438557dc73e","reportUrl":"https://pagopa.github.io/rtp-platform-qa/457//#testresult/77c8e438557dc73e","status":"passed","time":{"start":1753433583089,"stop":1753433584359,"duration":1270}},{"uid":"a6de20e1f6051b72","reportUrl":"https://pagopa.github.io/rtp-platform-qa/456//#testresult/a6de20e1f6051b72","status":"passed","time":{"start":1753427402310,"stop":1753427403154,"duration":844}},{"uid":"ec40af306052d58d","reportUrl":"https://pagopa.github.io/rtp-platform-qa/455//#testresult/ec40af306052d58d","status":"passed","time":{"start":1753367001914,"stop":1753367003060,"duration":1146}},{"uid":"a8d64aa8672b60e","reportUrl":"https://pagopa.github.io/rtp-platform-qa/454//#testresult/a8d64aa8672b60e","status":"passed","time":{"start":1753351362787,"stop":1753351363644,"duration":857}},{"uid":"b0ff003c63ea2424","reportUrl":"https://pagopa.github.io/rtp-platform-qa/453//#testresult/b0ff003c63ea2424","status":"passed","time":{"start":1753341013076,"stop":1753341014036,"duration":960}},{"uid":"b64b42181e5e9c09","reportUrl":"https://pagopa.github.io/rtp-platform-qa/452//#testresult/b64b42181e5e9c09","status":"passed","time":{"start":1753254631873,"stop":1753254632602,"duration":729}},{"uid":"1a491e725d934c35","reportUrl":"https://pagopa.github.io/rtp-platform-qa/451//#testresult/1a491e725d934c35","status":"passed","time":{"start":1753168190790,"stop":1753168191503,"duration":713}},{"uid":"44e562284d25dd71","reportUrl":"https://pagopa.github.io/rtp-platform-qa/450//#testresult/44e562284d25dd71","status":"passed","time":{"start":1753081911688,"stop":1753081912398,"duration":710}},{"uid":"5904ef418d615f82","reportUrl":"https://pagopa.github.io/rtp-platform-qa/449//#testresult/5904ef418d615f82","status":"passed","time":{"start":1752995276944,"stop":1752995277641,"duration":697}},{"uid":"5a2d6e0eeca67360","reportUrl":"https://pagopa.github.io/rtp-platform-qa/448//#testresult/5a2d6e0eeca67360","status":"passed","time":{"start":1752908916857,"stop":1752908918106,"duration":1249}},{"uid":"7c1e300fdff3e830","reportUrl":"https://pagopa.github.io/rtp-platform-qa/447//#testresult/7c1e300fdff3e830","status":"passed","time":{"start":1752822641446,"stop":1752822642697,"duration":1251}},{"uid":"5c0b41c83a65f546","reportUrl":"https://pagopa.github.io/rtp-platform-qa/446//#testresult/5c0b41c83a65f546","status":"passed","time":{"start":1752736191660,"stop":1752736192644,"duration":984}},{"uid":"d1873f2a312e89d7","reportUrl":"https://pagopa.github.io/rtp-platform-qa/445//#testresult/d1873f2a312e89d7","status":"passed","time":{"start":1752672660882,"stop":1752672661572,"duration":690}},{"uid":"131ae75de475e32d","reportUrl":"https://pagopa.github.io/rtp-platform-qa/444//#testresult/131ae75de475e32d","status":"passed","time":{"start":1752649786158,"stop":1752649787093,"duration":935}},{"uid":"9439fbed50b261a9","reportUrl":"https://pagopa.github.io/rtp-platform-qa/443//#testresult/9439fbed50b261a9","status":"passed","time":{"start":1752569317020,"stop":1752569317749,"duration":729}},{"uid":"46fc37c2138fc57e","reportUrl":"https://pagopa.github.io/rtp-platform-qa/442//#testresult/46fc37c2138fc57e","status":"passed","time":{"start":1752563394476,"stop":1752563395696,"duration":1220}},{"uid":"3a09ce1148136eff","reportUrl":"https://pagopa.github.io/rtp-platform-qa/441//#testresult/3a09ce1148136eff","status":"passed","time":{"start":1752477008544,"stop":1752477009263,"duration":719}},{"uid":"60eec47c5ee670ee","reportUrl":"https://pagopa.github.io/rtp-platform-qa/440//#testresult/60eec47c5ee670ee","status":"passed","time":{"start":1752390576026,"stop":1752390576697,"duration":671}},{"uid":"401af1d22b4956bd","reportUrl":"https://pagopa.github.io/rtp-platform-qa/439//#testresult/401af1d22b4956bd","status":"passed","time":{"start":1752304108082,"stop":1752304108888,"duration":806}},{"uid":"804977df226f9b1d","reportUrl":"https://pagopa.github.io/rtp-platform-qa/438//#testresult/804977df226f9b1d","status":"passed","time":{"start":1752217737345,"stop":1752217738475,"duration":1130}}]},"tags":["get","unhappy_path"]},"source":"f0d635ae14bfc350.json","parameterValues":[]}