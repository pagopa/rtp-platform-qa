{"uid":"fb4fba82f4e013e7","name":"An RTP is sent through CBI API","fullName":"functional-tests.tests.test_debtor_service_provider_availability#test_send_rtp_to_cbi","historyId":"02bce6347ef196fe199a14c6e2a830f5","time":{"start":1761891884035,"stop":1761891890567,"duration":6532},"status":"failed","statusMessage":"AssertionError: assert 400 == 201\n +  where 400 = <Response [400]>.status_code","statusTrace":"@allure.feature('RTP Send')\n    @allure.story('Service provider sends an RTP to CBI directly')\n    @allure.title('An RTP is sent through CBI API')\n    @pytest.mark.send\n    @pytest.mark.happy_path\n    @pytest.mark.cbi\n    def test_send_rtp_to_cbi():\n        rtp_data = generate_rtp_data()\n        cbi_payload = generate_epc_rtp_data(rtp_data, bic='UNCRITMM')\n    \n        auth = client_credentials_to_auth_token(\n            secrets.CBI_client_id, secrets.CBI_client_secret\n        )\n        cert, key = pfx_to_pem(\n            secrets.CBI_client_PFX_base64,\n            secrets.CBI_client_PFX_password_base64,\n            config.cert_path,\n            config.key_path,\n        )\n        cbi_token = get_cbi_access_token(cert, key, auth)\n        response = send_srtp_to_cbi(f\"Bearer {cbi_token}\", cbi_payload)\n>       assert response.status_code == 201\nE       assert 400 == 201\nE        +  where 400 = <Response [400]>.status_code\n\nfunctional-tests/tests/test_debtor_service_provider_availability.py:57: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"_session_faker","time":{"start":1761891772938,"stop":1761891772995,"duration":57},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"afterStages":[],"labels":[{"name":"story","value":"Service provider sends an RTP to CBI directly"},{"name":"feature","value":"RTP Send"},{"name":"tag","value":"cbi"},{"name":"tag","value":"happy_path"},{"name":"tag","value":"send"},{"name":"parentSuite","value":"functional-tests.tests"},{"name":"suite","value":"test_debtor_service_provider_availability"},{"name":"host","value":"runnervmwhb2z"},{"name":"thread","value":"2498-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"functional-tests.tests.test_debtor_service_provider_availability"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":14,"broken":0,"skipped":0,"passed":11,"unknown":0,"total":25},"items":[{"uid":"39cd0effba2bdc4f","reportUrl":"https://pagopa.github.io/rtp-platform-qa/599//#testresult/39cd0effba2bdc4f","status":"failed","statusDetails":"AssertionError: assert 400 == 201\n +  where 400 = <Response [400]>.status_code","time":{"start":1761837089919,"stop":1761837096705,"duration":6786}},{"uid":"ea78456dcbcaf317","reportUrl":"https://pagopa.github.io/rtp-platform-qa/598//#testresult/ea78456dcbcaf317","status":"failed","statusDetails":"AssertionError: assert 400 == 201\n +  where 400 = <Response [400]>.status_code","time":{"start":1761818872113,"stop":1761818878459,"duration":6346}},{"uid":"66a2d25db6cf82a7","reportUrl":"https://pagopa.github.io/rtp-platform-qa/597//#testresult/66a2d25db6cf82a7","status":"failed","statusDetails":"AssertionError: assert 400 == 201\n +  where 400 = <Response [400]>.status_code","time":{"start":1761805395790,"stop":1761805398384,"duration":2594}},{"uid":"bbc4253c448a58af","reportUrl":"https://pagopa.github.io/rtp-platform-qa/596//#testresult/bbc4253c448a58af","status":"failed","statusDetails":"AssertionError: assert 400 == 201\n +  where 400 = <Response [400]>.status_code","time":{"start":1761752098338,"stop":1761752104898,"duration":6560}},{"uid":"669d3c499dfd670c","reportUrl":"https://pagopa.github.io/rtp-platform-qa/595//#testresult/669d3c499dfd670c","status":"failed","statusDetails":"AssertionError: assert 400 == 201\n +  where 400 = <Response [400]>.status_code","time":{"start":1761719097058,"stop":1761719104254,"duration":7196}},{"uid":"d0027ae0e21fc512","reportUrl":"https://pagopa.github.io/rtp-platform-qa/594//#testresult/d0027ae0e21fc512","status":"failed","statusDetails":"AssertionError: assert 400 == 201\n +  where 400 = <Response [400]>.status_code","time":{"start":1761632726311,"stop":1761632733791,"duration":7480}},{"uid":"a902577e2a1c1673","reportUrl":"https://pagopa.github.io/rtp-platform-qa/593//#testresult/a902577e2a1c1673","status":"failed","statusDetails":"AssertionError: assert 400 == 201\n +  where 400 = <Response [400]>.status_code","time":{"start":1761546381544,"stop":1761546393494,"duration":11950}},{"uid":"a6016cece6a01199","reportUrl":"https://pagopa.github.io/rtp-platform-qa/592//#testresult/a6016cece6a01199","status":"failed","statusDetails":"AssertionError: assert 400 == 201\n +  where 400 = <Response [400]>.status_code","time":{"start":1761459737018,"stop":1761459743397,"duration":6379}},{"uid":"59d62621cfd311ff","reportUrl":"https://pagopa.github.io/rtp-platform-qa/591//#testresult/59d62621cfd311ff","status":"failed","statusDetails":"AssertionError: assert 400 == 201\n +  where 400 = <Response [400]>.status_code","time":{"start":1761373295198,"stop":1761373301825,"duration":6627}},{"uid":"e91d5aa5a6bc8686","reportUrl":"https://pagopa.github.io/rtp-platform-qa/590//#testresult/e91d5aa5a6bc8686","status":"failed","statusDetails":"AssertionError: assert 400 == 201\n +  where 400 = <Response [400]>.status_code","time":{"start":1761286977191,"stop":1761286983924,"duration":6733}},{"uid":"ce408357c21b79f9","reportUrl":"https://pagopa.github.io/rtp-platform-qa/589//#testresult/ce408357c21b79f9","status":"failed","statusDetails":"AssertionError: assert 400 == 201\n +  where 400 = <Response [400]>.status_code","time":{"start":1761200593543,"stop":1761200600178,"duration":6635}},{"uid":"756b4f24b900c2ea","reportUrl":"https://pagopa.github.io/rtp-platform-qa/588//#testresult/756b4f24b900c2ea","status":"failed","statusDetails":"AssertionError: assert 400 == 201\n +  where 400 = <Response [400]>.status_code","time":{"start":1761114256468,"stop":1761114262939,"duration":6471}},{"uid":"ac73d43eef89b07f","reportUrl":"https://pagopa.github.io/rtp-platform-qa/587//#testresult/ac73d43eef89b07f","status":"failed","statusDetails":"AssertionError: assert 400 == 201\n +  where 400 = <Response [400]>.status_code","time":{"start":1761053831558,"stop":1761053838585,"duration":7027}},{"uid":"8b9f8250d059eab0","reportUrl":"https://pagopa.github.io/rtp-platform-qa/585//#testresult/8b9f8250d059eab0","status":"passed","time":{"start":1761027807918,"stop":1761027813791,"duration":5873}},{"uid":"d301c32758e0e7aa","reportUrl":"https://pagopa.github.io/rtp-platform-qa/584//#testresult/d301c32758e0e7aa","status":"passed","time":{"start":1760941446422,"stop":1760941453913,"duration":7491}},{"uid":"2aad93a0aed6be8e","reportUrl":"https://pagopa.github.io/rtp-platform-qa/583//#testresult/2aad93a0aed6be8e","status":"passed","time":{"start":1760854945236,"stop":1760854953104,"duration":7868}},{"uid":"7b951202a73f7921","reportUrl":"https://pagopa.github.io/rtp-platform-qa/582//#testresult/7b951202a73f7921","status":"passed","time":{"start":1760768475268,"stop":1760768483923,"duration":8655}},{"uid":"6662dcd4a73bf9a","reportUrl":"https://pagopa.github.io/rtp-platform-qa/581//#testresult/6662dcd4a73bf9a","status":"passed","time":{"start":1760682138472,"stop":1760682143632,"duration":5160}},{"uid":"9622e1c0da1bc726","reportUrl":"https://pagopa.github.io/rtp-platform-qa/580//#testresult/9622e1c0da1bc726","status":"passed","time":{"start":1760624499014,"stop":1760624504238,"duration":5224}},{"uid":"f8a7ddcddb8b4b62","reportUrl":"https://pagopa.github.io/rtp-platform-qa/579//#testresult/f8a7ddcddb8b4b62","status":"passed","time":{"start":1760619677621,"stop":1760619682683,"duration":5062}}]},"tags":["cbi","send","happy_path"]},"source":"fb4fba82f4e013e7.json","parameterValues":[]}