{"uid":"62bedfdfd12b92db","name":"A debtor cannot be activated more than once","fullName":"functional-tests.tests.test_activation#test_fail_activate_debtor_two_times","historyId":"5c3b3f3987abc7d89ad84c11e0f01f3a","time":{"start":1761891842363,"stop":1761891843564,"duration":1201},"status":"broken","statusMessage":"requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)","statusTrace":"self = <Response [409]>, kwargs = {}\n\n    def json(self, **kwargs):\n        r\"\"\"Decodes the JSON response body (if any) as a Python object.\n    \n        This may return a dictionary, list, etc. depending on what is in the response.\n    \n        :param \\*\\*kwargs: Optional arguments that ``json.loads`` takes.\n        :raises requests.exceptions.JSONDecodeError: If the response body does not\n            contain valid json.\n        \"\"\"\n    \n        if not self.encoding and self.content and len(self.content) > 3:\n            # No encoding set. JSON RFC 4627 section 3 states we should expect\n            # UTF-8, -16 or -32. Detect which one to use; If the detection or\n            # decoding fails, fall back to `self.text` (using charset_normalizer to make\n            # a best guess).\n            encoding = guess_json_utf(self.content)\n            if encoding is not None:\n                try:\n                    return complexjson.loads(self.content.decode(encoding), **kwargs)\n                except UnicodeDecodeError:\n                    # Wrong UTF codec detected; usually because it's not UTF-8\n                    # but some other 8-bit codec.  This is an RFC violation,\n                    # and the server didn't bother to tell us what codec *was*\n                    # used.\n                    pass\n                except JSONDecodeError as e:\n                    raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\n    \n        try:\n>           return complexjson.loads(self.text, **kwargs)\n                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n/opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/requests/models.py:976: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/json/__init__.py:346: in loads\n    return _default_decoder.decode(s)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^\n/opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/json/decoder.py:345: in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <json.decoder.JSONDecoder object at 0x7f39cbedee40>, s = '', idx = 0\n\n    def raw_decode(self, s, idx=0):\n        \"\"\"Decode a JSON document from ``s`` (a ``str`` beginning with\n        a JSON document) and return a 2-tuple of the Python\n        representation and the index in ``s`` where the document ended.\n    \n        This can be used to decode a JSON document from a string that may\n        have extraneous data at the end.\n    \n        \"\"\"\n        try:\n            obj, end = self.scan_once(s, idx)\n        except StopIteration as err:\n>           raise JSONDecodeError(\"Expecting value\", s, err.value) from None\nE           json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\n/opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/json/decoder.py:363: JSONDecodeError\n\nDuring handling of the above exception, another exception occurred:\n\naccess_token = 'Bearer eyJraWQiOiJiM2MxOWIxODA0ODg0ZGFjOGViYjY3NDhlODcyZDE0ZS83ZjFkZWQzZWQ4OTA0MzEyOTYwMjU5MDIxZjY3Y2I0MCIsImFsZyI6Il...J1vvEDKuiYEYN4TnfPFbOl5y7LUFVSVmDAr3sNzjMNubastQn-AQdJcptO6jS5eEOs0beJFrK3wqC9p2zwVtXdOxavjTQSo7Qp9QBjEW718x6ASmwqLtqo'\n\n    @allure.feature('Activation')\n    @allure.story('Debtor activation')\n    @allure.title('A debtor cannot be activated more than once')\n    @pytest.mark.activation\n    @pytest.mark.unhappy_path\n    def test_fail_activate_debtor_two_times(access_token):\n        debtor_fc = fake_fc()\n    \n        res = activate(access_token, debtor_fc, secrets.debtor_service_provider.service_provider_id)\n        assert res.status_code == 201, f'Error activating debtor, expected 201 but got {res.status_code}'\n    \n        res = activate(access_token, debtor_fc, secrets.debtor_service_provider.service_provider_id)\n        assert res.status_code == 409, f'Error activating debtor, expected 409 but got {res.status_code}'\n>       assert res.json()['errors'][0]['code'] == '01031000E'\n               ^^^^^^^^^^\n\nfunctional-tests/tests/test_activation.py:152: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <Response [409]>, kwargs = {}\n\n    def json(self, **kwargs):\n        r\"\"\"Decodes the JSON response body (if any) as a Python object.\n    \n        This may return a dictionary, list, etc. depending on what is in the response.\n    \n        :param \\*\\*kwargs: Optional arguments that ``json.loads`` takes.\n        :raises requests.exceptions.JSONDecodeError: If the response body does not\n            contain valid json.\n        \"\"\"\n    \n        if not self.encoding and self.content and len(self.content) > 3:\n            # No encoding set. JSON RFC 4627 section 3 states we should expect\n            # UTF-8, -16 or -32. Detect which one to use; If the detection or\n            # decoding fails, fall back to `self.text` (using charset_normalizer to make\n            # a best guess).\n            encoding = guess_json_utf(self.content)\n            if encoding is not None:\n                try:\n                    return complexjson.loads(self.content.decode(encoding), **kwargs)\n                except UnicodeDecodeError:\n                    # Wrong UTF codec detected; usually because it's not UTF-8\n                    # but some other 8-bit codec.  This is an RFC violation,\n                    # and the server didn't bother to tell us what codec *was*\n                    # used.\n                    pass\n                except JSONDecodeError as e:\n                    raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\n    \n        try:\n            return complexjson.loads(self.text, **kwargs)\n        except JSONDecodeError as e:\n            # Catch JSON-related errors and raise as requests.JSONDecodeError\n            # This aliases json.JSONDecodeError and simplejson.JSONDecodeError\n>           raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\nE           requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\n/opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/requests/models.py:980: JSONDecodeError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"_session_faker","time":{"start":1761891772938,"stop":1761891772995,"duration":57},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"access_token","time":{"start":1761891841837,"stop":1761891842363,"duration":526},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"afterStages":[],"labels":[{"name":"feature","value":"Activation"},{"name":"story","value":"Debtor activation"},{"name":"tag","value":"unhappy_path"},{"name":"tag","value":"activation"},{"name":"parentSuite","value":"functional-tests.tests"},{"name":"suite","value":"test_activation"},{"name":"host","value":"runnervmwhb2z"},{"name":"thread","value":"2498-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"functional-tests.tests.test_activation"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":25,"skipped":0,"passed":0,"unknown":0,"total":25},"items":[{"uid":"9f407e9b2da5d26f","reportUrl":"https://pagopa.github.io/rtp-platform-qa/599//#testresult/9f407e9b2da5d26f","status":"broken","statusDetails":"requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)","time":{"start":1761837054132,"stop":1761837055361,"duration":1229}},{"uid":"e86c1e51e51a41f2","reportUrl":"https://pagopa.github.io/rtp-platform-qa/598//#testresult/e86c1e51e51a41f2","status":"broken","statusDetails":"requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)","time":{"start":1761818835354,"stop":1761818836590,"duration":1236}},{"uid":"5aa207eff0fe9906","reportUrl":"https://pagopa.github.io/rtp-platform-qa/597//#testresult/5aa207eff0fe9906","status":"broken","statusDetails":"requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)","time":{"start":1761805351317,"stop":1761805353438,"duration":2121}},{"uid":"f3f388e12c3d4eea","reportUrl":"https://pagopa.github.io/rtp-platform-qa/596//#testresult/f3f388e12c3d4eea","status":"broken","statusDetails":"requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)","time":{"start":1761752071504,"stop":1761752072998,"duration":1494}},{"uid":"f982d0364b8721e9","reportUrl":"https://pagopa.github.io/rtp-platform-qa/595//#testresult/f982d0364b8721e9","status":"broken","statusDetails":"requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)","time":{"start":1761719062062,"stop":1761719064154,"duration":2092}},{"uid":"cdbcf32534431561","reportUrl":"https://pagopa.github.io/rtp-platform-qa/594//#testresult/cdbcf32534431561","status":"broken","statusDetails":"requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)","time":{"start":1761632695819,"stop":1761632697240,"duration":1421}},{"uid":"acaec92b9865f4d9","reportUrl":"https://pagopa.github.io/rtp-platform-qa/593//#testresult/acaec92b9865f4d9","status":"broken","statusDetails":"requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)","time":{"start":1761546340025,"stop":1761546342042,"duration":2017}},{"uid":"1c6135f52c886141","reportUrl":"https://pagopa.github.io/rtp-platform-qa/592//#testresult/1c6135f52c886141","status":"broken","statusDetails":"requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)","time":{"start":1761459701258,"stop":1761459703054,"duration":1796}},{"uid":"bb71d9958af74fe2","reportUrl":"https://pagopa.github.io/rtp-platform-qa/591//#testresult/bb71d9958af74fe2","status":"broken","statusDetails":"requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)","time":{"start":1761373258560,"stop":1761373260281,"duration":1721}},{"uid":"79ef9d53f1b74294","reportUrl":"https://pagopa.github.io/rtp-platform-qa/590//#testresult/79ef9d53f1b74294","status":"broken","statusDetails":"requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)","time":{"start":1761286935639,"stop":1761286937856,"duration":2217}},{"uid":"409523901e7241cd","reportUrl":"https://pagopa.github.io/rtp-platform-qa/589//#testresult/409523901e7241cd","status":"broken","statusDetails":"requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)","time":{"start":1761200557068,"stop":1761200558852,"duration":1784}},{"uid":"354b7106d6b81a18","reportUrl":"https://pagopa.github.io/rtp-platform-qa/588//#testresult/354b7106d6b81a18","status":"broken","statusDetails":"requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)","time":{"start":1761114227493,"stop":1761114228995,"duration":1502}},{"uid":"dcff14e0a19205e8","reportUrl":"https://pagopa.github.io/rtp-platform-qa/587//#testresult/dcff14e0a19205e8","status":"broken","statusDetails":"requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)","time":{"start":1761053799890,"stop":1761053801778,"duration":1888}},{"uid":"609b8d9e6057ca9f","reportUrl":"https://pagopa.github.io/rtp-platform-qa/585//#testresult/609b8d9e6057ca9f","status":"broken","statusDetails":"requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)","time":{"start":1761027777857,"stop":1761027779268,"duration":1411}},{"uid":"3e07f50b4b5f2e88","reportUrl":"https://pagopa.github.io/rtp-platform-qa/584//#testresult/3e07f50b4b5f2e88","status":"broken","statusDetails":"requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)","time":{"start":1760941416583,"stop":1760941418000,"duration":1417}},{"uid":"7bc1af8e29ca802f","reportUrl":"https://pagopa.github.io/rtp-platform-qa/583//#testresult/7bc1af8e29ca802f","status":"broken","statusDetails":"requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)","time":{"start":1760854916862,"stop":1760854918284,"duration":1422}},{"uid":"4ac46e3355fe22e2","reportUrl":"https://pagopa.github.io/rtp-platform-qa/582//#testresult/4ac46e3355fe22e2","status":"broken","statusDetails":"requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)","time":{"start":1760768443665,"stop":1760768445021,"duration":1356}},{"uid":"bdc966c09c0b6f98","reportUrl":"https://pagopa.github.io/rtp-platform-qa/581//#testresult/bdc966c09c0b6f98","status":"broken","statusDetails":"requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)","time":{"start":1760682111067,"stop":1760682112323,"duration":1256}},{"uid":"df014ba25665c90f","reportUrl":"https://pagopa.github.io/rtp-platform-qa/580//#testresult/df014ba25665c90f","status":"broken","statusDetails":"requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)","time":{"start":1760624458043,"stop":1760624460429,"duration":2386}},{"uid":"14b1288e6182b5be","reportUrl":"https://pagopa.github.io/rtp-platform-qa/579//#testresult/14b1288e6182b5be","status":"broken","statusDetails":"requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)","time":{"start":1760619642009,"stop":1760619643906,"duration":1897}}]},"tags":["activation","unhappy_path"]},"source":"62bedfdfd12b92db.json","parameterValues":[]}