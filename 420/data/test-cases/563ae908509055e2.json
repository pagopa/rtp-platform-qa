{"uid":"563ae908509055e2","name":"An RTP is sent through CBI API","fullName":"tests.test_debtor_service_provider_availability#test_send_rtp_to_cbi","historyId":"f80da3262bf8ce0e665c096b1873cbf4","time":{"start":1751360003155,"stop":1751360003980,"duration":825},"status":"failed","statusMessage":"AssertionError: assert 401 == 201\n +  where 401 = <Response [401]>.status_code","statusTrace":"@allure.feature('RTP Send')\n    @allure.story('Service provider sends an RTP to CBI directly')\n    @allure.title('An RTP is sent through CBI API')\n    @pytest.mark.send\n    @pytest.mark.happy_path\n    @pytest.mark.cbi\n    def test_send_rtp_to_cbi():\n        rtp_data = generate_rtp_data()\n        cbi_payload = generate_epc_rtp_data(rtp_data)\n    \n        auth = client_credentials_to_auth_token(\n            secrets.CBI_client_id, secrets.CBI_client_secret\n        )\n        cert, key = pfx_to_pem(\n            secrets.CBI_client_PFX_base64,\n            secrets.CBI_client_PFX_password_base64,\n            config.cert_path,\n            config.key_path,\n        )\n        cbi_token = get_cbi_access_token(cert, key, auth)\n    \n        response = send_srtp_to_cbi(f\"Bearer {cbi_token}\", cbi_payload)\n    \n>       assert response.status_code == 201\nE       assert 401 == 201\nE        +  where 401 = <Response [401]>.status_code\n\nfunctional-tests/tests/test_debtor_service_provider_availability.py:57: AssertionError","flaky":true,"newFailed":true,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"_session_faker","time":{"start":1751359978382,"stop":1751359978437,"duration":55},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"afterStages":[],"labels":[{"name":"feature","value":"RTP Send"},{"name":"story","value":"Service provider sends an RTP to CBI directly"},{"name":"tag","value":"cbi"},{"name":"tag","value":"happy_path"},{"name":"tag","value":"send"},{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_debtor_service_provider_availability"},{"name":"host","value":"pkrvmbietmlfzoi"},{"name":"thread","value":"2482-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_debtor_service_provider_availability"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":48,"broken":0,"skipped":0,"passed":3,"unknown":0,"total":51},"items":[{"uid":"586e438c83e311a0","reportUrl":"https://pagopa.github.io/rtp-platform-qa/421//#testresult/586e438c83e311a0","status":"passed","time":{"start":1751360021221,"stop":1751360025283,"duration":4062}},{"uid":"3d77a6b2ccae2afa","reportUrl":"https://pagopa.github.io/rtp-platform-qa/419//#testresult/3d77a6b2ccae2afa","status":"failed","statusDetails":"AssertionError: assert 401 == 201\n +  where 401 = <Response [401]>.status_code","time":{"start":1751353691546,"stop":1751353692761,"duration":1215}},{"uid":"84ffded12424d139","reportUrl":"https://pagopa.github.io/rtp-platform-qa/418//#testresult/84ffded12424d139","status":"failed","statusDetails":"AssertionError: assert 401 == 201\n +  where 401 = <Response [401]>.status_code","time":{"start":1751267314090,"stop":1751267315733,"duration":1643}},{"uid":"13090be19ddaf67d","reportUrl":"https://pagopa.github.io/rtp-platform-qa/417//#testresult/13090be19ddaf67d","status":"failed","statusDetails":"AssertionError: assert 401 == 201\n +  where 401 = <Response [401]>.status_code","time":{"start":1751180866752,"stop":1751180868042,"duration":1290}},{"uid":"6f7f1ab927269e9b","reportUrl":"https://pagopa.github.io/rtp-platform-qa/416//#testresult/6f7f1ab927269e9b","status":"failed","statusDetails":"AssertionError: assert 401 == 201\n +  where 401 = <Response [401]>.status_code","time":{"start":1751094448902,"stop":1751094450150,"duration":1248}},{"uid":"ac9aef9597298e06","reportUrl":"https://pagopa.github.io/rtp-platform-qa/415//#testresult/ac9aef9597298e06","status":"passed","time":{"start":1751008081647,"stop":1751008090448,"duration":8801}},{"uid":"3fd62c0b0e0f9570","reportUrl":"https://pagopa.github.io/rtp-platform-qa/414//#testresult/3fd62c0b0e0f9570","status":"passed","time":{"start":1750947020753,"stop":1750947023745,"duration":2992}},{"uid":"762d8dcbe539c27c","reportUrl":"https://pagopa.github.io/rtp-platform-qa/413//#testresult/762d8dcbe539c27c","status":"failed","statusDetails":"AssertionError: assert 400 == 201\n +  where 400 = <Response [400]>.status_code","time":{"start":1750924195879,"stop":1750924197123,"duration":1244}},{"uid":"6a85c646659e3ed1","reportUrl":"https://pagopa.github.io/rtp-platform-qa/412//#testresult/6a85c646659e3ed1","status":"failed","statusDetails":"AssertionError: assert 400 == 201\n +  where 400 = <Response [400]>.status_code","time":{"start":1750921676993,"stop":1750921678197,"duration":1204}},{"uid":"80c1573a5240e0e1","reportUrl":"https://pagopa.github.io/rtp-platform-qa/411//#testresult/80c1573a5240e0e1","status":"failed","statusDetails":"AssertionError: assert 400 == 201\n +  where 400 = <Response [400]>.status_code","time":{"start":1750856377769,"stop":1750856379494,"duration":1725}},{"uid":"e599f6ea2ed27e19","reportUrl":"https://pagopa.github.io/rtp-platform-qa/408//#testresult/e599f6ea2ed27e19","status":"failed","statusDetails":"AssertionError: assert 400 == 201\n +  where 400 = <Response [400]>.status_code","time":{"start":1750835297538,"stop":1750835299384,"duration":1846}},{"uid":"d15322c528271229","reportUrl":"https://pagopa.github.io/rtp-platform-qa/406//#testresult/d15322c528271229","status":"failed","statusDetails":"AssertionError: assert 400 == 201\n +  where 400 = <Response [400]>.status_code","time":{"start":1750779064858,"stop":1750779066121,"duration":1263}},{"uid":"c15fb5146cf42079","reportUrl":"https://pagopa.github.io/rtp-platform-qa/404//#testresult/c15fb5146cf42079","status":"failed","statusDetails":"AssertionError: assert 400 == 201\n +  where 400 = <Response [400]>.status_code","time":{"start":1750756723012,"stop":1750756724065,"duration":1053}},{"uid":"1f66b3015a7b087b","reportUrl":"https://pagopa.github.io/rtp-platform-qa/403//#testresult/1f66b3015a7b087b","status":"failed","statusDetails":"AssertionError: assert 400 == 201\n +  where 400 = <Response [400]>.status_code","time":{"start":1750748872183,"stop":1750748873268,"duration":1085}},{"uid":"5f702d2cbdd6c49c","reportUrl":"https://pagopa.github.io/rtp-platform-qa/402//#testresult/5f702d2cbdd6c49c","status":"failed","statusDetails":"AssertionError: assert 400 == 201\n +  where 400 = <Response [400]>.status_code","time":{"start":1750684867665,"stop":1750684868874,"duration":1209}},{"uid":"aeeab6881459f83f","reportUrl":"https://pagopa.github.io/rtp-platform-qa/401//#testresult/aeeab6881459f83f","status":"failed","statusDetails":"AssertionError: assert 400 == 201\n +  where 400 = <Response [400]>.status_code","time":{"start":1750662506169,"stop":1750662507888,"duration":1719}},{"uid":"2ae62368fd31b31","reportUrl":"https://pagopa.github.io/rtp-platform-qa/400//#testresult/2ae62368fd31b31","status":"failed","statusDetails":"AssertionError: assert 400 == 201\n +  where 400 = <Response [400]>.status_code","time":{"start":1750576081237,"stop":1750576082417,"duration":1180}},{"uid":"14fa95cc1ba5e421","reportUrl":"https://pagopa.github.io/rtp-platform-qa/399//#testresult/14fa95cc1ba5e421","status":"failed","statusDetails":"AssertionError: assert 500 == 201\n +  where 500 = <Response [500]>.status_code","time":{"start":1750489647950,"stop":1750489649286,"duration":1336}},{"uid":"f1554a4eac167c55","reportUrl":"https://pagopa.github.io/rtp-platform-qa/398//#testresult/f1554a4eac167c55","status":"failed","statusDetails":"AssertionError: assert 400 == 201\n +  where 400 = <Response [400]>.status_code","time":{"start":1750403242341,"stop":1750403243249,"duration":908}},{"uid":"bfbd30cfe23691e","reportUrl":"https://pagopa.github.io/rtp-platform-qa/397//#testresult/bfbd30cfe23691e","status":"failed","statusDetails":"AssertionError: assert 400 == 201\n +  where 400 = <Response [400]>.status_code","time":{"start":1750335013292,"stop":1750335015112,"duration":1820}}]},"tags":["cbi","send","happy_path"]},"source":"563ae908509055e2.json","parameterValues":[]}