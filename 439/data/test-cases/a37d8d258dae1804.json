{"uid":"a37d8d258dae1804","name":"An RTP is sent through CBI API","fullName":"tests.test_debtor_service_provider_availability#test_send_rtp_to_cbi","historyId":"f80da3262bf8ce0e665c096b1873cbf4","time":{"start":1752304092455,"stop":1752304098229,"duration":5774},"status":"failed","statusMessage":"AssertionError: assert 400 == 201\n +  where 400 = <Response [400]>.status_code","statusTrace":"@allure.feature('RTP Send')\n    @allure.story('Service provider sends an RTP to CBI directly')\n    @allure.title('An RTP is sent through CBI API')\n    @pytest.mark.send\n    @pytest.mark.happy_path\n    @pytest.mark.cbi\n    def test_send_rtp_to_cbi():\n        rtp_data = generate_rtp_data()\n        cbi_payload = generate_epc_rtp_data(rtp_data, bic='UNCRITMM')\n    \n        auth = client_credentials_to_auth_token(\n            secrets.CBI_client_id, secrets.CBI_client_secret\n        )\n        cert, key = pfx_to_pem(\n            secrets.CBI_client_PFX_base64,\n            secrets.CBI_client_PFX_password_base64,\n            config.cert_path,\n            config.key_path,\n        )\n        cbi_token = get_cbi_access_token(cert, key, auth)\n        response = send_srtp_to_cbi(f\"Bearer {cbi_token}\", cbi_payload)\n>       assert response.status_code == 201\nE       assert 400 == 201\nE        +  where 400 = <Response [400]>.status_code\n\nfunctional-tests/tests/test_debtor_service_provider_availability.py:57: AssertionError","flaky":false,"newFailed":true,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"_session_faker","time":{"start":1752304016692,"stop":1752304016747,"duration":55},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"afterStages":[],"labels":[{"name":"story","value":"Service provider sends an RTP to CBI directly"},{"name":"feature","value":"RTP Send"},{"name":"tag","value":"cbi"},{"name":"tag","value":"happy_path"},{"name":"tag","value":"send"},{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_debtor_service_provider_availability"},{"name":"host","value":"pkrvmq0rgcvqdmg"},{"name":"thread","value":"2505-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_debtor_service_provider_availability"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":51,"broken":1,"skipped":0,"passed":15,"unknown":0,"total":67},"items":[{"uid":"845dde017e73cecc","reportUrl":"https://pagopa.github.io/rtp-platform-qa/438//#testresult/845dde017e73cecc","status":"broken","statusDetails":"requests.exceptions.SSLError: HTTPSConnectionPool(host='stgcbiglobeopenbankingapigateway.nexi.it', port=443): Max retries exceeded with url: /srtp/core/v1/1.0.0/sepa-request-to-pay-requests (Caused by SSLError(SSLEOFError(8, '[SSL: UNEXPECTED_EOF_WHILE_READING] EOF occurred in violation of protocol (_ssl.c:1028)')))","time":{"start":1752217724766,"stop":1752217726302,"duration":1536}},{"uid":"66ae34b057f6e423","reportUrl":"https://pagopa.github.io/rtp-platform-qa/437//#testresult/66ae34b057f6e423","status":"passed","time":{"start":1752163209291,"stop":1752163212524,"duration":3233}},{"uid":"809503beb62302cf","reportUrl":"https://pagopa.github.io/rtp-platform-qa/436//#testresult/809503beb62302cf","status":"passed","time":{"start":1752160521207,"stop":1752160524006,"duration":2799}},{"uid":"ba127a7a10e83e04","reportUrl":"https://pagopa.github.io/rtp-platform-qa/435//#testresult/ba127a7a10e83e04","status":"passed","time":{"start":1752145253939,"stop":1752145258944,"duration":5005}},{"uid":"880ded048ebf6a4f","reportUrl":"https://pagopa.github.io/rtp-platform-qa/434//#testresult/880ded048ebf6a4f","status":"passed","time":{"start":1752131319175,"stop":1752131331772,"duration":12597}},{"uid":"1e65374d65c5fb42","reportUrl":"https://pagopa.github.io/rtp-platform-qa/432//#testresult/1e65374d65c5fb42","status":"passed","time":{"start":1752044905036,"stop":1752044913134,"duration":8098}},{"uid":"505ff25cf04d6375","reportUrl":"https://pagopa.github.io/rtp-platform-qa/431//#testresult/505ff25cf04d6375","status":"passed","time":{"start":1751958496364,"stop":1751958501582,"duration":5218}},{"uid":"24da466164bf83fd","reportUrl":"https://pagopa.github.io/rtp-platform-qa/430//#testresult/24da466164bf83fd","status":"passed","time":{"start":1751882683107,"stop":1751882687307,"duration":4200}},{"uid":"505e0bea12f304b6","reportUrl":"https://pagopa.github.io/rtp-platform-qa/429//#testresult/505e0bea12f304b6","status":"passed","time":{"start":1751872130216,"stop":1751872136076,"duration":5860}},{"uid":"3e269d7df71d1bf6","reportUrl":"https://pagopa.github.io/rtp-platform-qa/428//#testresult/3e269d7df71d1bf6","status":"failed","statusDetails":"AssertionError: assert 400 == 201\n +  where 400 = <Response [400]>.status_code","time":{"start":1751785640613,"stop":1751785647403,"duration":6790}},{"uid":"18b476780e8e920d","reportUrl":"https://pagopa.github.io/rtp-platform-qa/427//#testresult/18b476780e8e920d","status":"failed","statusDetails":"AssertionError: assert 400 == 201\n +  where 400 = <Response [400]>.status_code","time":{"start":1751699241932,"stop":1751699248251,"duration":6319}},{"uid":"4cea31da975339d0","reportUrl":"https://pagopa.github.io/rtp-platform-qa/426//#testresult/4cea31da975339d0","status":"passed","time":{"start":1751612887704,"stop":1751612895762,"duration":8058}},{"uid":"91c0fbac752aea18","reportUrl":"https://pagopa.github.io/rtp-platform-qa/425//#testresult/91c0fbac752aea18","status":"passed","time":{"start":1751526500436,"stop":1751526509059,"duration":8623}},{"uid":"3121cad697e589ec","reportUrl":"https://pagopa.github.io/rtp-platform-qa/424//#testresult/3121cad697e589ec","status":"passed","time":{"start":1751440089275,"stop":1751440098848,"duration":9573}},{"uid":"b24cb9078c73340d","reportUrl":"https://pagopa.github.io/rtp-platform-qa/423//#testresult/b24cb9078c73340d","status":"passed","time":{"start":1751383885918,"stop":1751383889690,"duration":3772}},{"uid":"563ae908509055e2","reportUrl":"https://pagopa.github.io/rtp-platform-qa/420//#testresult/563ae908509055e2","status":"failed","statusDetails":"AssertionError: assert 401 == 201\n +  where 401 = <Response [401]>.status_code","time":{"start":1751360003155,"stop":1751360003980,"duration":825}},{"uid":"586e438c83e311a0","reportUrl":"https://pagopa.github.io/rtp-platform-qa/421//#testresult/586e438c83e311a0","status":"passed","time":{"start":1751360021221,"stop":1751360025283,"duration":4062}},{"uid":"3d77a6b2ccae2afa","reportUrl":"https://pagopa.github.io/rtp-platform-qa/419//#testresult/3d77a6b2ccae2afa","status":"failed","statusDetails":"AssertionError: assert 401 == 201\n +  where 401 = <Response [401]>.status_code","time":{"start":1751353691546,"stop":1751353692761,"duration":1215}},{"uid":"84ffded12424d139","reportUrl":"https://pagopa.github.io/rtp-platform-qa/418//#testresult/84ffded12424d139","status":"failed","statusDetails":"AssertionError: assert 401 == 201\n +  where 401 = <Response [401]>.status_code","time":{"start":1751267314090,"stop":1751267315733,"duration":1643}},{"uid":"13090be19ddaf67d","reportUrl":"https://pagopa.github.io/rtp-platform-qa/417//#testresult/13090be19ddaf67d","status":"failed","statusDetails":"AssertionError: assert 401 == 201\n +  where 401 = <Response [401]>.status_code","time":{"start":1751180866752,"stop":1751180868042,"duration":1290}}]},"tags":["cbi","send","happy_path"]},"source":"a37d8d258dae1804.json","parameterValues":[]}