{"uid":"7cc22a40024f19a1","name":"Send GPD message with invalid payee_id and verify no RTP is created","fullName":"tests.test_producer_gpd_message#test_send_producer_gpd_message_invalid_registry_payee","historyId":"1264c21e0a0416347b354c00285607f6","time":{"start":1760340656786,"stop":1760340668027,"duration":11241},"status":"failed","statusMessage":"Failed: Failed to send valid_payee message after 3 attempts","statusTrace":"@allure.feature('GPD Message')\n    @allure.story('Send GPD message to queue with invalid payee')\n    @allure.title('Send GPD message with invalid payee_id and verify no RTP is created')\n    @pytest.mark.producer_gpd_message\n    @pytest.mark.happy_path\n    @pytest.mark.timeout(TEST_TIMEOUT_SEC)\n    def test_send_producer_gpd_message_invalid_registry_payee():\n        debtor_fc = activate_new_debtor()\n    \n        invalid_payee_id = '80015060728' # length = 11 || 16\n    \n        common_iuv = '12445678901294067'\n        common_nav = f\"3{common_iuv}\"\n    \n        timestamp = 1768442371790\n    \n        payload = generate_producer_gpd_message_payload(\n            operation='CREATE',\n            ec_tax_code=invalid_payee_id,\n            amount=30000,\n            status='VALID',\n            overrides={\n                'iuv': common_iuv,\n                'nav': common_nav,\n                'timestamp': timestamp,\n                'debtor_tax_code': debtor_fc\n            }\n        )\n    \n>       response = send_message_with_retry(payload, 'valid_payee')\n\nfunctional-tests/tests/test_producer_gpd_message.py:112: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\npayload = {'amount': 30000, 'debtor_tax_code': 'MNTMLN29L09X000R', 'description': 'QTriyyKeCoCCyoF7mDLHxRqzumwF4pjH', 'due_date': 1762932658002, ...}\nmessage_label = 'valid_payee', max_retries = 3, retry_delay = 5\n\n    def send_message_with_retry(payload, message_label='', max_retries=3, retry_delay=5):\n        \"\"\"Helper function to send a GPD message with retry mechanism.\n    \n        Args:\n            payload (dict): The message payload to send\n            message_label (str): A label for the message for logging purposes\n            max_retries (int): Maximum number of retry attempts\n            retry_delay (int): Seconds to wait between retry attempts\n    \n        Returns:\n            requests.Response: The API response if successful\n    \n        Raises:\n            AssertionError: If all retries fail\n        \"\"\"\n        for attempt in range(max_retries):\n            try:\n                print(f\"Sending {message_label} message (attempt {attempt+1}/{max_retries})...\")\n                response = send_producer_gpd_message(payload)\n    \n                if response.status_code == 200:\n                    print(f\"{message_label} message sent successfully\")\n                    return response\n                elif 'RequestTimedOutError' in response.text:\n                    print(f\"Timeout detected: {response.text}\")\n                    if attempt < max_retries - 1:\n                        print(f\"Waiting {retry_delay} seconds before retrying...\")\n                        time.sleep(retry_delay)\n                    continue\n                else:\n                    assert response.status_code == 200, f\"Failed to send {message_label} message: {response.text}\"\n            except Exception as e:\n                if attempt < max_retries - 1:\n                    print(f\"Error sending: {str(e)}. Retrying in {retry_delay} seconds...\")\n                    time.sleep(retry_delay)\n    \n>       pytest.fail(f\"Failed to send {message_label} message after {max_retries} attempts\")\nE       Failed: Failed to send valid_payee message after 3 attempts\n\nutils/producer_gpd_utils.py:50: Failed","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"_session_faker","time":{"start":1760340142691,"stop":1760340142749,"duration":58},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"status":"failed","statusMessage":"Failed: Failed to send valid_payee message after 3 attempts","statusTrace":"@allure.feature('GPD Message')\n    @allure.story('Send GPD message to queue with invalid payee')\n    @allure.title('Send GPD message with invalid payee_id and verify no RTP is created')\n    @pytest.mark.producer_gpd_message\n    @pytest.mark.happy_path\n    @pytest.mark.timeout(TEST_TIMEOUT_SEC)\n    def test_send_producer_gpd_message_invalid_registry_payee():\n        debtor_fc = activate_new_debtor()\n    \n        invalid_payee_id = '80015060728' # length = 11 || 16\n    \n        common_iuv = '12445678901294067'\n        common_nav = f\"3{common_iuv}\"\n    \n        timestamp = 1768442371790\n    \n        payload = generate_producer_gpd_message_payload(\n            operation='CREATE',\n            ec_tax_code=invalid_payee_id,\n            amount=30000,\n            status='VALID',\n            overrides={\n                'iuv': common_iuv,\n                'nav': common_nav,\n                'timestamp': timestamp,\n                'debtor_tax_code': debtor_fc\n            }\n        )\n    \n>       response = send_message_with_retry(payload, 'valid_payee')\n\nfunctional-tests/tests/test_producer_gpd_message.py:112: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\npayload = {'amount': 30000, 'debtor_tax_code': 'MNTMLN29L09X000R', 'description': 'QTriyyKeCoCCyoF7mDLHxRqzumwF4pjH', 'due_date': 1762932658002, ...}\nmessage_label = 'valid_payee', max_retries = 3, retry_delay = 5\n\n    def send_message_with_retry(payload, message_label='', max_retries=3, retry_delay=5):\n        \"\"\"Helper function to send a GPD message with retry mechanism.\n    \n        Args:\n            payload (dict): The message payload to send\n            message_label (str): A label for the message for logging purposes\n            max_retries (int): Maximum number of retry attempts\n            retry_delay (int): Seconds to wait between retry attempts\n    \n        Returns:\n            requests.Response: The API response if successful\n    \n        Raises:\n            AssertionError: If all retries fail\n        \"\"\"\n        for attempt in range(max_retries):\n            try:\n                print(f\"Sending {message_label} message (attempt {attempt+1}/{max_retries})...\")\n                response = send_producer_gpd_message(payload)\n    \n                if response.status_code == 200:\n                    print(f\"{message_label} message sent successfully\")\n                    return response\n                elif 'RequestTimedOutError' in response.text:\n                    print(f\"Timeout detected: {response.text}\")\n                    if attempt < max_retries - 1:\n                        print(f\"Waiting {retry_delay} seconds before retrying...\")\n                        time.sleep(retry_delay)\n                    continue\n                else:\n                    assert response.status_code == 200, f\"Failed to send {message_label} message: {response.text}\"\n            except Exception as e:\n                if attempt < max_retries - 1:\n                    print(f\"Error sending: {str(e)}. Retrying in {retry_delay} seconds...\")\n                    time.sleep(retry_delay)\n    \n>       pytest.fail(f\"Failed to send {message_label} message after {max_retries} attempts\")\nE       Failed: Failed to send valid_payee message after 3 attempts\n\nutils/producer_gpd_utils.py:50: Failed","steps":[],"attachments":[{"uid":"32f1d2c08f97e3e0","name":"stdout","source":"32f1d2c08f97e3e0.txt","type":"text/plain","size":938}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},"afterStages":[],"labels":[{"name":"feature","value":"GPD Message"},{"name":"story","value":"Send GPD message to queue with invalid payee"},{"name":"tag","value":"timeout(300)"},{"name":"tag","value":"happy_path"},{"name":"tag","value":"producer_gpd_message"},{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_producer_gpd_message"},{"name":"host","value":"runnervmwhb2z"},{"name":"thread","value":"2561-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_producer_gpd_message"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":13,"broken":1,"skipped":0,"passed":0,"unknown":0,"total":14},"items":[{"uid":"85d8c31aafbd7ddb","reportUrl":"https://pagopa.github.io/rtp-platform-qa/565//#testresult/85d8c31aafbd7ddb","status":"failed","statusDetails":"Failed: Failed to send valid_payee message after 3 attempts","time":{"start":1760254044149,"stop":1760254055392,"duration":11243}},{"uid":"2de64320ea889d37","reportUrl":"https://pagopa.github.io/rtp-platform-qa/564//#testresult/2de64320ea889d37","status":"failed","statusDetails":"Failed: Failed to send valid_payee message after 3 attempts","time":{"start":1760167607195,"stop":1760167617930,"duration":10735}},{"uid":"ff0a7925ec3f51d9","reportUrl":"https://pagopa.github.io/rtp-platform-qa/563//#testresult/ff0a7925ec3f51d9","status":"failed","statusDetails":"Failed: Failed to send valid_payee message after 3 attempts","time":{"start":1760081321212,"stop":1760081332119,"duration":10907}},{"uid":"f0d3b4a7ef14a11c","reportUrl":"https://pagopa.github.io/rtp-platform-qa/562//#testresult/f0d3b4a7ef14a11c","status":"failed","statusDetails":"Failed: Failed to send valid_payee message after 3 attempts","time":{"start":1759994952050,"stop":1759994963014,"duration":10964}},{"uid":"fc76d9c8dc60c74d","reportUrl":"https://pagopa.github.io/rtp-platform-qa/561//#testresult/fc76d9c8dc60c74d","status":"failed","statusDetails":"Failed: Failed to send valid_payee message after 3 attempts","time":{"start":1759929483290,"stop":1759929494272,"duration":10982}},{"uid":"b37064aa4a28c78","reportUrl":"https://pagopa.github.io/rtp-platform-qa/560//#testresult/b37064aa4a28c78","status":"failed","statusDetails":"Failed: Failed to send valid_payee message after 3 attempts","time":{"start":1759921278187,"stop":1759921288928,"duration":10741}},{"uid":"21288a77193621d6","reportUrl":"https://pagopa.github.io/rtp-platform-qa/559//#testresult/21288a77193621d6","status":"failed","statusDetails":"Failed: Failed to send valid_payee message after 3 attempts","time":{"start":1759920044665,"stop":1759920055435,"duration":10770}},{"uid":"f962658eea49fb99","reportUrl":"https://pagopa.github.io/rtp-platform-qa/558//#testresult/f962658eea49fb99","status":"broken","statusDetails":"requests.exceptions.HTTPError: 502 Server Error: Bad Gateway for url: https://api-mcshared.uat.cstar.pagopa.it/auth/token","time":{"start":1759908350002,"stop":1759908350522,"duration":520}},{"uid":"90d4f6459459c35","reportUrl":"https://pagopa.github.io/rtp-platform-qa/557//#testresult/90d4f6459459c35","status":"failed","statusDetails":"Failed: Failed to send valid_payee message after 3 attempts","time":{"start":1759822137688,"stop":1759822148421,"duration":10733}},{"uid":"1ce5d219310ae562","reportUrl":"https://pagopa.github.io/rtp-platform-qa/556//#testresult/1ce5d219310ae562","status":"failed","statusDetails":"Failed: Failed to send valid_payee message after 3 attempts","time":{"start":1759735721895,"stop":1759735733192,"duration":11297}},{"uid":"2b5a284c79701223","reportUrl":"https://pagopa.github.io/rtp-platform-qa/555//#testresult/2b5a284c79701223","status":"failed","statusDetails":"Failed: Failed to send valid_payee message after 3 attempts","time":{"start":1759650016567,"stop":1759650027325,"duration":10758}},{"uid":"df5bd9d232f44956","reportUrl":"https://pagopa.github.io/rtp-platform-qa/554//#testresult/df5bd9d232f44956","status":"failed","statusDetails":"Failed: Failed to send valid_payee message after 3 attempts","time":{"start":1759563679904,"stop":1759563691139,"duration":11235}},{"uid":"a3a158a842a6fb8","reportUrl":"https://pagopa.github.io/rtp-platform-qa/553//#testresult/a3a158a842a6fb8","status":"failed","statusDetails":"Failed: Failed to send valid_payee message after 3 attempts","time":{"start":1759484844261,"stop":1759484855555,"duration":11294}}]},"tags":["timeout(300)","producer_gpd_message","happy_path"]},"source":"7cc22a40024f19a1.json","parameterValues":[]}