{"uid":"6236d11c1b13c404","name":"RTP is successfully retrieved","fullName":"tests.test_get_rtp#test_get_rtp_success","historyId":"caeb9610ab96a7a077f09cf26a913a9a","time":{"start":1757489074350,"stop":1757489076579,"duration":2229},"status":"failed","statusMessage":"AssertionError: assert 403 == 200\n +  where 403 = <Response [403]>.status_code","statusTrace":"@allure.feature('RTP Get')\n    @allure.story('Service provider retrieves an RTP')\n    @allure.title('RTP is successfully retrieved')\n    @pytest.mark.get\n    @pytest.mark.happy_path\n    def test_get_rtp_success():\n        rtp_data = generate_rtp_data()\n    \n        debtor_service_provider_access_token = get_valid_access_token(\n            client_id=secrets.debtor_service_provider.client_id,\n            client_secret=secrets.debtor_service_provider.client_secret,\n            access_token_function=get_access_token,\n        )\n    \n        creditor_service_provider_access_token = get_valid_access_token(\n            client_id=secrets.creditor_service_provider.client_id,\n            client_secret=secrets.creditor_service_provider.client_secret,\n            access_token_function=get_access_token,\n        )\n    \n        activation_response = activate(\n            debtor_service_provider_access_token,\n            rtp_data['payer']['payerId'],\n            secrets.debtor_service_provider.service_provider_id,\n        )\n        assert activation_response.status_code == 201, 'Error activating debtor'\n    \n        send_response = send_rtp(\n            access_token=creditor_service_provider_access_token, rtp_payload=rtp_data\n        )\n        assert send_response.status_code == 201\n    \n        location = send_response.headers['Location']\n        resource_id = location.split('/')[-1]\n    \n        get_response = get_rtp(\n            access_token=creditor_service_provider_access_token, rtp_id=resource_id\n        )\n>       assert get_response.status_code == 200\nE       assert 403 == 200\nE        +  where 403 = <Response [403]>.status_code\n\nfunctional-tests/tests/test_get_rtp.py:54: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"_session_faker","time":{"start":1757488868663,"stop":1757488868719,"duration":56},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"afterStages":[],"labels":[{"name":"story","value":"Service provider retrieves an RTP"},{"name":"feature","value":"RTP Get"},{"name":"tag","value":"happy_path"},{"name":"tag","value":"get"},{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_get_rtp"},{"name":"host","value":"runnervmf4ws1"},{"name":"thread","value":"2561-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_get_rtp"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":48,"broken":17,"skipped":0,"passed":66,"unknown":0,"total":131},"items":[{"uid":"20fce1d492c33058","reportUrl":"https://pagopa.github.io/rtp-platform-qa/524//#testresult/20fce1d492c33058","status":"failed","statusDetails":"AssertionError: assert 403 == 200\n +  where 403 = <Response [403]>.status_code","time":{"start":1757402552032,"stop":1757402553937,"duration":1905}},{"uid":"8976c1f64b401199","reportUrl":"https://pagopa.github.io/rtp-platform-qa/523//#testresult/8976c1f64b401199","status":"failed","statusDetails":"AssertionError: assert 403 == 200\n +  where 403 = <Response [403]>.status_code","time":{"start":1757316146228,"stop":1757316148161,"duration":1933}},{"uid":"4503f19bad221db0","reportUrl":"https://pagopa.github.io/rtp-platform-qa/522//#testresult/4503f19bad221db0","status":"failed","statusDetails":"AssertionError: assert 403 == 200\n +  where 403 = <Response [403]>.status_code","time":{"start":1757229692128,"stop":1757229694440,"duration":2312}},{"uid":"95df2bb78546cbe8","reportUrl":"https://pagopa.github.io/rtp-platform-qa/521//#testresult/95df2bb78546cbe8","status":"failed","statusDetails":"AssertionError: assert 403 == 200\n +  where 403 = <Response [403]>.status_code","time":{"start":1757143253621,"stop":1757143257017,"duration":3396}},{"uid":"7e3314be84bde4fa","reportUrl":"https://pagopa.github.io/rtp-platform-qa/520//#testresult/7e3314be84bde4fa","status":"broken","statusDetails":"requests.exceptions.HTTPError: 502 Server Error: Bad Gateway for url: https://api-mcshared.uat.cstar.pagopa.it/auth/token","time":{"start":1757057136616,"stop":1757057137226,"duration":610}},{"uid":"b21b21c871d0d553","reportUrl":"https://pagopa.github.io/rtp-platform-qa/519//#testresult/b21b21c871d0d553","status":"failed","statusDetails":"AssertionError: assert 403 == 200\n +  where 403 = <Response [403]>.status_code","time":{"start":1756969677539,"stop":1756969679518,"duration":1979}},{"uid":"1821c7a1e60699b9","reportUrl":"https://pagopa.github.io/rtp-platform-qa/518//#testresult/1821c7a1e60699b9","status":"failed","statusDetails":"AssertionError: assert 403 == 200\n +  where 403 = <Response [403]>.status_code","time":{"start":1756910910590,"stop":1756910913862,"duration":3272}},{"uid":"ce24c2fd1d2bd665","reportUrl":"https://pagopa.github.io/rtp-platform-qa/517//#testresult/ce24c2fd1d2bd665","status":"failed","statusDetails":"AssertionError: assert 403 == 200\n +  where 403 = <Response [403]>.status_code","time":{"start":1756883298521,"stop":1756883300785,"duration":2264}},{"uid":"18ed524c905a48f0","reportUrl":"https://pagopa.github.io/rtp-platform-qa/516//#testresult/18ed524c905a48f0","status":"failed","statusDetails":"AssertionError: assert 403 == 200\n +  where 403 = <Response [403]>.status_code","time":{"start":1756798021401,"stop":1756798023251,"duration":1850}},{"uid":"9fbd5af24618382f","reportUrl":"https://pagopa.github.io/rtp-platform-qa/515//#testresult/9fbd5af24618382f","status":"failed","statusDetails":"AssertionError: assert 403 == 200\n +  where 403 = <Response [403]>.status_code","time":{"start":1756796895755,"stop":1756796897923,"duration":2168}},{"uid":"1c62309f26dc9195","reportUrl":"https://pagopa.github.io/rtp-platform-qa/514//#testresult/1c62309f26dc9195","status":"failed","statusDetails":"AssertionError: assert 403 == 200\n +  where 403 = <Response [403]>.status_code","time":{"start":1756719629247,"stop":1756719632555,"duration":3308}},{"uid":"183644e180f30369","reportUrl":"https://pagopa.github.io/rtp-platform-qa/513//#testresult/183644e180f30369","status":"failed","statusDetails":"AssertionError: assert 403 == 200\n +  where 403 = <Response [403]>.status_code","time":{"start":1756710578079,"stop":1756710580982,"duration":2903}},{"uid":"e20a719efb15b9bb","reportUrl":"https://pagopa.github.io/rtp-platform-qa/512//#testresult/e20a719efb15b9bb","status":"failed","statusDetails":"AssertionError: assert 403 == 200\n +  where 403 = <Response [403]>.status_code","time":{"start":1756624050864,"stop":1756624052819,"duration":1955}},{"uid":"74bed756933cf3f5","reportUrl":"https://pagopa.github.io/rtp-platform-qa/511//#testresult/74bed756933cf3f5","status":"failed","statusDetails":"AssertionError: assert 403 == 200\n +  where 403 = <Response [403]>.status_code","time":{"start":1756537642256,"stop":1756537644204,"duration":1948}},{"uid":"c4ddc963f5418f4d","reportUrl":"https://pagopa.github.io/rtp-platform-qa/510//#testresult/c4ddc963f5418f4d","status":"failed","statusDetails":"AssertionError: assert 403 == 200\n +  where 403 = <Response [403]>.status_code","time":{"start":1756451298556,"stop":1756451300776,"duration":2220}},{"uid":"e490317e2a48273","reportUrl":"https://pagopa.github.io/rtp-platform-qa/509//#testresult/e490317e2a48273","status":"failed","statusDetails":"AssertionError: assert 403 == 200\n +  where 403 = <Response [403]>.status_code","time":{"start":1756385958467,"stop":1756385961708,"duration":3241}},{"uid":"fde2c2b343570c34","reportUrl":"https://pagopa.github.io/rtp-platform-qa/508//#testresult/fde2c2b343570c34","status":"failed","statusDetails":"AssertionError: assert 403 == 200\n +  where 403 = <Response [403]>.status_code","time":{"start":1756364926491,"stop":1756364929738,"duration":3247}},{"uid":"1a094a1db9f28a96","reportUrl":"https://pagopa.github.io/rtp-platform-qa/507//#testresult/1a094a1db9f28a96","status":"failed","statusDetails":"AssertionError: assert 403 == 200\n +  where 403 = <Response [403]>.status_code","time":{"start":1756278512714,"stop":1756278516240,"duration":3526}},{"uid":"bb91a87349d759db","reportUrl":"https://pagopa.github.io/rtp-platform-qa/506//#testresult/bb91a87349d759db","status":"failed","statusDetails":"AssertionError: assert 403 == 200\n +  where 403 = <Response [403]>.status_code","time":{"start":1756192107795,"stop":1756192109937,"duration":2142}},{"uid":"def5d8e3897cce18","reportUrl":"https://pagopa.github.io/rtp-platform-qa/505//#testresult/def5d8e3897cce18","status":"failed","statusDetails":"AssertionError: assert 403 == 200\n +  where 403 = <Response [403]>.status_code","time":{"start":1756105755499,"stop":1756105757460,"duration":1961}}]},"tags":["get","happy_path"]},"source":"6236d11c1b13c404.json","parameterValues":[]}