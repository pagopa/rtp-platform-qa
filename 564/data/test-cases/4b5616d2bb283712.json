{"uid":"4b5616d2bb283712","name":"Send two GPD messages with timestamps T1 and T1-T2","fullName":"tests.test_producer_gpd_message#test_send_producer_gpd_messages_with_timestamps","historyId":"0ded6b2d942d277aea90826219f9cec9","time":{"start":1760167596444,"stop":1760167607187,"duration":10743},"status":"failed","statusMessage":"Failed: Failed to send first message after 3 attempts","statusTrace":"@allure.feature('GPD Message')\n    @allure.story('Send GPD message to queue')\n    @allure.title('Send two GPD messages with timestamps T1 and T1-T2')\n    @pytest.mark.producer_gpd_message\n    @pytest.mark.happy_path\n    def test_send_producer_gpd_messages_with_timestamps():\n        debtor_fc = activate_new_debtor()\n    \n        common_iuv = generate_iuv()\n        common_nav = f\"3{common_iuv}\"\n    \n        t1 = int(datetime.now(timezone.utc).timestamp() * 1000)\n    \n        payload_t1 = generate_producer_gpd_message_payload(\n            operation='CREATE',\n            ec_tax_code='80015010723',\n            amount=30000,\n            status='VALID',\n            overrides={\n                'timestamp': t1,\n                'iuv': common_iuv,\n                'nav': common_nav,\n                'debtor_tax_code': debtor_fc\n            }\n        )\n    \n>       response_t1 = send_message_with_retry(payload_t1, 'first')\n\nfunctional-tests/tests/test_producer_gpd_message.py:50: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\npayload = {'amount': 30000, 'debtor_tax_code': 'TRNNNT35C06X000S', 'description': 'UZskEEpOCKIYq5DUBrkWwPO6YVDZpcS9GCrDs01ur6cHnDXmAMSUyMFae2QrjHvYNb', 'due_date': 1762759597157, ...}\nmessage_label = 'first', max_retries = 3, retry_delay = 5\n\n    def send_message_with_retry(payload, message_label='', max_retries=3, retry_delay=5):\n        \"\"\"Helper function to send a GPD message with retry mechanism.\n    \n        Args:\n            payload (dict): The message payload to send\n            message_label (str): A label for the message for logging purposes\n            max_retries (int): Maximum number of retry attempts\n            retry_delay (int): Seconds to wait between retry attempts\n    \n        Returns:\n            requests.Response: The API response if successful\n    \n        Raises:\n            AssertionError: If all retries fail\n        \"\"\"\n        for attempt in range(max_retries):\n            try:\n                print(f\"Sending {message_label} message (attempt {attempt+1}/{max_retries})...\")\n                response = send_producer_gpd_message(payload)\n    \n                if response.status_code == 200:\n                    print(f\"{message_label} message sent successfully\")\n                    return response\n                elif 'RequestTimedOutError' in response.text:\n                    print(f\"Timeout detected: {response.text}\")\n                    if attempt < max_retries - 1:\n                        print(f\"Waiting {retry_delay} seconds before retrying...\")\n                        time.sleep(retry_delay)\n                    continue\n                else:\n                    assert response.status_code == 200, f\"Failed to send {message_label} message: {response.text}\"\n            except Exception as e:\n                if attempt < max_retries - 1:\n                    print(f\"Error sending: {str(e)}. Retrying in {retry_delay} seconds...\")\n                    time.sleep(retry_delay)\n    \n>       pytest.fail(f\"Failed to send {message_label} message after {max_retries} attempts\")\nE       Failed: Failed to send first message after 3 attempts\n\nutils/producer_gpd_utils.py:50: Failed","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"_session_faker","time":{"start":1760167073533,"stop":1760167073592,"duration":59},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"status":"failed","statusMessage":"Failed: Failed to send first message after 3 attempts","statusTrace":"@allure.feature('GPD Message')\n    @allure.story('Send GPD message to queue')\n    @allure.title('Send two GPD messages with timestamps T1 and T1-T2')\n    @pytest.mark.producer_gpd_message\n    @pytest.mark.happy_path\n    def test_send_producer_gpd_messages_with_timestamps():\n        debtor_fc = activate_new_debtor()\n    \n        common_iuv = generate_iuv()\n        common_nav = f\"3{common_iuv}\"\n    \n        t1 = int(datetime.now(timezone.utc).timestamp() * 1000)\n    \n        payload_t1 = generate_producer_gpd_message_payload(\n            operation='CREATE',\n            ec_tax_code='80015010723',\n            amount=30000,\n            status='VALID',\n            overrides={\n                'timestamp': t1,\n                'iuv': common_iuv,\n                'nav': common_nav,\n                'debtor_tax_code': debtor_fc\n            }\n        )\n    \n>       response_t1 = send_message_with_retry(payload_t1, 'first')\n\nfunctional-tests/tests/test_producer_gpd_message.py:50: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\npayload = {'amount': 30000, 'debtor_tax_code': 'TRNNNT35C06X000S', 'description': 'UZskEEpOCKIYq5DUBrkWwPO6YVDZpcS9GCrDs01ur6cHnDXmAMSUyMFae2QrjHvYNb', 'due_date': 1762759597157, ...}\nmessage_label = 'first', max_retries = 3, retry_delay = 5\n\n    def send_message_with_retry(payload, message_label='', max_retries=3, retry_delay=5):\n        \"\"\"Helper function to send a GPD message with retry mechanism.\n    \n        Args:\n            payload (dict): The message payload to send\n            message_label (str): A label for the message for logging purposes\n            max_retries (int): Maximum number of retry attempts\n            retry_delay (int): Seconds to wait between retry attempts\n    \n        Returns:\n            requests.Response: The API response if successful\n    \n        Raises:\n            AssertionError: If all retries fail\n        \"\"\"\n        for attempt in range(max_retries):\n            try:\n                print(f\"Sending {message_label} message (attempt {attempt+1}/{max_retries})...\")\n                response = send_producer_gpd_message(payload)\n    \n                if response.status_code == 200:\n                    print(f\"{message_label} message sent successfully\")\n                    return response\n                elif 'RequestTimedOutError' in response.text:\n                    print(f\"Timeout detected: {response.text}\")\n                    if attempt < max_retries - 1:\n                        print(f\"Waiting {retry_delay} seconds before retrying...\")\n                        time.sleep(retry_delay)\n                    continue\n                else:\n                    assert response.status_code == 200, f\"Failed to send {message_label} message: {response.text}\"\n            except Exception as e:\n                if attempt < max_retries - 1:\n                    print(f\"Error sending: {str(e)}. Retrying in {retry_delay} seconds...\")\n                    time.sleep(retry_delay)\n    \n>       pytest.fail(f\"Failed to send {message_label} message after {max_retries} attempts\")\nE       Failed: Failed to send first message after 3 attempts\n\nutils/producer_gpd_utils.py:50: Failed","steps":[],"attachments":[{"uid":"1eebf3d3d65d9ba4","name":"stdout","source":"1eebf3d3d65d9ba4.txt","type":"text/plain","size":920}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},"afterStages":[],"labels":[{"name":"story","value":"Send GPD message to queue"},{"name":"feature","value":"GPD Message"},{"name":"tag","value":"happy_path"},{"name":"tag","value":"producer_gpd_message"},{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_producer_gpd_message"},{"name":"host","value":"runnervmwhb2z"},{"name":"thread","value":"2644-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_producer_gpd_message"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":11,"broken":4,"skipped":0,"passed":0,"unknown":0,"total":15},"items":[{"uid":"5edc2a53a5a834a7","reportUrl":"https://pagopa.github.io/rtp-platform-qa/563//#testresult/5edc2a53a5a834a7","status":"failed","statusDetails":"Failed: Failed to send first message after 3 attempts","time":{"start":1760081310276,"stop":1760081321205,"duration":10929}},{"uid":"371f14cc15ed4deb","reportUrl":"https://pagopa.github.io/rtp-platform-qa/562//#testresult/371f14cc15ed4deb","status":"failed","statusDetails":"Failed: Failed to send first message after 3 attempts","time":{"start":1759994941081,"stop":1759994952042,"duration":10961}},{"uid":"ba747968cbcf052e","reportUrl":"https://pagopa.github.io/rtp-platform-qa/561//#testresult/ba747968cbcf052e","status":"failed","statusDetails":"Failed: Failed to send first message after 3 attempts","time":{"start":1759929472276,"stop":1759929483282,"duration":11006}},{"uid":"2361b713a6d1d169","reportUrl":"https://pagopa.github.io/rtp-platform-qa/560//#testresult/2361b713a6d1d169","status":"failed","statusDetails":"Failed: Failed to send first message after 3 attempts","time":{"start":1759921267431,"stop":1759921278179,"duration":10748}},{"uid":"58dde60aaccd2072","reportUrl":"https://pagopa.github.io/rtp-platform-qa/559//#testresult/58dde60aaccd2072","status":"failed","statusDetails":"Failed: Failed to send first message after 3 attempts","time":{"start":1759920033857,"stop":1759920044656,"duration":10799}},{"uid":"6f6ab68cf9d93f4a","reportUrl":"https://pagopa.github.io/rtp-platform-qa/558//#testresult/6f6ab68cf9d93f4a","status":"broken","statusDetails":"requests.exceptions.HTTPError: 502 Server Error: Bad Gateway for url: https://api-mcshared.uat.cstar.pagopa.it/auth/token","time":{"start":1759908349463,"stop":1759908349982,"duration":519}},{"uid":"e92e92461f82f42d","reportUrl":"https://pagopa.github.io/rtp-platform-qa/557//#testresult/e92e92461f82f42d","status":"failed","statusDetails":"Failed: Failed to send first message after 3 attempts","time":{"start":1759822126823,"stop":1759822137680,"duration":10857}},{"uid":"fea66af0c5cd7453","reportUrl":"https://pagopa.github.io/rtp-platform-qa/556//#testresult/fea66af0c5cd7453","status":"failed","statusDetails":"Failed: Failed to send first message after 3 attempts","time":{"start":1759735710653,"stop":1759735721887,"duration":11234}},{"uid":"400edde32871fdb2","reportUrl":"https://pagopa.github.io/rtp-platform-qa/555//#testresult/400edde32871fdb2","status":"failed","statusDetails":"Failed: Failed to send first message after 3 attempts","time":{"start":1759650005769,"stop":1759650016559,"duration":10790}},{"uid":"54316b27a944f5b3","reportUrl":"https://pagopa.github.io/rtp-platform-qa/554//#testresult/54316b27a944f5b3","status":"failed","statusDetails":"Failed: Failed to send first message after 3 attempts","time":{"start":1759563668610,"stop":1759563679896,"duration":11286}},{"uid":"946ed9b177f449dd","reportUrl":"https://pagopa.github.io/rtp-platform-qa/553//#testresult/946ed9b177f449dd","status":"failed","statusDetails":"Failed: Failed to send first message after 3 attempts","time":{"start":1759484832974,"stop":1759484844253,"duration":11279}},{"uid":"151d19b96e4e2590","reportUrl":"https://pagopa.github.io/rtp-platform-qa/552//#testresult/151d19b96e4e2590","status":"broken","statusDetails":"requests.exceptions.ConnectionError: HTTPConnectionPool(host='qa.internal.uat.cstar.pagopa.it', port=80): Max retries exceeded with url: /send/gpd/message (Caused by NameResolutionError(\"<urllib3.connection.HTTPConnection object at 0x7f818d353b10>: Failed to resolve 'qa.internal.uat.cstar.pagopa.it' ([Errno -2] Name or service not known)\"))","time":{"start":1759476825310,"stop":1759476835371,"duration":10061}},{"uid":"469c765d8121bb0f","reportUrl":"https://pagopa.github.io/rtp-platform-qa/551//#testresult/469c765d8121bb0f","status":"broken","statusDetails":"requests.exceptions.ConnectionError: HTTPConnectionPool(host='qa.internal.uat.cstar.pagopa.it', port=80): Max retries exceeded with url: /send/gpd/message (Caused by NameResolutionError(\"<urllib3.connection.HTTPConnection object at 0x7f93b9230550>: Failed to resolve 'qa.internal.uat.cstar.pagopa.it' ([Errno -2] Name or service not known)\"))","time":{"start":1759390813342,"stop":1759390823382,"duration":10040}},{"uid":"bc8ef5bf2af29927","reportUrl":"https://pagopa.github.io/rtp-platform-qa/550//#testresult/bc8ef5bf2af29927","status":"broken","statusDetails":"requests.exceptions.ConnectionError: HTTPConnectionPool(host='qa.internal.uat.cstar.pagopa.it', port=80): Max retries exceeded with url: /send/gpd/message (Caused by NameResolutionError(\"<urllib3.connection.HTTPConnection object at 0x7f279ccbae90>: Failed to resolve 'qa.internal.uat.cstar.pagopa.it' ([Errno -2] Name or service not known)\"))","time":{"start":1759316214017,"stop":1759316224045,"duration":10028}}]},"tags":["producer_gpd_message","happy_path"]},"source":"4b5616d2bb283712.json","parameterValues":[]}