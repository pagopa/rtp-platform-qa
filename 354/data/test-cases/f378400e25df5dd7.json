{"uid":"f378400e25df5dd7","name":"An RTP callback is successfully received","fullName":"tests.test_callback#test_receive_rtp_callback_DS_08P_compliant","historyId":"e98ff8a1e43c45b6eec2e1ce025e4cfc","time":{"start":1748848069954,"stop":1748848070454,"duration":500},"status":"failed","statusMessage":"AssertionError: Error from callback, expected 200 got 400\nassert 400 == 200\n +  where 400 = <Response [400]>.status_code","statusTrace":"@allure.feature('RTP Callback')\n    @allure.story('Service provider sends a callback referred to an RTP')\n    @allure.title('An RTP callback is successfully received')\n    @pytest.mark.callback\n    @pytest.mark.happy_path\n    def test_receive_rtp_callback_DS_08P_compliant():\n        callback_data = generate_callback_data_DS_08P_compliant()\n    \n        cert, key = pfx_to_pem(secrets.debtor_service_provider_mock_PFX_base64,\n                               secrets.debtor_service_provider_mock_PFX_password_base64,\n                               config.cert_path,\n                               config.key_path)\n    \n        callback_response = srtp_callback(rtp_payload=callback_data,\n                                          cert_path=cert,\n                                          key_path=key)\n>       assert callback_response.status_code == 200, f'Error from callback, expected 200 got {callback_response.status_code}'\nE       AssertionError: Error from callback, expected 200 got 400\nE       assert 400 == 200\nE        +  where 400 = <Response [400]>.status_code\n\nfunctional-tests/tests/test_callback.py:47: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"_session_faker","time":{"start":1748848055587,"stop":1748848055646,"duration":59},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"afterStages":[],"labels":[{"name":"story","value":"Service provider sends a callback referred to an RTP"},{"name":"feature","value":"RTP Callback"},{"name":"tag","value":"happy_path"},{"name":"tag","value":"callback"},{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_callback"},{"name":"host","value":"pkrvmf6wy0o8zjz"},{"name":"thread","value":"2475-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_callback"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":6,"broken":0,"skipped":0,"passed":48,"unknown":0,"total":54},"items":[{"uid":"cb441082cd49f1a1","reportUrl":"https://pagopa.github.io/rtp-platform-qa/353//#testresult/cb441082cd49f1a1","status":"failed","statusDetails":"AssertionError: Error from callback, expected 200 got 400\nassert 400 == 200\n +  where 400 = <Response [400]>.status_code","time":{"start":1748761623861,"stop":1748761624512,"duration":651}},{"uid":"283e43ff0ca87c72","reportUrl":"https://pagopa.github.io/rtp-platform-qa/352//#testresult/283e43ff0ca87c72","status":"failed","statusDetails":"AssertionError: Error from callback, expected 200 got 400\nassert 400 == 200\n +  where 400 = <Response [400]>.status_code","time":{"start":1748675215909,"stop":1748675216366,"duration":457}},{"uid":"a40cdb2ae2b079e8","reportUrl":"https://pagopa.github.io/rtp-platform-qa/351//#testresult/a40cdb2ae2b079e8","status":"failed","statusDetails":"AssertionError: Error from callback, expected 200 got 400\nassert 400 == 200\n +  where 400 = <Response [400]>.status_code","time":{"start":1748588828314,"stop":1748588828977,"duration":663}},{"uid":"16abbfe9aef27684","reportUrl":"https://pagopa.github.io/rtp-platform-qa/350//#testresult/16abbfe9aef27684","status":"failed","statusDetails":"AssertionError: Error from callback, expected 200 got 400\nassert 400 == 200\n +  where 400 = <Response [400]>.status_code","time":{"start":1748534028633,"stop":1748534029080,"duration":447}},{"uid":"10ccd6f35b64f5db","reportUrl":"https://pagopa.github.io/rtp-platform-qa/349//#testresult/10ccd6f35b64f5db","status":"passed","time":{"start":1748502452910,"stop":1748502453556,"duration":646}},{"uid":"8163eec5b6aaddc5","reportUrl":"https://pagopa.github.io/rtp-platform-qa/348//#testresult/8163eec5b6aaddc5","status":"passed","time":{"start":1748449648194,"stop":1748449648787,"duration":593}},{"uid":"2ba33fcbffde2617","reportUrl":"https://pagopa.github.io/rtp-platform-qa/347//#testresult/2ba33fcbffde2617","status":"passed","time":{"start":1748442442538,"stop":1748442442958,"duration":420}},{"uid":"eadb6ef32985d267","reportUrl":"https://pagopa.github.io/rtp-platform-qa/343//#testresult/eadb6ef32985d267","status":"passed","time":{"start":1748416027330,"stop":1748416027720,"duration":390}},{"uid":"fe00b2deecec62a","reportUrl":"https://pagopa.github.io/rtp-platform-qa/342//#testresult/fe00b2deecec62a","status":"passed","time":{"start":1748329640730,"stop":1748329641390,"duration":660}},{"uid":"ab384c7c4de9533e","reportUrl":"https://pagopa.github.io/rtp-platform-qa/341//#testresult/ab384c7c4de9533e","status":"passed","time":{"start":1748264263695,"stop":1748264264091,"duration":396}},{"uid":"39e6bf599c7cfcc","reportUrl":"https://pagopa.github.io/rtp-platform-qa/340//#testresult/39e6bf599c7cfcc","status":"passed","time":{"start":1748243386875,"stop":1748243387333,"duration":458}},{"uid":"eb5f7479a497150c","reportUrl":"https://pagopa.github.io/rtp-platform-qa/339//#testresult/eb5f7479a497150c","status":"passed","time":{"start":1748156833394,"stop":1748156833913,"duration":519}},{"uid":"9f306360e9c77313","reportUrl":"https://pagopa.github.io/rtp-platform-qa/338//#testresult/9f306360e9c77313","status":"passed","time":{"start":1748070406443,"stop":1748070407028,"duration":585}},{"uid":"a69fee1e3474742d","reportUrl":"https://pagopa.github.io/rtp-platform-qa/337//#testresult/a69fee1e3474742d","status":"passed","time":{"start":1747984035814,"stop":1747984036198,"duration":384}},{"uid":"aea40e3810943ec0","reportUrl":"https://pagopa.github.io/rtp-platform-qa/336//#testresult/aea40e3810943ec0","status":"passed","time":{"start":1747897633282,"stop":1747897633799,"duration":517}},{"uid":"3a0df3ad83350063","reportUrl":"https://pagopa.github.io/rtp-platform-qa/335//#testresult/3a0df3ad83350063","status":"passed","time":{"start":1747840417497,"stop":1747840417886,"duration":389}},{"uid":"8e7a922eef12b26f","reportUrl":"https://pagopa.github.io/rtp-platform-qa/334//#testresult/8e7a922eef12b26f","status":"passed","time":{"start":1747811223473,"stop":1747811223871,"duration":398}},{"uid":"bd26f877334b318","reportUrl":"https://pagopa.github.io/rtp-platform-qa/333//#testresult/bd26f877334b318","status":"passed","time":{"start":1747724835167,"stop":1747724835578,"duration":411}},{"uid":"5a4cc0ba08ae1163","reportUrl":"https://pagopa.github.io/rtp-platform-qa/332//#testresult/5a4cc0ba08ae1163","status":"passed","time":{"start":1747661445196,"stop":1747661445644,"duration":448}},{"uid":"5b936e6eda2c7321","reportUrl":"https://pagopa.github.io/rtp-platform-qa/331//#testresult/5b936e6eda2c7321","status":"passed","time":{"start":1747638466180,"stop":1747638466683,"duration":503}}]},"tags":["callback","happy_path"]},"source":"f378400e25df5dd7.json","parameterValues":[]}