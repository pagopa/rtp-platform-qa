{"uid":"e6b3feb6af1db748","name":"malformed rtp_id → 400 Bad Request","fullName":"tests.test_get_rtp#test_get_rtp_invalid_id_format","historyId":"c21612d12b7544d1e793acec3594d7a6","time":{"start":1759908346225,"stop":1759908346721,"duration":496},"status":"broken","statusMessage":"requests.exceptions.HTTPError: 502 Server Error: Bad Gateway for url: https://api-mcshared.uat.cstar.pagopa.it/auth/token","statusTrace":"@allure.feature('RTP Get')\n    @allure.story('Service provider retrieves an RTP')\n    @allure.title('malformed rtp_id → 400 Bad Request')\n    @pytest.mark.get\n    @pytest.mark.unhappy_path\n    def test_get_rtp_invalid_id_format():\n        bad_id = '123-not-a-uuid'\n>       token = get_valid_access_token(\n            client_id=secrets.creditor_service_provider.client_id,\n            client_secret=secrets.creditor_service_provider.client_secret,\n            access_token_function=get_access_token,\n        )\n\nfunctional-tests/tests/test_get_rtp.py:107: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \napi/auth.py:8: in get_valid_access_token\n    token_response.raise_for_status()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <Response [502]>\n\n    def raise_for_status(self):\n        \"\"\"Raises :class:`HTTPError`, if one occurred.\"\"\"\n    \n        http_error_msg = \"\"\n        if isinstance(self.reason, bytes):\n            # We attempt to decode utf-8 first because some servers\n            # choose to localize their reason strings. If the string\n            # isn't utf-8, we fall back to iso-8859-1 for all other\n            # encodings. (See PR #3538)\n            try:\n                reason = self.reason.decode(\"utf-8\")\n            except UnicodeDecodeError:\n                reason = self.reason.decode(\"iso-8859-1\")\n        else:\n            reason = self.reason\n    \n        if 400 <= self.status_code < 500:\n            http_error_msg = (\n                f\"{self.status_code} Client Error: {reason} for url: {self.url}\"\n            )\n    \n        elif 500 <= self.status_code < 600:\n            http_error_msg = (\n                f\"{self.status_code} Server Error: {reason} for url: {self.url}\"\n            )\n    \n        if http_error_msg:\n>           raise HTTPError(http_error_msg, response=self)\nE           requests.exceptions.HTTPError: 502 Server Error: Bad Gateway for url: https://api-mcshared.uat.cstar.pagopa.it/auth/token\n\n/opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/requests/models.py:1026: HTTPError","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"_session_faker","time":{"start":1759908023720,"stop":1759908023771,"duration":51},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"afterStages":[],"labels":[{"name":"feature","value":"RTP Get"},{"name":"story","value":"Service provider retrieves an RTP"},{"name":"tag","value":"unhappy_path"},{"name":"tag","value":"get"},{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_get_rtp"},{"name":"host","value":"runnervmwhb2z"},{"name":"thread","value":"2588-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_get_rtp"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":20,"skipped":0,"passed":144,"unknown":0,"total":164},"items":[{"uid":"f506161c4ff51f96","reportUrl":"https://pagopa.github.io/rtp-platform-qa/557//#testresult/f506161c4ff51f96","status":"passed","time":{"start":1759822123047,"stop":1759822123769,"duration":722}},{"uid":"cec50daeebfa1aa6","reportUrl":"https://pagopa.github.io/rtp-platform-qa/556//#testresult/cec50daeebfa1aa6","status":"passed","time":{"start":1759735705083,"stop":1759735706286,"duration":1203}},{"uid":"40acd1b9c8778f70","reportUrl":"https://pagopa.github.io/rtp-platform-qa/555//#testresult/40acd1b9c8778f70","status":"passed","time":{"start":1759649965469,"stop":1759649966194,"duration":725}},{"uid":"396f07b214d42070","reportUrl":"https://pagopa.github.io/rtp-platform-qa/554//#testresult/396f07b214d42070","status":"passed","time":{"start":1759563620403,"stop":1759563621661,"duration":1258}},{"uid":"bad60e6594101208","reportUrl":"https://pagopa.github.io/rtp-platform-qa/553//#testresult/bad60e6594101208","status":"passed","time":{"start":1759484826865,"stop":1759484828084,"duration":1219}},{"uid":"9e05113864c8d8ec","reportUrl":"https://pagopa.github.io/rtp-platform-qa/552//#testresult/9e05113864c8d8ec","status":"broken","statusDetails":"requests.exceptions.HTTPError: 502 Server Error: Bad Gateway for url: https://api-mcshared.uat.cstar.pagopa.it/auth/token","time":{"start":1759476821556,"stop":1759476822167,"duration":611}},{"uid":"ae5bad62714a0c26","reportUrl":"https://pagopa.github.io/rtp-platform-qa/551//#testresult/ae5bad62714a0c26","status":"passed","time":{"start":1759390809036,"stop":1759390809830,"duration":794}},{"uid":"ab8bc3d72761094b","reportUrl":"https://pagopa.github.io/rtp-platform-qa/550//#testresult/ab8bc3d72761094b","status":"passed","time":{"start":1759316209466,"stop":1759316210292,"duration":826}},{"uid":"976f05de80cc616","reportUrl":"https://pagopa.github.io/rtp-platform-qa/549//#testresult/976f05de80cc616","status":"passed","time":{"start":1759303780136,"stop":1759303780891,"duration":755}},{"uid":"752895d06884ecd9","reportUrl":"https://pagopa.github.io/rtp-platform-qa/548//#testresult/752895d06884ecd9","status":"passed","time":{"start":1759217364904,"stop":1759217365807,"duration":903}},{"uid":"a8d21b22990f099e","reportUrl":"https://pagopa.github.io/rtp-platform-qa/547//#testresult/a8d21b22990f099e","status":"passed","time":{"start":1759130909252,"stop":1759130910002,"duration":750}},{"uid":"f45849d9f22d7b6e","reportUrl":"https://pagopa.github.io/rtp-platform-qa/546//#testresult/f45849d9f22d7b6e","status":"passed","time":{"start":1759044358920,"stop":1759044360127,"duration":1207}},{"uid":"a84fdf0de1e465eb","reportUrl":"https://pagopa.github.io/rtp-platform-qa/545//#testresult/a84fdf0de1e465eb","status":"passed","time":{"start":1758957726302,"stop":1758957727132,"duration":830}},{"uid":"99ce34ac87bd749b","reportUrl":"https://pagopa.github.io/rtp-platform-qa/544//#testresult/99ce34ac87bd749b","status":"passed","time":{"start":1758872009374,"stop":1758872010626,"duration":1252}},{"uid":"5e6f9f098e7df46","reportUrl":"https://pagopa.github.io/rtp-platform-qa/543//#testresult/5e6f9f098e7df46","status":"passed","time":{"start":1758786153638,"stop":1758786154396,"duration":758}},{"uid":"df6aeab7d135465f","reportUrl":"https://pagopa.github.io/rtp-platform-qa/542//#testresult/df6aeab7d135465f","status":"passed","time":{"start":1758699758662,"stop":1758699759771,"duration":1109}},{"uid":"bbefe19c5914716e","reportUrl":"https://pagopa.github.io/rtp-platform-qa/541//#testresult/bbefe19c5914716e","status":"passed","time":{"start":1758612581902,"stop":1758612583042,"duration":1140}},{"uid":"fe8ec343dff6b66d","reportUrl":"https://pagopa.github.io/rtp-platform-qa/540//#testresult/fe8ec343dff6b66d","status":"passed","time":{"start":1758526246935,"stop":1758526248175,"duration":1240}},{"uid":"505543c4a754c6a2","reportUrl":"https://pagopa.github.io/rtp-platform-qa/539//#testresult/505543c4a754c6a2","status":"passed","time":{"start":1758439589245,"stop":1758439590382,"duration":1137}},{"uid":"254f8d0b2b9dfc09","reportUrl":"https://pagopa.github.io/rtp-platform-qa/538//#testresult/254f8d0b2b9dfc09","status":"passed","time":{"start":1758353248199,"stop":1758353249408,"duration":1209}}]},"tags":["get","unhappy_path"]},"source":"e6b3feb6af1db748.json","parameterValues":[]}