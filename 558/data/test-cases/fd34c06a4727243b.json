{"uid":"fd34c06a4727243b","name":"An RTP is sent through API","fullName":"tests.test_send_rtp#test_cannot_send_rtp_not_activated_user","historyId":"6160dd4465c6621e0038ef4589227e7c","time":{"start":1759908354119,"stop":1759908354616,"duration":497},"status":"broken","statusMessage":"requests.exceptions.HTTPError: 502 Server Error: Bad Gateway for url: https://api-mcshared.uat.cstar.pagopa.it/auth/token","statusTrace":"@allure.feature('RTP Send')\n    @allure.story('Service provider sends an RTP to a non-activated debtor')\n    @allure.title('An RTP is sent through API')\n    @pytest.mark.send\n    @pytest.mark.unhappy_path\n    def test_cannot_send_rtp_not_activated_user():\n        rtp_data = generate_rtp_data()\n    \n>       creditor_service_provider_access_token = get_valid_access_token(\n            client_id=secrets.creditor_service_provider.client_id,\n            client_secret=secrets.creditor_service_provider.client_secret,\n            access_token_function=get_access_token,\n        )\n\nfunctional-tests/tests/test_send_rtp.py:232: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \napi/auth.py:8: in get_valid_access_token\n    token_response.raise_for_status()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <Response [502]>\n\n    def raise_for_status(self):\n        \"\"\"Raises :class:`HTTPError`, if one occurred.\"\"\"\n    \n        http_error_msg = \"\"\n        if isinstance(self.reason, bytes):\n            # We attempt to decode utf-8 first because some servers\n            # choose to localize their reason strings. If the string\n            # isn't utf-8, we fall back to iso-8859-1 for all other\n            # encodings. (See PR #3538)\n            try:\n                reason = self.reason.decode(\"utf-8\")\n            except UnicodeDecodeError:\n                reason = self.reason.decode(\"iso-8859-1\")\n        else:\n            reason = self.reason\n    \n        if 400 <= self.status_code < 500:\n            http_error_msg = (\n                f\"{self.status_code} Client Error: {reason} for url: {self.url}\"\n            )\n    \n        elif 500 <= self.status_code < 600:\n            http_error_msg = (\n                f\"{self.status_code} Server Error: {reason} for url: {self.url}\"\n            )\n    \n        if http_error_msg:\n>           raise HTTPError(http_error_msg, response=self)\nE           requests.exceptions.HTTPError: 502 Server Error: Bad Gateway for url: https://api-mcshared.uat.cstar.pagopa.it/auth/token\n\n/opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/requests/models.py:1026: HTTPError","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"_session_faker","time":{"start":1759908023720,"stop":1759908023771,"duration":51},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"afterStages":[],"labels":[{"name":"story","value":"Service provider sends an RTP to a non-activated debtor"},{"name":"feature","value":"RTP Send"},{"name":"tag","value":"unhappy_path"},{"name":"tag","value":"send"},{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_send_rtp"},{"name":"host","value":"runnervmwhb2z"},{"name":"thread","value":"2588-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_send_rtp"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":56,"broken":20,"skipped":0,"passed":191,"unknown":0,"total":267},"items":[{"uid":"46d1dabb38b09750","reportUrl":"https://pagopa.github.io/rtp-platform-qa/557//#testresult/46d1dabb38b09750","status":"failed","statusDetails":"AssertionError: assert 404 == 422\n +  where 404 = <Response [404]>.status_code","time":{"start":1759822171060,"stop":1759822171823,"duration":763}},{"uid":"7a3f0e3a49108fa8","reportUrl":"https://pagopa.github.io/rtp-platform-qa/556//#testresult/7a3f0e3a49108fa8","status":"failed","statusDetails":"AssertionError: assert 404 == 422\n +  where 404 = <Response [404]>.status_code","time":{"start":1759735763725,"stop":1759735764998,"duration":1273}},{"uid":"d78531a74e32adea","reportUrl":"https://pagopa.github.io/rtp-platform-qa/555//#testresult/d78531a74e32adea","status":"failed","statusDetails":"AssertionError: assert 404 == 422\n +  where 404 = <Response [404]>.status_code","time":{"start":1759650050885,"stop":1759650051677,"duration":792}},{"uid":"3e3e379b672a1cab","reportUrl":"https://pagopa.github.io/rtp-platform-qa/554//#testresult/3e3e379b672a1cab","status":"failed","statusDetails":"AssertionError: assert 404 == 422\n +  where 404 = <Response [404]>.status_code","time":{"start":1759563719839,"stop":1759563721070,"duration":1231}},{"uid":"708a4c2a7ed9384f","reportUrl":"https://pagopa.github.io/rtp-platform-qa/553//#testresult/708a4c2a7ed9384f","status":"failed","statusDetails":"AssertionError: assert 404 == 422\n +  where 404 = <Response [404]>.status_code","time":{"start":1759484886185,"stop":1759484887446,"duration":1261}},{"uid":"ad7be06f0aabdee2","reportUrl":"https://pagopa.github.io/rtp-platform-qa/552//#testresult/ad7be06f0aabdee2","status":"broken","statusDetails":"requests.exceptions.HTTPError: 502 Server Error: Bad Gateway for url: https://api-mcshared.uat.cstar.pagopa.it/auth/token","time":{"start":1759476839226,"stop":1759476839799,"duration":573}},{"uid":"5080ff736787b1ec","reportUrl":"https://pagopa.github.io/rtp-platform-qa/551//#testresult/5080ff736787b1ec","status":"failed","statusDetails":"AssertionError: assert 404 == 422\n +  where 404 = <Response [404]>.status_code","time":{"start":1759390835814,"stop":1759390836627,"duration":813}},{"uid":"3e6a8b87c167142f","reportUrl":"https://pagopa.github.io/rtp-platform-qa/550//#testresult/3e6a8b87c167142f","status":"failed","statusDetails":"AssertionError: assert 404 == 422\n +  where 404 = <Response [404]>.status_code","time":{"start":1759316236195,"stop":1759316237080,"duration":885}},{"uid":"2c433b8a0fd55083","reportUrl":"https://pagopa.github.io/rtp-platform-qa/549//#testresult/2c433b8a0fd55083","status":"failed","statusDetails":"AssertionError: assert 404 == 422\n +  where 404 = <Response [404]>.status_code","time":{"start":1759303796710,"stop":1759303797503,"duration":793}},{"uid":"af8e9b6d147a365","reportUrl":"https://pagopa.github.io/rtp-platform-qa/548//#testresult/af8e9b6d147a365","status":"failed","statusDetails":"AssertionError: assert 404 == 422\n +  where 404 = <Response [404]>.status_code","time":{"start":1759217382630,"stop":1759217383596,"duration":966}},{"uid":"fdf3576b83fd1dbc","reportUrl":"https://pagopa.github.io/rtp-platform-qa/547//#testresult/fdf3576b83fd1dbc","status":"failed","statusDetails":"AssertionError: assert 404 == 422\n +  where 404 = <Response [404]>.status_code","time":{"start":1759130924472,"stop":1759130925331,"duration":859}},{"uid":"991e472de4cb35b9","reportUrl":"https://pagopa.github.io/rtp-platform-qa/546//#testresult/991e472de4cb35b9","status":"failed","statusDetails":"AssertionError: assert 404 == 422\n +  where 404 = <Response [404]>.status_code","time":{"start":1759044379762,"stop":1759044381036,"duration":1274}},{"uid":"b57ed61e3a5abee4","reportUrl":"https://pagopa.github.io/rtp-platform-qa/545//#testresult/b57ed61e3a5abee4","status":"failed","statusDetails":"AssertionError: assert 404 == 422\n +  where 404 = <Response [404]>.status_code","time":{"start":1758957742964,"stop":1758957743772,"duration":808}},{"uid":"e8545014fbe41f4b","reportUrl":"https://pagopa.github.io/rtp-platform-qa/544//#testresult/e8545014fbe41f4b","status":"failed","statusDetails":"AssertionError: assert 404 == 422\n +  where 404 = <Response [404]>.status_code","time":{"start":1758872032219,"stop":1758872033509,"duration":1290}},{"uid":"ce58c0ca8a3989c3","reportUrl":"https://pagopa.github.io/rtp-platform-qa/543//#testresult/ce58c0ca8a3989c3","status":"failed","statusDetails":"AssertionError: assert 404 == 422\n +  where 404 = <Response [404]>.status_code","time":{"start":1758786170149,"stop":1758786170936,"duration":787}},{"uid":"59c5d57f4a8b07f9","reportUrl":"https://pagopa.github.io/rtp-platform-qa/542//#testresult/59c5d57f4a8b07f9","status":"failed","statusDetails":"AssertionError: assert 500 == 422\n +  where 500 = <Response [500]>.status_code","time":{"start":1758699774678,"stop":1758699775801,"duration":1123}},{"uid":"93f39190c0f6cb08","reportUrl":"https://pagopa.github.io/rtp-platform-qa/541//#testresult/93f39190c0f6cb08","status":"failed","statusDetails":"AssertionError: assert 404 == 422\n +  where 404 = <Response [404]>.status_code","time":{"start":1758612605224,"stop":1758612606405,"duration":1181}},{"uid":"4a3efddb9aa66d6e","reportUrl":"https://pagopa.github.io/rtp-platform-qa/540//#testresult/4a3efddb9aa66d6e","status":"failed","statusDetails":"AssertionError: assert 404 == 422\n +  where 404 = <Response [404]>.status_code","time":{"start":1758526269348,"stop":1758526270625,"duration":1277}},{"uid":"c5b338bc06dc853b","reportUrl":"https://pagopa.github.io/rtp-platform-qa/539//#testresult/c5b338bc06dc853b","status":"failed","statusDetails":"AssertionError: assert 404 == 422\n +  where 404 = <Response [404]>.status_code","time":{"start":1758439609959,"stop":1758439611146,"duration":1187}},{"uid":"b1b6a6a7916477c7","reportUrl":"https://pagopa.github.io/rtp-platform-qa/538//#testresult/b1b6a6a7916477c7","status":"failed","statusDetails":"AssertionError: assert 404 == 422\n +  where 404 = <Response [404]>.status_code","time":{"start":1758353270151,"stop":1758353271409,"duration":1258}}]},"tags":["unhappy_path","send"]},"source":"fd34c06a4727243b.json","parameterValues":[]}