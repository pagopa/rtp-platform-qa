{"uid":"b8f8e3b4e6d87aec","name":"An RTP callback with status ACTC is successfully received","fullName":"tests.test_callback#test_receive_rtp_callback_DS_05_ACTC_compliant","historyId":"4b2bd33e1a231657dc457cb580c88b06","time":{"start":1757057090689,"stop":1757057091470,"duration":781},"status":"broken","statusMessage":"requests.exceptions.HTTPError: 502 Server Error: Bad Gateway for url: https://api-mcshared.uat.cstar.pagopa.it/auth/token","statusTrace":"@allure.feature('RTP Callback')\n    @allure.story('Service provider sends a callback referred to an RTP with status ACTC')\n    @allure.title('An RTP callback with status ACTC is successfully received')\n    @pytest.mark.callback\n    @pytest.mark.happy_path\n    def test_receive_rtp_callback_DS_05_ACTC_compliant():\n        rtp_data = generate_rtp_data()\n    \n>       debtor_service_provider_access_token = get_valid_access_token(\n            client_id=secrets.debtor_service_provider.client_id,\n            client_secret=secrets.debtor_service_provider.client_secret,\n            access_token_function=get_access_token,\n        )\n\nfunctional-tests/tests/test_callback.py:149: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \napi/auth.py:8: in get_valid_access_token\n    token_response.raise_for_status()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <Response [502]>\n\n    def raise_for_status(self):\n        \"\"\"Raises :class:`HTTPError`, if one occurred.\"\"\"\n    \n        http_error_msg = \"\"\n        if isinstance(self.reason, bytes):\n            # We attempt to decode utf-8 first because some servers\n            # choose to localize their reason strings. If the string\n            # isn't utf-8, we fall back to iso-8859-1 for all other\n            # encodings. (See PR #3538)\n            try:\n                reason = self.reason.decode(\"utf-8\")\n            except UnicodeDecodeError:\n                reason = self.reason.decode(\"iso-8859-1\")\n        else:\n            reason = self.reason\n    \n        if 400 <= self.status_code < 500:\n            http_error_msg = (\n                f\"{self.status_code} Client Error: {reason} for url: {self.url}\"\n            )\n    \n        elif 500 <= self.status_code < 600:\n            http_error_msg = (\n                f\"{self.status_code} Server Error: {reason} for url: {self.url}\"\n            )\n    \n        if http_error_msg:\n>           raise HTTPError(http_error_msg, response=self)\nE           requests.exceptions.HTTPError: 502 Server Error: Bad Gateway for url: https://api-mcshared.uat.cstar.pagopa.it/auth/token\n\n/opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/requests/models.py:1026: HTTPError","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"_session_faker","time":{"start":1757056838070,"stop":1757056838126,"duration":56},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"afterStages":[],"labels":[{"name":"feature","value":"RTP Callback"},{"name":"story","value":"Service provider sends a callback referred to an RTP with status ACTC"},{"name":"tag","value":"happy_path"},{"name":"tag","value":"callback"},{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_callback"},{"name":"host","value":"pkrvm7jw40e0xgp"},{"name":"thread","value":"2510-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_callback"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":43,"broken":17,"skipped":0,"passed":4,"unknown":0,"total":64},"items":[{"uid":"23ad3d43023d2af0","reportUrl":"https://pagopa.github.io/rtp-platform-qa/519//#testresult/23ad3d43023d2af0","status":"failed","statusDetails":"AssertionError: assert 403 == 200\n +  where 403 = <Response [403]>.status_code","time":{"start":1756969624488,"stop":1756969626924,"duration":2436}},{"uid":"126aa200d26a0087","reportUrl":"https://pagopa.github.io/rtp-platform-qa/518//#testresult/126aa200d26a0087","status":"failed","statusDetails":"AssertionError: assert 403 == 200\n +  where 403 = <Response [403]>.status_code","time":{"start":1756910835626,"stop":1756910839622,"duration":3996}},{"uid":"30aea96bd4c910ee","reportUrl":"https://pagopa.github.io/rtp-platform-qa/517//#testresult/30aea96bd4c910ee","status":"failed","statusDetails":"AssertionError: assert 403 == 200\n +  where 403 = <Response [403]>.status_code","time":{"start":1756883245502,"stop":1756883248281,"duration":2779}},{"uid":"27674a2cb68d8eb9","reportUrl":"https://pagopa.github.io/rtp-platform-qa/516//#testresult/27674a2cb68d8eb9","status":"failed","statusDetails":"AssertionError: assert 403 == 200\n +  where 403 = <Response [403]>.status_code","time":{"start":1756797972743,"stop":1756797975275,"duration":2532}},{"uid":"a26455b980492823","reportUrl":"https://pagopa.github.io/rtp-platform-qa/515//#testresult/a26455b980492823","status":"failed","statusDetails":"AssertionError: assert 403 == 200\n +  where 403 = <Response [403]>.status_code","time":{"start":1756796841260,"stop":1756796843725,"duration":2465}},{"uid":"5b88ebdfdfe7fb14","reportUrl":"https://pagopa.github.io/rtp-platform-qa/514//#testresult/5b88ebdfdfe7fb14","status":"failed","statusDetails":"AssertionError: assert 403 == 200\n +  where 403 = <Response [403]>.status_code","time":{"start":1756719563923,"stop":1756719567859,"duration":3936}},{"uid":"a6caa6df9734a152","reportUrl":"https://pagopa.github.io/rtp-platform-qa/513//#testresult/a6caa6df9734a152","status":"failed","statusDetails":"AssertionError: assert 403 == 200\n +  where 403 = <Response [403]>.status_code","time":{"start":1756710512303,"stop":1756710515894,"duration":3591}},{"uid":"c33f138670fb0eb0","reportUrl":"https://pagopa.github.io/rtp-platform-qa/512//#testresult/c33f138670fb0eb0","status":"failed","statusDetails":"AssertionError: assert 403 == 200\n +  where 403 = <Response [403]>.status_code","time":{"start":1756623994209,"stop":1756623996611,"duration":2402}},{"uid":"154e803e321e2ba8","reportUrl":"https://pagopa.github.io/rtp-platform-qa/511//#testresult/154e803e321e2ba8","status":"failed","statusDetails":"AssertionError: assert 403 == 200\n +  where 403 = <Response [403]>.status_code","time":{"start":1756537591638,"stop":1756537594294,"duration":2656}},{"uid":"7e1eac539874eea7","reportUrl":"https://pagopa.github.io/rtp-platform-qa/510//#testresult/7e1eac539874eea7","status":"failed","statusDetails":"AssertionError: assert 403 == 200\n +  where 403 = <Response [403]>.status_code","time":{"start":1756451234180,"stop":1756451236950,"duration":2770}},{"uid":"e56f5b23b62ceffb","reportUrl":"https://pagopa.github.io/rtp-platform-qa/509//#testresult/e56f5b23b62ceffb","status":"failed","statusDetails":"AssertionError: assert 403 == 200\n +  where 403 = <Response [403]>.status_code","time":{"start":1756385885375,"stop":1756385889398,"duration":4023}},{"uid":"763215283552deec","reportUrl":"https://pagopa.github.io/rtp-platform-qa/508//#testresult/763215283552deec","status":"failed","statusDetails":"AssertionError: assert 403 == 200\n +  where 403 = <Response [403]>.status_code","time":{"start":1756364853705,"stop":1756364857644,"duration":3939}},{"uid":"208653b5c2c95aa5","reportUrl":"https://pagopa.github.io/rtp-platform-qa/507//#testresult/208653b5c2c95aa5","status":"failed","statusDetails":"AssertionError: assert 403 == 200\n +  where 403 = <Response [403]>.status_code","time":{"start":1756278442419,"stop":1756278446570,"duration":4151}},{"uid":"e672c2600ef12118","reportUrl":"https://pagopa.github.io/rtp-platform-qa/506//#testresult/e672c2600ef12118","status":"failed","statusDetails":"AssertionError: assert 403 == 200\n +  where 403 = <Response [403]>.status_code","time":{"start":1756192055719,"stop":1756192058274,"duration":2555}},{"uid":"95f821af1c5924ce","reportUrl":"https://pagopa.github.io/rtp-platform-qa/505//#testresult/95f821af1c5924ce","status":"failed","statusDetails":"AssertionError: assert 403 == 200\n +  where 403 = <Response [403]>.status_code","time":{"start":1756105687470,"stop":1756105689940,"duration":2470}},{"uid":"f18cbc5387b85169","reportUrl":"https://pagopa.github.io/rtp-platform-qa/504//#testresult/f18cbc5387b85169","status":"failed","statusDetails":"AssertionError: assert 403 == 200\n +  where 403 = <Response [403]>.status_code","time":{"start":1756019191634,"stop":1756019194176,"duration":2542}},{"uid":"ddcfa121b1fefdc6","reportUrl":"https://pagopa.github.io/rtp-platform-qa/503//#testresult/ddcfa121b1fefdc6","status":"failed","statusDetails":"AssertionError: assert 403 == 200\n +  where 403 = <Response [403]>.status_code","time":{"start":1755932778812,"stop":1755932781550,"duration":2738}},{"uid":"4d4a3bdf841dc93","reportUrl":"https://pagopa.github.io/rtp-platform-qa/502//#testresult/4d4a3bdf841dc93","status":"failed","statusDetails":"AssertionError: assert 403 == 200\n +  where 403 = <Response [403]>.status_code","time":{"start":1755847640453,"stop":1755847644090,"duration":3637}},{"uid":"332522aff4c74642","reportUrl":"https://pagopa.github.io/rtp-platform-qa/501//#testresult/332522aff4c74642","status":"failed","statusDetails":"AssertionError: assert 403 == 200\n +  where 403 = <Response [403]>.status_code","time":{"start":1755846440591,"stop":1755846443364,"duration":2773}},{"uid":"7f674277cfa0faa7","reportUrl":"https://pagopa.github.io/rtp-platform-qa/500//#testresult/7f674277cfa0faa7","status":"failed","statusDetails":"AssertionError: assert 403 == 200\n +  where 403 = <Response [403]>.status_code","time":{"start":1755843893469,"stop":1755843896265,"duration":2796}}]},"tags":["callback","happy_path"]},"source":"b8f8e3b4e6d87aec.json","parameterValues":[]}