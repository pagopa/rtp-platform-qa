{"uid":"7e3314be84bde4fa","name":"RTP is successfully retrieved","fullName":"tests.test_get_rtp#test_get_rtp_success","historyId":"caeb9610ab96a7a077f09cf26a913a9a","time":{"start":1757057136616,"stop":1757057137226,"duration":610},"status":"broken","statusMessage":"requests.exceptions.HTTPError: 502 Server Error: Bad Gateway for url: https://api-mcshared.uat.cstar.pagopa.it/auth/token","statusTrace":"@allure.feature('RTP Get')\n    @allure.story('Service provider retrieves an RTP')\n    @allure.title('RTP is successfully retrieved')\n    @pytest.mark.get\n    @pytest.mark.happy_path\n    def test_get_rtp_success():\n        rtp_data = generate_rtp_data()\n    \n>       debtor_service_provider_access_token = get_valid_access_token(\n            client_id=secrets.debtor_service_provider.client_id,\n            client_secret=secrets.debtor_service_provider.client_secret,\n            access_token_function=get_access_token,\n        )\n\nfunctional-tests/tests/test_get_rtp.py:24: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \napi/auth.py:8: in get_valid_access_token\n    token_response.raise_for_status()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <Response [502]>\n\n    def raise_for_status(self):\n        \"\"\"Raises :class:`HTTPError`, if one occurred.\"\"\"\n    \n        http_error_msg = \"\"\n        if isinstance(self.reason, bytes):\n            # We attempt to decode utf-8 first because some servers\n            # choose to localize their reason strings. If the string\n            # isn't utf-8, we fall back to iso-8859-1 for all other\n            # encodings. (See PR #3538)\n            try:\n                reason = self.reason.decode(\"utf-8\")\n            except UnicodeDecodeError:\n                reason = self.reason.decode(\"iso-8859-1\")\n        else:\n            reason = self.reason\n    \n        if 400 <= self.status_code < 500:\n            http_error_msg = (\n                f\"{self.status_code} Client Error: {reason} for url: {self.url}\"\n            )\n    \n        elif 500 <= self.status_code < 600:\n            http_error_msg = (\n                f\"{self.status_code} Server Error: {reason} for url: {self.url}\"\n            )\n    \n        if http_error_msg:\n>           raise HTTPError(http_error_msg, response=self)\nE           requests.exceptions.HTTPError: 502 Server Error: Bad Gateway for url: https://api-mcshared.uat.cstar.pagopa.it/auth/token\n\n/opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/requests/models.py:1026: HTTPError","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"_session_faker","time":{"start":1757056838070,"stop":1757056838126,"duration":56},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"afterStages":[],"labels":[{"name":"story","value":"Service provider retrieves an RTP"},{"name":"feature","value":"RTP Get"},{"name":"tag","value":"happy_path"},{"name":"tag","value":"get"},{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_get_rtp"},{"name":"host","value":"pkrvm7jw40e0xgp"},{"name":"thread","value":"2510-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_get_rtp"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":43,"broken":17,"skipped":0,"passed":66,"unknown":0,"total":126},"items":[{"uid":"b21b21c871d0d553","reportUrl":"https://pagopa.github.io/rtp-platform-qa/519//#testresult/b21b21c871d0d553","status":"failed","statusDetails":"AssertionError: assert 403 == 200\n +  where 403 = <Response [403]>.status_code","time":{"start":1756969677539,"stop":1756969679518,"duration":1979}},{"uid":"1821c7a1e60699b9","reportUrl":"https://pagopa.github.io/rtp-platform-qa/518//#testresult/1821c7a1e60699b9","status":"failed","statusDetails":"AssertionError: assert 403 == 200\n +  where 403 = <Response [403]>.status_code","time":{"start":1756910910590,"stop":1756910913862,"duration":3272}},{"uid":"ce24c2fd1d2bd665","reportUrl":"https://pagopa.github.io/rtp-platform-qa/517//#testresult/ce24c2fd1d2bd665","status":"failed","statusDetails":"AssertionError: assert 403 == 200\n +  where 403 = <Response [403]>.status_code","time":{"start":1756883298521,"stop":1756883300785,"duration":2264}},{"uid":"18ed524c905a48f0","reportUrl":"https://pagopa.github.io/rtp-platform-qa/516//#testresult/18ed524c905a48f0","status":"failed","statusDetails":"AssertionError: assert 403 == 200\n +  where 403 = <Response [403]>.status_code","time":{"start":1756798021401,"stop":1756798023251,"duration":1850}},{"uid":"9fbd5af24618382f","reportUrl":"https://pagopa.github.io/rtp-platform-qa/515//#testresult/9fbd5af24618382f","status":"failed","statusDetails":"AssertionError: assert 403 == 200\n +  where 403 = <Response [403]>.status_code","time":{"start":1756796895755,"stop":1756796897923,"duration":2168}},{"uid":"1c62309f26dc9195","reportUrl":"https://pagopa.github.io/rtp-platform-qa/514//#testresult/1c62309f26dc9195","status":"failed","statusDetails":"AssertionError: assert 403 == 200\n +  where 403 = <Response [403]>.status_code","time":{"start":1756719629247,"stop":1756719632555,"duration":3308}},{"uid":"183644e180f30369","reportUrl":"https://pagopa.github.io/rtp-platform-qa/513//#testresult/183644e180f30369","status":"failed","statusDetails":"AssertionError: assert 403 == 200\n +  where 403 = <Response [403]>.status_code","time":{"start":1756710578079,"stop":1756710580982,"duration":2903}},{"uid":"e20a719efb15b9bb","reportUrl":"https://pagopa.github.io/rtp-platform-qa/512//#testresult/e20a719efb15b9bb","status":"failed","statusDetails":"AssertionError: assert 403 == 200\n +  where 403 = <Response [403]>.status_code","time":{"start":1756624050864,"stop":1756624052819,"duration":1955}},{"uid":"74bed756933cf3f5","reportUrl":"https://pagopa.github.io/rtp-platform-qa/511//#testresult/74bed756933cf3f5","status":"failed","statusDetails":"AssertionError: assert 403 == 200\n +  where 403 = <Response [403]>.status_code","time":{"start":1756537642256,"stop":1756537644204,"duration":1948}},{"uid":"c4ddc963f5418f4d","reportUrl":"https://pagopa.github.io/rtp-platform-qa/510//#testresult/c4ddc963f5418f4d","status":"failed","statusDetails":"AssertionError: assert 403 == 200\n +  where 403 = <Response [403]>.status_code","time":{"start":1756451298556,"stop":1756451300776,"duration":2220}},{"uid":"e490317e2a48273","reportUrl":"https://pagopa.github.io/rtp-platform-qa/509//#testresult/e490317e2a48273","status":"failed","statusDetails":"AssertionError: assert 403 == 200\n +  where 403 = <Response [403]>.status_code","time":{"start":1756385958467,"stop":1756385961708,"duration":3241}},{"uid":"fde2c2b343570c34","reportUrl":"https://pagopa.github.io/rtp-platform-qa/508//#testresult/fde2c2b343570c34","status":"failed","statusDetails":"AssertionError: assert 403 == 200\n +  where 403 = <Response [403]>.status_code","time":{"start":1756364926491,"stop":1756364929738,"duration":3247}},{"uid":"1a094a1db9f28a96","reportUrl":"https://pagopa.github.io/rtp-platform-qa/507//#testresult/1a094a1db9f28a96","status":"failed","statusDetails":"AssertionError: assert 403 == 200\n +  where 403 = <Response [403]>.status_code","time":{"start":1756278512714,"stop":1756278516240,"duration":3526}},{"uid":"bb91a87349d759db","reportUrl":"https://pagopa.github.io/rtp-platform-qa/506//#testresult/bb91a87349d759db","status":"failed","statusDetails":"AssertionError: assert 403 == 200\n +  where 403 = <Response [403]>.status_code","time":{"start":1756192107795,"stop":1756192109937,"duration":2142}},{"uid":"def5d8e3897cce18","reportUrl":"https://pagopa.github.io/rtp-platform-qa/505//#testresult/def5d8e3897cce18","status":"failed","statusDetails":"AssertionError: assert 403 == 200\n +  where 403 = <Response [403]>.status_code","time":{"start":1756105755499,"stop":1756105757460,"duration":1961}},{"uid":"a68d46d8b06a67a4","reportUrl":"https://pagopa.github.io/rtp-platform-qa/504//#testresult/a68d46d8b06a67a4","status":"failed","statusDetails":"AssertionError: assert 403 == 200\n +  where 403 = <Response [403]>.status_code","time":{"start":1756019243123,"stop":1756019245070,"duration":1947}},{"uid":"2b9e91802a688bf1","reportUrl":"https://pagopa.github.io/rtp-platform-qa/503//#testresult/2b9e91802a688bf1","status":"failed","statusDetails":"AssertionError: assert 403 == 200\n +  where 403 = <Response [403]>.status_code","time":{"start":1755932835369,"stop":1755932837634,"duration":2265}},{"uid":"d793e827bb2fbc6b","reportUrl":"https://pagopa.github.io/rtp-platform-qa/502//#testresult/d793e827bb2fbc6b","status":"failed","statusDetails":"AssertionError: assert 403 == 200\n +  where 403 = <Response [403]>.status_code","time":{"start":1755847701501,"stop":1755847704597,"duration":3096}},{"uid":"343394ad6a6cb9e6","reportUrl":"https://pagopa.github.io/rtp-platform-qa/501//#testresult/343394ad6a6cb9e6","status":"failed","statusDetails":"AssertionError: assert 403 == 200\n +  where 403 = <Response [403]>.status_code","time":{"start":1755846491506,"stop":1755846493686,"duration":2180}},{"uid":"23a6508f56fd57a","reportUrl":"https://pagopa.github.io/rtp-platform-qa/500//#testresult/23a6508f56fd57a","status":"failed","statusDetails":"AssertionError: assert 403 == 200\n +  where 403 = <Response [403]>.status_code","time":{"start":1755843956669,"stop":1755843958910,"duration":2241}}]},"tags":["get","happy_path"]},"source":"7e3314be84bde4fa.json","parameterValues":[]}