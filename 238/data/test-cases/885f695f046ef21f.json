{"uid":"885f695f046ef21f","name":"The service returns the mocked server error","fullName":"tests.test_send_rtp#test_receive_server_error_from_mock","historyId":"df79497008225556c6105188e0be1c16","time":{"start":1741705765949,"stop":1741705828921,"duration":62972},"status":"failed","statusMessage":"AssertionError: assert 504 == 500\n +  where 504 = <Response [504]>.status_code","statusTrace":"@allure.feature('RTP Send')\n    @allure.story('Service provider sends an RTP')\n    @allure.title('The service returns the mocked server error')\n    @pytest.mark.send\n    @pytest.mark.unhappy_path\n    def test_receive_server_error_from_mock():\n        mock_fiscal_code = 'RSSMRA85T10X000D'\n        expected_mocked_failure_status_code = 500\n    \n        rtp_data = generate_rtp_data()\n    \n        rtp_data['payer']['payerId'] = mock_fiscal_code\n    \n        debtor_service_provider_access_token = get_valid_access_token(client_id=secrets.debtor_service_provider.client_id,\n                                                                      client_secret=secrets.debtor_service_provider.client_secret,\n                                                                      access_token_function=get_access_token)\n    \n        creditor_service_provider_access_token = get_valid_access_token(\n            client_id=secrets.creditor_service_provider.client_id,\n            client_secret=secrets.creditor_service_provider.client_secret,\n            access_token_function=get_access_token)\n    \n        activate(debtor_service_provider_access_token, rtp_data['payer']['payerId'],\n                 secrets.debtor_service_provider.service_provider_id)\n    \n        response = send_rtp(access_token=creditor_service_provider_access_token, rtp_payload=rtp_data)\n>       assert response.status_code == expected_mocked_failure_status_code\nE       assert 504 == 500\nE        +  where 504 = <Response [504]>.status_code\n\nfunctional-tests/tests/test_send_rtp.py:97: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"_session_faker","time":{"start":1741705685259,"stop":1741705685324,"duration":65},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"afterStages":[],"labels":[{"name":"story","value":"Service provider sends an RTP"},{"name":"feature","value":"RTP Send"},{"name":"tag","value":"unhappy_path"},{"name":"tag","value":"send"},{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_send_rtp"},{"name":"host","value":"fv-az1068-926"},{"name":"thread","value":"2284-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_send_rtp"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":4,"broken":0,"skipped":0,"passed":6,"unknown":0,"total":10},"items":[{"uid":"d47793a4c07faf65","reportUrl":"https://pagopa.github.io/rtp-platform-qa/237//#testresult/d47793a4c07faf65","status":"failed","statusDetails":"AssertionError: assert 504 == 500\n +  where 504 = <Response [504]>.status_code","time":{"start":1741676886187,"stop":1741676950286,"duration":64099}},{"uid":"bb6f3048c9836cfd","reportUrl":"https://pagopa.github.io/rtp-platform-qa/236//#testresult/bb6f3048c9836cfd","status":"failed","statusDetails":"AssertionError: assert 504 == 500\n +  where 504 = <Response [504]>.status_code","time":{"start":1741631518568,"stop":1741631581542,"duration":62974}},{"uid":"3d80537a3705d3c7","reportUrl":"https://pagopa.github.io/rtp-platform-qa/233//#testresult/3d80537a3705d3c7","status":"failed","statusDetails":"AssertionError: assert 504 == 500\n +  where 504 = <Response [504]>.status_code","time":{"start":1741603762497,"stop":1741603825367,"duration":62870}},{"uid":"d33b98a8e69ca0d2","reportUrl":"https://pagopa.github.io/rtp-platform-qa/232//#testresult/d33b98a8e69ca0d2","status":"passed","time":{"start":1741590426573,"stop":1741590429899,"duration":3326}},{"uid":"aeaa0ad411d0f34e","reportUrl":"https://pagopa.github.io/rtp-platform-qa/231//#testresult/aeaa0ad411d0f34e","status":"passed","time":{"start":1741503967709,"stop":1741503971523,"duration":3814}},{"uid":"e8582d99645a85e8","reportUrl":"https://pagopa.github.io/rtp-platform-qa/230//#testresult/e8582d99645a85e8","status":"passed","time":{"start":1741417542942,"stop":1741417546045,"duration":3103}},{"uid":"aa87bbdfbf3007e6","reportUrl":"https://pagopa.github.io/rtp-platform-qa/229//#testresult/aa87bbdfbf3007e6","status":"passed","time":{"start":1741368340237,"stop":1741368343280,"duration":3043}},{"uid":"a8bb06f457cb9d9b","reportUrl":"https://pagopa.github.io/rtp-platform-qa/228//#testresult/a8bb06f457cb9d9b","status":"passed","time":{"start":1741365946612,"stop":1741365954600,"duration":7988}},{"uid":"adcecc5c14141414","reportUrl":"https://pagopa.github.io/rtp-platform-qa/227//#testresult/adcecc5c14141414","status":"passed","time":{"start":1741364158457,"stop":1741364162296,"duration":3839}}]},"tags":["unhappy_path","send"]},"source":"885f695f046ef21f.json","parameterValues":[]}