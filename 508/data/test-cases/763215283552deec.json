{"uid":"763215283552deec","name":"An RTP callback with status ACTC is successfully received","fullName":"tests.test_callback#test_receive_rtp_callback_DS_05_ACTC_compliant","historyId":"4b2bd33e1a231657dc457cb580c88b06","time":{"start":1756364853705,"stop":1756364857644,"duration":3939},"status":"failed","statusMessage":"AssertionError: assert 403 == 200\n +  where 403 = <Response [403]>.status_code","statusTrace":"@allure.feature('RTP Callback')\n    @allure.story('Service provider sends a callback referred to an RTP with status ACTC')\n    @allure.title('An RTP callback with status ACTC is successfully received')\n    @pytest.mark.callback\n    @pytest.mark.happy_path\n    def test_receive_rtp_callback_DS_05_ACTC_compliant():\n        rtp_data = generate_rtp_data()\n    \n        debtor_service_provider_access_token = get_valid_access_token(\n            client_id=secrets.debtor_service_provider.client_id,\n            client_secret=secrets.debtor_service_provider.client_secret,\n            access_token_function=get_access_token,\n        )\n    \n        creditor_service_provider_access_token = get_valid_access_token(\n            client_id=secrets.creditor_service_provider.client_id,\n            client_secret=secrets.creditor_service_provider.client_secret,\n            access_token_function=get_access_token,\n        )\n    \n        activation_response = activate(\n            debtor_service_provider_access_token,\n            rtp_data['payer']['payerId'],\n            secrets.debtor_service_provider.service_provider_id,\n        )\n        assert activation_response.status_code == 201\n    \n        send_response = send_rtp(\n            access_token=creditor_service_provider_access_token, rtp_payload=rtp_data\n        )\n        assert send_response.status_code == 201\n    \n        location = send_response.headers['Location']\n        resource_id = location.split('/')[-1]\n    \n        original_msg_id = resource_id.replace('-', '')\n    \n        callback_data = generate_callback_data_DS_05_ACTC_compliant()\n        callback_data['AsynchronousSepaRequestToPayResponse']['Document']['CdtrPmtActvtnReqStsRpt'][\n            'OrgnlGrpInfAndSts'\n        ]['OrgnlMsgId'] = original_msg_id\n    \n        cert, key = pfx_to_pem(\n            secrets.debtor_service_provider_mock_PFX_base64,\n            secrets.debtor_service_provider_mock_PFX_password_base64,\n            config.cert_path,\n            config.key_path,\n        )\n    \n        callback_response = srtp_callback(\n            rtp_payload=callback_data, cert_path=cert, key_path=key\n        )\n        assert (\n            callback_response.status_code == 200\n        ), f\"Error from callback, expected 200 got {callback_response.status_code}\"\n    \n        get_response = get_rtp(\n            access_token=creditor_service_provider_access_token, rtp_id=resource_id\n        )\n>       assert get_response.status_code == 200\nE       assert 403 == 200\nE        +  where 403 = <Response [403]>.status_code\n\nfunctional-tests/tests/test_callback.py:200: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"_session_faker","time":{"start":1756364819271,"stop":1756364819328,"duration":57},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"afterStages":[],"labels":[{"name":"feature","value":"RTP Callback"},{"name":"story","value":"Service provider sends a callback referred to an RTP with status ACTC"},{"name":"tag","value":"happy_path"},{"name":"tag","value":"callback"},{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_callback"},{"name":"host","value":"pkrvmccyg1gnepe"},{"name":"thread","value":"2561-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_callback"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":32,"broken":16,"skipped":0,"passed":4,"unknown":0,"total":52},"items":[{"uid":"208653b5c2c95aa5","reportUrl":"https://pagopa.github.io/rtp-platform-qa/507//#testresult/208653b5c2c95aa5","status":"failed","statusDetails":"AssertionError: assert 403 == 200\n +  where 403 = <Response [403]>.status_code","time":{"start":1756278442419,"stop":1756278446570,"duration":4151}},{"uid":"e672c2600ef12118","reportUrl":"https://pagopa.github.io/rtp-platform-qa/506//#testresult/e672c2600ef12118","status":"failed","statusDetails":"AssertionError: assert 403 == 200\n +  where 403 = <Response [403]>.status_code","time":{"start":1756192055719,"stop":1756192058274,"duration":2555}},{"uid":"95f821af1c5924ce","reportUrl":"https://pagopa.github.io/rtp-platform-qa/505//#testresult/95f821af1c5924ce","status":"failed","statusDetails":"AssertionError: assert 403 == 200\n +  where 403 = <Response [403]>.status_code","time":{"start":1756105687470,"stop":1756105689940,"duration":2470}},{"uid":"f18cbc5387b85169","reportUrl":"https://pagopa.github.io/rtp-platform-qa/504//#testresult/f18cbc5387b85169","status":"failed","statusDetails":"AssertionError: assert 403 == 200\n +  where 403 = <Response [403]>.status_code","time":{"start":1756019191634,"stop":1756019194176,"duration":2542}},{"uid":"ddcfa121b1fefdc6","reportUrl":"https://pagopa.github.io/rtp-platform-qa/503//#testresult/ddcfa121b1fefdc6","status":"failed","statusDetails":"AssertionError: assert 403 == 200\n +  where 403 = <Response [403]>.status_code","time":{"start":1755932778812,"stop":1755932781550,"duration":2738}},{"uid":"4d4a3bdf841dc93","reportUrl":"https://pagopa.github.io/rtp-platform-qa/502//#testresult/4d4a3bdf841dc93","status":"failed","statusDetails":"AssertionError: assert 403 == 200\n +  where 403 = <Response [403]>.status_code","time":{"start":1755847640453,"stop":1755847644090,"duration":3637}},{"uid":"332522aff4c74642","reportUrl":"https://pagopa.github.io/rtp-platform-qa/501//#testresult/332522aff4c74642","status":"failed","statusDetails":"AssertionError: assert 403 == 200\n +  where 403 = <Response [403]>.status_code","time":{"start":1755846440591,"stop":1755846443364,"duration":2773}},{"uid":"7f674277cfa0faa7","reportUrl":"https://pagopa.github.io/rtp-platform-qa/500//#testresult/7f674277cfa0faa7","status":"failed","statusDetails":"AssertionError: assert 403 == 200\n +  where 403 = <Response [403]>.status_code","time":{"start":1755843893469,"stop":1755843896265,"duration":2796}},{"uid":"d07a0e5b9a9ba637","reportUrl":"https://pagopa.github.io/rtp-platform-qa/499//#testresult/d07a0e5b9a9ba637","status":"failed","statusDetails":"AssertionError: assert 403 == 200\n +  where 403 = <Response [403]>.status_code","time":{"start":1755760173944,"stop":1755760176274,"duration":2330}},{"uid":"5faa25bc8bf1ce0d","reportUrl":"https://pagopa.github.io/rtp-platform-qa/498//#testresult/5faa25bc8bf1ce0d","status":"failed","statusDetails":"AssertionError: assert 403 == 200\n +  where 403 = <Response [403]>.status_code","time":{"start":1755673675834,"stop":1755673679788,"duration":3954}},{"uid":"6000cb68a1983487","reportUrl":"https://pagopa.github.io/rtp-platform-qa/497//#testresult/6000cb68a1983487","status":"failed","statusDetails":"AssertionError: assert 403 == 200\n +  where 403 = <Response [403]>.status_code","time":{"start":1755613292949,"stop":1755613295921,"duration":2972}},{"uid":"add2461fbe9b21ad","reportUrl":"https://pagopa.github.io/rtp-platform-qa/496//#testresult/add2461fbe9b21ad","status":"failed","statusDetails":"AssertionError: assert 403 == 200\n +  where 403 = <Response [403]>.status_code","time":{"start":1755588479176,"stop":1755588481665,"duration":2489}},{"uid":"4ee24cb5e656fbe8","reportUrl":"https://pagopa.github.io/rtp-platform-qa/495//#testresult/4ee24cb5e656fbe8","status":"failed","statusDetails":"AssertionError: assert 403 == 200\n +  where 403 = <Response [403]>.status_code","time":{"start":1755587257733,"stop":1755587260519,"duration":2786}},{"uid":"84c3320a0e52806f","reportUrl":"https://pagopa.github.io/rtp-platform-qa/494//#testresult/84c3320a0e52806f","status":"failed","statusDetails":"AssertionError: assert 403 == 200\n +  where 403 = <Response [403]>.status_code","time":{"start":1755500990455,"stop":1755500994407,"duration":3952}},{"uid":"ef74b204a44ba5ed","reportUrl":"https://pagopa.github.io/rtp-platform-qa/493//#testresult/ef74b204a44ba5ed","status":"failed","statusDetails":"AssertionError: assert 403 == 200\n +  where 403 = <Response [403]>.status_code","time":{"start":1755414402668,"stop":1755414405149,"duration":2481}},{"uid":"af4c77294e5dc57d","reportUrl":"https://pagopa.github.io/rtp-platform-qa/492//#testresult/af4c77294e5dc57d","status":"failed","statusDetails":"AssertionError: assert 403 == 200\n +  where 403 = <Response [403]>.status_code","time":{"start":1755327994280,"stop":1755327996817,"duration":2537}},{"uid":"3391cf98ec544a30","reportUrl":"https://pagopa.github.io/rtp-platform-qa/491//#testresult/3391cf98ec544a30","status":"failed","statusDetails":"AssertionError: assert 403 == 200\n +  where 403 = <Response [403]>.status_code","time":{"start":1755241681010,"stop":1755241683443,"duration":2433}},{"uid":"929bfe70aaafc854","reportUrl":"https://pagopa.github.io/rtp-platform-qa/490//#testresult/929bfe70aaafc854","status":"failed","statusDetails":"AssertionError: assert 403 == 200\n +  where 403 = <Response [403]>.status_code","time":{"start":1755166782991,"stop":1755166786014,"duration":3023}},{"uid":"2e25aa62bcc214bf","reportUrl":"https://pagopa.github.io/rtp-platform-qa/489//#testresult/2e25aa62bcc214bf","status":"failed","statusDetails":"AssertionError: assert 403 == 200\n +  where 403 = <Response [403]>.status_code","time":{"start":1755158298162,"stop":1755158300679,"duration":2517}},{"uid":"7b2f522ed88b6fd3","reportUrl":"https://pagopa.github.io/rtp-platform-qa/488//#testresult/7b2f522ed88b6fd3","status":"failed","statusDetails":"AssertionError: assert 403 == 200\n +  where 403 = <Response [403]>.status_code","time":{"start":1755155318348,"stop":1755155322171,"duration":3823}}]},"tags":["callback","happy_path"]},"source":"763215283552deec.json","parameterValues":[]}