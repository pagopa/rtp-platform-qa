{"uid":"a5de20a13fda917f","name":"RTP is successfully retrieved","fullName":"tests.test_get_rtp#test_get_rtp_success","historyId":"caeb9610ab96a7a077f09cf26a913a9a","time":{"start":1754809662403,"stop":1754809664620,"duration":2217},"status":"failed","statusMessage":"AssertionError: assert 403 == 200\n +  where 403 = <Response [403]>.status_code","statusTrace":"@allure.feature('RTP Get')\n    @allure.story('Service provider retrieves an RTP')\n    @allure.title('RTP is successfully retrieved')\n    @pytest.mark.get\n    @pytest.mark.happy_path\n    def test_get_rtp_success():\n        rtp_data = generate_rtp_data()\n    \n        debtor_service_provider_access_token = get_valid_access_token(\n            client_id=secrets.debtor_service_provider.client_id,\n            client_secret=secrets.debtor_service_provider.client_secret,\n            access_token_function=get_access_token,\n        )\n    \n        creditor_service_provider_access_token = get_valid_access_token(\n            client_id=secrets.creditor_service_provider.client_id,\n            client_secret=secrets.creditor_service_provider.client_secret,\n            access_token_function=get_access_token,\n        )\n    \n        activation_response = activate(\n            debtor_service_provider_access_token,\n            rtp_data['payer']['payerId'],\n            secrets.debtor_service_provider.service_provider_id,\n        )\n        assert activation_response.status_code == 201, 'Error activating debtor'\n    \n        send_response = send_rtp(\n            access_token=creditor_service_provider_access_token, rtp_payload=rtp_data\n        )\n        assert send_response.status_code == 201\n    \n        location = send_response.headers['Location']\n        resource_id = location.split('/')[-1]\n    \n        get_response = get_rtp(\n            access_token=creditor_service_provider_access_token, rtp_id=resource_id\n        )\n>       assert get_response.status_code == 200\nE       assert 403 == 200\nE        +  where 403 = <Response [403]>.status_code\n\nfunctional-tests/tests/test_get_rtp.py:54: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"_session_faker","time":{"start":1754809582909,"stop":1754809582968,"duration":59},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"afterStages":[],"labels":[{"name":"story","value":"Service provider retrieves an RTP"},{"name":"feature","value":"RTP Get"},{"name":"tag","value":"happy_path"},{"name":"tag","value":"get"},{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_get_rtp"},{"name":"host","value":"pkrvmsl9tci6h6u"},{"name":"thread","value":"2579-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_get_rtp"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":7,"broken":16,"skipped":0,"passed":66,"unknown":0,"total":89},"items":[{"uid":"45704605873df765","reportUrl":"https://pagopa.github.io/rtp-platform-qa/481//#testresult/45704605873df765","status":"failed","statusDetails":"AssertionError: assert 403 == 200\n +  where 403 = <Response [403]>.status_code","time":{"start":1754723272713,"stop":1754723274636,"duration":1923}},{"uid":"86e4540105bbf6f","reportUrl":"https://pagopa.github.io/rtp-platform-qa/480//#testresult/86e4540105bbf6f","status":"failed","statusDetails":"AssertionError: assert 403 == 200\n +  where 403 = <Response [403]>.status_code","time":{"start":1754637175915,"stop":1754637179265,"duration":3350}},{"uid":"b897df7b2cd0b036","reportUrl":"https://pagopa.github.io/rtp-platform-qa/479//#testresult/b897df7b2cd0b036","status":"failed","statusDetails":"AssertionError: assert 403 == 200\n +  where 403 = <Response [403]>.status_code","time":{"start":1754550749776,"stop":1754550752280,"duration":2504}},{"uid":"24ad99cf7302a486","reportUrl":"https://pagopa.github.io/rtp-platform-qa/478//#testresult/24ad99cf7302a486","status":"failed","statusDetails":"AssertionError: assert 403 == 200\n +  where 403 = <Response [403]>.status_code","time":{"start":1754464837491,"stop":1754464840768,"duration":3277}},{"uid":"76074782795b6b7d","reportUrl":"https://pagopa.github.io/rtp-platform-qa/477//#testresult/76074782795b6b7d","status":"failed","statusDetails":"AssertionError: assert 403 == 200\n +  where 403 = <Response [403]>.status_code","time":{"start":1754464790087,"stop":1754464792349,"duration":2262}},{"uid":"d2972ab55723bea5","reportUrl":"https://pagopa.github.io/rtp-platform-qa/475//#testresult/d2972ab55723bea5","status":"failed","statusDetails":"AssertionError: assert 403 == 200\n +  where 403 = <Response [403]>.status_code","time":{"start":1754464345476,"stop":1754464348778,"duration":3302}},{"uid":"93c0a62a92ce0fb3","reportUrl":"https://pagopa.github.io/rtp-platform-qa/474//#testresult/93c0a62a92ce0fb3","status":"broken","statusDetails":"requests.exceptions.HTTPError: 401 Client Error: Unauthorized for url: https://api-mcshared.uat.cstar.pagopa.it/auth/token","time":{"start":1754387729723,"stop":1754387730473,"duration":750}},{"uid":"eb56874e14a21cee","reportUrl":"https://pagopa.github.io/rtp-platform-qa/472//#testresult/eb56874e14a21cee","status":"broken","statusDetails":"requests.exceptions.HTTPError: 401 Client Error: Unauthorized for url: https://api-mcshared.uat.cstar.pagopa.it/auth/token","time":{"start":1754377948563,"stop":1754377949754,"duration":1191}},{"uid":"e299832c5aa85d52","reportUrl":"https://pagopa.github.io/rtp-platform-qa/471//#testresult/e299832c5aa85d52","status":"broken","statusDetails":"requests.exceptions.HTTPError: 401 Client Error: Unauthorized for url: https://api-mcshared.uat.cstar.pagopa.it/auth/token","time":{"start":1754319231713,"stop":1754319232544,"duration":831}},{"uid":"f2e3b89c82218ae1","reportUrl":"https://pagopa.github.io/rtp-platform-qa/470//#testresult/f2e3b89c82218ae1","status":"broken","statusDetails":"requests.exceptions.HTTPError: 401 Client Error: Unauthorized for url: https://api-mcshared.uat.cstar.pagopa.it/auth/token","time":{"start":1754291684092,"stop":1754291685347,"duration":1255}},{"uid":"2bd194678beb5185","reportUrl":"https://pagopa.github.io/rtp-platform-qa/469//#testresult/2bd194678beb5185","status":"broken","statusDetails":"requests.exceptions.HTTPError: 401 Client Error: Unauthorized for url: https://api-mcshared.uat.cstar.pagopa.it/auth/token","time":{"start":1754204873024,"stop":1754204873715,"duration":691}},{"uid":"8c1905740bfed4eb","reportUrl":"https://pagopa.github.io/rtp-platform-qa/468//#testresult/8c1905740bfed4eb","status":"broken","statusDetails":"requests.exceptions.HTTPError: 401 Client Error: Unauthorized for url: https://api-mcshared.uat.cstar.pagopa.it/auth/token","time":{"start":1754118485732,"stop":1754118486854,"duration":1122}},{"uid":"ef0567fdb065fd7b","reportUrl":"https://pagopa.github.io/rtp-platform-qa/467//#testresult/ef0567fdb065fd7b","status":"broken","statusDetails":"requests.exceptions.HTTPError: 401 Client Error: Unauthorized for url: https://api-mcshared.uat.cstar.pagopa.it/auth/token","time":{"start":1754051912847,"stop":1754051913712,"duration":865}},{"uid":"e678bc695dfa273b","reportUrl":"https://pagopa.github.io/rtp-platform-qa/466//#testresult/e678bc695dfa273b","status":"broken","statusDetails":"requests.exceptions.HTTPError: 401 Client Error: Unauthorized for url: https://api-mcshared.uat.cstar.pagopa.it/auth/token","time":{"start":1754032279724,"stop":1754032281177,"duration":1453}},{"uid":"1d7c70ee505f0855","reportUrl":"https://pagopa.github.io/rtp-platform-qa/465//#testresult/1d7c70ee505f0855","status":"broken","statusDetails":"requests.exceptions.HTTPError: 401 Client Error: Unauthorized for url: https://api-mcshared.uat.cstar.pagopa.it/auth/token","time":{"start":1753974033238,"stop":1753974033985,"duration":747}},{"uid":"15c5e4b315b48e9c","reportUrl":"https://pagopa.github.io/rtp-platform-qa/464//#testresult/15c5e4b315b48e9c","status":"broken","statusDetails":"requests.exceptions.HTTPError: 401 Client Error: Unauthorized for url: https://api-mcshared.uat.cstar.pagopa.it/auth/token","time":{"start":1753945845373,"stop":1753945846601,"duration":1228}},{"uid":"f454b8b7d355b2e0","reportUrl":"https://pagopa.github.io/rtp-platform-qa/463//#testresult/f454b8b7d355b2e0","status":"broken","statusDetails":"requests.exceptions.HTTPError: 401 Client Error: Unauthorized for url: https://api-mcshared.uat.cstar.pagopa.it/auth/token","time":{"start":1753878280686,"stop":1753878281940,"duration":1254}},{"uid":"17898b82095d9813","reportUrl":"https://pagopa.github.io/rtp-platform-qa/462//#testresult/17898b82095d9813","status":"broken","statusDetails":"requests.exceptions.HTTPError: 401 Client Error: Unauthorized for url: https://api-mcshared.uat.cstar.pagopa.it/auth/token","time":{"start":1753859493290,"stop":1753859494534,"duration":1244}},{"uid":"2d0b9200efb0a250","reportUrl":"https://pagopa.github.io/rtp-platform-qa/461//#testresult/2d0b9200efb0a250","status":"broken","statusDetails":"requests.exceptions.HTTPError: 401 Client Error: Unauthorized for url: https://api-mcshared.uat.cstar.pagopa.it/auth/token","time":{"start":1753773051904,"stop":1753773053155,"duration":1251}},{"uid":"aecfc9a63d832a9","reportUrl":"https://pagopa.github.io/rtp-platform-qa/460//#testresult/aecfc9a63d832a9","status":"broken","statusDetails":"requests.exceptions.HTTPError: 401 Client Error: Unauthorized for url: https://api-mcshared.uat.cstar.pagopa.it/auth/token","time":{"start":1753686726684,"stop":1753686727630,"duration":946}}]},"tags":["get","happy_path"]},"source":"a5de20a13fda917f.json","parameterValues":[]}