{"uid":"2536f6c210d74822","name":"An RTP is sent through CBI API","fullName":"tests.test_debtor_service_provider_availability#test_send_rtp_to_cbi","historyId":"f80da3262bf8ce0e665c096b1873cbf4","time":{"start":1754051902089,"stop":1754051903692,"duration":1603},"status":"failed","statusMessage":"AssertionError: assert 400 == 201\n +  where 400 = <Response [400]>.status_code","statusTrace":"@allure.feature('RTP Send')\n    @allure.story('Service provider sends an RTP to CBI directly')\n    @allure.title('An RTP is sent through CBI API')\n    @pytest.mark.send\n    @pytest.mark.happy_path\n    @pytest.mark.cbi\n    def test_send_rtp_to_cbi():\n        rtp_data = generate_rtp_data()\n        cbi_payload = generate_epc_rtp_data(rtp_data, bic='UNCRITMM')\n    \n        auth = client_credentials_to_auth_token(\n            secrets.CBI_client_id, secrets.CBI_client_secret\n        )\n        cert, key = pfx_to_pem(\n            secrets.CBI_client_PFX_base64,\n            secrets.CBI_client_PFX_password_base64,\n            config.cert_path,\n            config.key_path,\n        )\n        cbi_token = get_cbi_access_token(cert, key, auth)\n        response = send_srtp_to_cbi(f\"Bearer {cbi_token}\", cbi_payload)\n>       assert response.status_code == 201\nE       assert 400 == 201\nE        +  where 400 = <Response [400]>.status_code\n\nfunctional-tests/tests/test_debtor_service_provider_availability.py:57: AssertionError","flaky":true,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"_session_faker","time":{"start":1754051865887,"stop":1754051865942,"duration":55},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"afterStages":[],"labels":[{"name":"story","value":"Service provider sends an RTP to CBI directly"},{"name":"feature","value":"RTP Send"},{"name":"tag","value":"cbi"},{"name":"tag","value":"happy_path"},{"name":"tag","value":"send"},{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_debtor_service_provider_availability"},{"name":"host","value":"pkrvmjbmru5nbw0"},{"name":"thread","value":"2538-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_debtor_service_provider_availability"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":60,"broken":2,"skipped":0,"passed":33,"unknown":0,"total":95},"items":[{"uid":"478edd1a4be4d8a0","reportUrl":"https://pagopa.github.io/rtp-platform-qa/466//#testresult/478edd1a4be4d8a0","status":"failed","statusDetails":"AssertionError: assert 400 == 201\n +  where 400 = <Response [400]>.status_code","time":{"start":1754032271140,"stop":1754032272846,"duration":1706}},{"uid":"dc71f0a2cf618a31","reportUrl":"https://pagopa.github.io/rtp-platform-qa/465//#testresult/dc71f0a2cf618a31","status":"passed","time":{"start":1753974017892,"stop":1753974025401,"duration":7509}},{"uid":"ef3cb964cd3216cc","reportUrl":"https://pagopa.github.io/rtp-platform-qa/464//#testresult/ef3cb964cd3216cc","status":"failed","statusDetails":"AssertionError: assert 400 == 201\n +  where 400 = <Response [400]>.status_code","time":{"start":1753945830733,"stop":1753945833002,"duration":2269}},{"uid":"3f2b089e3364aa6a","reportUrl":"https://pagopa.github.io/rtp-platform-qa/463//#testresult/3f2b089e3364aa6a","status":"failed","statusDetails":"AssertionError: assert 400 == 201\n +  where 400 = <Response [400]>.status_code","time":{"start":1753878269119,"stop":1753878271221,"duration":2102}},{"uid":"44e33cef8aaa28de","reportUrl":"https://pagopa.github.io/rtp-platform-qa/462//#testresult/44e33cef8aaa28de","status":"passed","time":{"start":1753859477589,"stop":1753859482864,"duration":5275}},{"uid":"e30ed150d0c49809","reportUrl":"https://pagopa.github.io/rtp-platform-qa/461//#testresult/e30ed150d0c49809","status":"passed","time":{"start":1753773033035,"stop":1753773041432,"duration":8397}},{"uid":"31a938f451fc22d6","reportUrl":"https://pagopa.github.io/rtp-platform-qa/460//#testresult/31a938f451fc22d6","status":"passed","time":{"start":1753686709523,"stop":1753686717165,"duration":7642}},{"uid":"3e82cbe59cc7fff9","reportUrl":"https://pagopa.github.io/rtp-platform-qa/459//#testresult/3e82cbe59cc7fff9","status":"passed","time":{"start":1753600047708,"stop":1753600056200,"duration":8492}},{"uid":"677753462973c191","reportUrl":"https://pagopa.github.io/rtp-platform-qa/458//#testresult/677753462973c191","status":"passed","time":{"start":1753513659109,"stop":1753513667767,"duration":8658}},{"uid":"1f35a99c77510d0b","reportUrl":"https://pagopa.github.io/rtp-platform-qa/457//#testresult/1f35a99c77510d0b","status":"passed","time":{"start":1753433561587,"stop":1753433566317,"duration":4730}},{"uid":"18ac76924a61f777","reportUrl":"https://pagopa.github.io/rtp-platform-qa/456//#testresult/18ac76924a61f777","status":"passed","time":{"start":1753427385231,"stop":1753427389953,"duration":4722}},{"uid":"93f4e83d0d90bf75","reportUrl":"https://pagopa.github.io/rtp-platform-qa/455//#testresult/93f4e83d0d90bf75","status":"failed","statusDetails":"AssertionError: assert 400 == 201\n +  where 400 = <Response [400]>.status_code","time":{"start":1753366987266,"stop":1753366989557,"duration":2291}},{"uid":"b0553636a3ee6030","reportUrl":"https://pagopa.github.io/rtp-platform-qa/454//#testresult/b0553636a3ee6030","status":"passed","time":{"start":1753351348969,"stop":1753351352721,"duration":3752}},{"uid":"b0d1ef62727bd3a4","reportUrl":"https://pagopa.github.io/rtp-platform-qa/453//#testresult/b0d1ef62727bd3a4","status":"passed","time":{"start":1753340992562,"stop":1753341001011,"duration":8449}},{"uid":"b4b86f16152877fc","reportUrl":"https://pagopa.github.io/rtp-platform-qa/452//#testresult/b4b86f16152877fc","status":"passed","time":{"start":1753254615205,"stop":1753254622746,"duration":7541}},{"uid":"cd782e9d4210f0f1","reportUrl":"https://pagopa.github.io/rtp-platform-qa/451//#testresult/cd782e9d4210f0f1","status":"failed","statusDetails":"AssertionError: assert 400 == 201\n +  where 400 = <Response [400]>.status_code","time":{"start":1753168179528,"stop":1753168181115,"duration":1587}},{"uid":"51a6d7a7da19063d","reportUrl":"https://pagopa.github.io/rtp-platform-qa/450//#testresult/51a6d7a7da19063d","status":"broken","statusDetails":"requests.exceptions.SSLError: HTTPSConnectionPool(host='stgcbiglobeopenbankingapigateway.nexi.it', port=443): Max retries exceeded with url: /nexi/oauth/v2/token (Caused by SSLError(SSLEOFError(8, '[SSL: UNEXPECTED_EOF_WHILE_READING] EOF occurred in violation of protocol (_ssl.c:1028)')))","time":{"start":1753081900969,"stop":1753081901375,"duration":406}},{"uid":"d1c227a7603a83e2","reportUrl":"https://pagopa.github.io/rtp-platform-qa/449//#testresult/d1c227a7603a83e2","status":"failed","statusDetails":"AssertionError: assert 400 == 201\n +  where 400 = <Response [400]>.status_code","time":{"start":1752995257208,"stop":1752995266298,"duration":9090}},{"uid":"ef87fa3e8ccd6b84","reportUrl":"https://pagopa.github.io/rtp-platform-qa/448//#testresult/ef87fa3e8ccd6b84","status":"failed","statusDetails":"AssertionError: assert 400 == 201\n +  where 400 = <Response [400]>.status_code","time":{"start":1752908896421,"stop":1752908903019,"duration":6598}},{"uid":"331cac071edd257a","reportUrl":"https://pagopa.github.io/rtp-platform-qa/447//#testresult/331cac071edd257a","status":"passed","time":{"start":1752822620758,"stop":1752822628170,"duration":7412}}]},"tags":["cbi","send","happy_path"]},"source":"2536f6c210d74822.json","parameterValues":[]}