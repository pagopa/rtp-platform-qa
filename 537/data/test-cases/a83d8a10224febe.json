{"uid":"a83d8a10224febe","name":"RTP is successfully retrieved","fullName":"tests.test_get_rtp#test_get_rtp_success","historyId":"caeb9610ab96a7a077f09cf26a913a9a","time":{"start":1758271087774,"stop":1758271088312,"duration":538},"status":"broken","statusMessage":"requests.exceptions.HTTPError: 502 Server Error: Bad Gateway for url: https://api-mcshared.uat.cstar.pagopa.it/auth/token","statusTrace":"@allure.feature('RTP Get')\n    @allure.story('Service provider retrieves an RTP')\n    @allure.title('RTP is successfully retrieved')\n    @pytest.mark.get\n    @pytest.mark.happy_path\n    def test_get_rtp_success():\n        rtp_data = generate_rtp_data()\n    \n>       debtor_service_provider_access_token = get_valid_access_token(\n            client_id=secrets.debtor_service_provider.client_id,\n            client_secret=secrets.debtor_service_provider.client_secret,\n            access_token_function=get_access_token,\n        )\n\nfunctional-tests/tests/test_get_rtp.py:22: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \napi/auth.py:8: in get_valid_access_token\n    token_response.raise_for_status()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <Response [502]>\n\n    def raise_for_status(self):\n        \"\"\"Raises :class:`HTTPError`, if one occurred.\"\"\"\n    \n        http_error_msg = \"\"\n        if isinstance(self.reason, bytes):\n            # We attempt to decode utf-8 first because some servers\n            # choose to localize their reason strings. If the string\n            # isn't utf-8, we fall back to iso-8859-1 for all other\n            # encodings. (See PR #3538)\n            try:\n                reason = self.reason.decode(\"utf-8\")\n            except UnicodeDecodeError:\n                reason = self.reason.decode(\"iso-8859-1\")\n        else:\n            reason = self.reason\n    \n        if 400 <= self.status_code < 500:\n            http_error_msg = (\n                f\"{self.status_code} Client Error: {reason} for url: {self.url}\"\n            )\n    \n        elif 500 <= self.status_code < 600:\n            http_error_msg = (\n                f\"{self.status_code} Server Error: {reason} for url: {self.url}\"\n            )\n    \n        if http_error_msg:\n>           raise HTTPError(http_error_msg, response=self)\nE           requests.exceptions.HTTPError: 502 Server Error: Bad Gateway for url: https://api-mcshared.uat.cstar.pagopa.it/auth/token\n\n/opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/requests/models.py:1026: HTTPError","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"_session_faker","time":{"start":1758270979519,"stop":1758270979579,"duration":60},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"afterStages":[],"labels":[{"name":"feature","value":"RTP Get"},{"name":"story","value":"Service provider retrieves an RTP"},{"name":"tag","value":"happy_path"},{"name":"tag","value":"get"},{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_get_rtp"},{"name":"host","value":"runnervmf4ws1"},{"name":"thread","value":"2488-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_get_rtp"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":51,"broken":18,"skipped":0,"passed":74,"unknown":0,"total":143},"items":[{"uid":"ba41d32ccfe68783","reportUrl":"https://pagopa.github.io/rtp-platform-qa/536//#testresult/ba41d32ccfe68783","status":"passed","time":{"start":1758267106631,"stop":1758267109602,"duration":2971}},{"uid":"30a33be2b65a8a1c","reportUrl":"https://pagopa.github.io/rtp-platform-qa/535//#testresult/30a33be2b65a8a1c","status":"passed","time":{"start":1758180709065,"stop":1758180713118,"duration":4053}},{"uid":"fb1354a81c088e84","reportUrl":"https://pagopa.github.io/rtp-platform-qa/534//#testresult/fb1354a81c088e84","status":"passed","time":{"start":1758094290408,"stop":1758094293530,"duration":3122}},{"uid":"ca40ba9dea7904c3","reportUrl":"https://pagopa.github.io/rtp-platform-qa/533//#testresult/ca40ba9dea7904c3","status":"passed","time":{"start":1758007958923,"stop":1758007962185,"duration":3262}},{"uid":"b1908c93d7a53d58","reportUrl":"https://pagopa.github.io/rtp-platform-qa/532//#testresult/b1908c93d7a53d58","status":"passed","time":{"start":1757921585847,"stop":1757921588806,"duration":2959}},{"uid":"42f53d0391b2cb49","reportUrl":"https://pagopa.github.io/rtp-platform-qa/531//#testresult/42f53d0391b2cb49","status":"passed","time":{"start":1757835091083,"stop":1757835095253,"duration":4170}},{"uid":"c79ee28d4f3488e4","reportUrl":"https://pagopa.github.io/rtp-platform-qa/530//#testresult/c79ee28d4f3488e4","status":"passed","time":{"start":1757748734679,"stop":1757748738048,"duration":3369}},{"uid":"2bc5fbba28e8768","reportUrl":"https://pagopa.github.io/rtp-platform-qa/529//#testresult/2bc5fbba28e8768","status":"passed","time":{"start":1757666494777,"stop":1757666499011,"duration":4234}},{"uid":"400ad8e341c77dc7","reportUrl":"https://pagopa.github.io/rtp-platform-qa/528//#testresult/400ad8e341c77dc7","status":"failed","statusDetails":"AssertionError: assert 403 == 200\n +  where 403 = <Response [403]>.status_code","time":{"start":1757661688215,"stop":1757661691220,"duration":3005}},{"uid":"be3ec51b4a737c53","reportUrl":"https://pagopa.github.io/rtp-platform-qa/527//#testresult/be3ec51b4a737c53","status":"failed","statusDetails":"AssertionError: assert 403 == 200\n +  where 403 = <Response [403]>.status_code","time":{"start":1757598393847,"stop":1757598395996,"duration":2149}},{"uid":"46d438b0bd45240f","reportUrl":"https://pagopa.github.io/rtp-platform-qa/526//#testresult/46d438b0bd45240f","status":"failed","statusDetails":"AssertionError: assert 403 == 200\n +  where 403 = <Response [403]>.status_code","time":{"start":1757575321726,"stop":1757575323901,"duration":2175}},{"uid":"6236d11c1b13c404","reportUrl":"https://pagopa.github.io/rtp-platform-qa/525//#testresult/6236d11c1b13c404","status":"failed","statusDetails":"AssertionError: assert 403 == 200\n +  where 403 = <Response [403]>.status_code","time":{"start":1757489074350,"stop":1757489076579,"duration":2229}},{"uid":"20fce1d492c33058","reportUrl":"https://pagopa.github.io/rtp-platform-qa/524//#testresult/20fce1d492c33058","status":"failed","statusDetails":"AssertionError: assert 403 == 200\n +  where 403 = <Response [403]>.status_code","time":{"start":1757402552032,"stop":1757402553937,"duration":1905}},{"uid":"8976c1f64b401199","reportUrl":"https://pagopa.github.io/rtp-platform-qa/523//#testresult/8976c1f64b401199","status":"failed","statusDetails":"AssertionError: assert 403 == 200\n +  where 403 = <Response [403]>.status_code","time":{"start":1757316146228,"stop":1757316148161,"duration":1933}},{"uid":"4503f19bad221db0","reportUrl":"https://pagopa.github.io/rtp-platform-qa/522//#testresult/4503f19bad221db0","status":"failed","statusDetails":"AssertionError: assert 403 == 200\n +  where 403 = <Response [403]>.status_code","time":{"start":1757229692128,"stop":1757229694440,"duration":2312}},{"uid":"95df2bb78546cbe8","reportUrl":"https://pagopa.github.io/rtp-platform-qa/521//#testresult/95df2bb78546cbe8","status":"failed","statusDetails":"AssertionError: assert 403 == 200\n +  where 403 = <Response [403]>.status_code","time":{"start":1757143253621,"stop":1757143257017,"duration":3396}},{"uid":"7e3314be84bde4fa","reportUrl":"https://pagopa.github.io/rtp-platform-qa/520//#testresult/7e3314be84bde4fa","status":"broken","statusDetails":"requests.exceptions.HTTPError: 502 Server Error: Bad Gateway for url: https://api-mcshared.uat.cstar.pagopa.it/auth/token","time":{"start":1757057136616,"stop":1757057137226,"duration":610}},{"uid":"b21b21c871d0d553","reportUrl":"https://pagopa.github.io/rtp-platform-qa/519//#testresult/b21b21c871d0d553","status":"failed","statusDetails":"AssertionError: assert 403 == 200\n +  where 403 = <Response [403]>.status_code","time":{"start":1756969677539,"stop":1756969679518,"duration":1979}},{"uid":"1821c7a1e60699b9","reportUrl":"https://pagopa.github.io/rtp-platform-qa/518//#testresult/1821c7a1e60699b9","status":"failed","statusDetails":"AssertionError: assert 403 == 200\n +  where 403 = <Response [403]>.status_code","time":{"start":1756910910590,"stop":1756910913862,"duration":3272}},{"uid":"ce24c2fd1d2bd665","reportUrl":"https://pagopa.github.io/rtp-platform-qa/517//#testresult/ce24c2fd1d2bd665","status":"failed","statusDetails":"AssertionError: assert 403 == 200\n +  where 403 = <Response [403]>.status_code","time":{"start":1756883298521,"stop":1756883300785,"duration":2264}}]},"tags":["get","happy_path"]},"source":"a83d8a10224febe.json","parameterValues":[]}