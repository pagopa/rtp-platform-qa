{"uid":"4668aaebd6a806e3","name":"RTP is successfully retrieved","fullName":"tests.test_get_rtp#test_get_rtp_success","historyId":"caeb9610ab96a7a077f09cf26a913a9a","time":{"start":1758271087774,"stop":1758271088312,"duration":538},"status":"broken","statusMessage":"requests.exceptions.HTTPError: 502 Server Error: Bad Gateway for url: https://api-mcshared.uat.cstar.pagopa.it/auth/token","statusTrace":"@allure.feature('RTP Get')\n    @allure.story('Service provider retrieves an RTP')\n    @allure.title('RTP is successfully retrieved')\n    @pytest.mark.get\n    @pytest.mark.happy_path\n    def test_get_rtp_success():\n        rtp_data = generate_rtp_data()\n    \n>       debtor_service_provider_access_token = get_valid_access_token(\n            client_id=secrets.debtor_service_provider.client_id,\n            client_secret=secrets.debtor_service_provider.client_secret,\n            access_token_function=get_access_token,\n        )\n\nfunctional-tests/tests/test_get_rtp.py:22: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \napi/auth.py:8: in get_valid_access_token\n    token_response.raise_for_status()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <Response [502]>\n\n    def raise_for_status(self):\n        \"\"\"Raises :class:`HTTPError`, if one occurred.\"\"\"\n    \n        http_error_msg = \"\"\n        if isinstance(self.reason, bytes):\n            # We attempt to decode utf-8 first because some servers\n            # choose to localize their reason strings. If the string\n            # isn't utf-8, we fall back to iso-8859-1 for all other\n            # encodings. (See PR #3538)\n            try:\n                reason = self.reason.decode(\"utf-8\")\n            except UnicodeDecodeError:\n                reason = self.reason.decode(\"iso-8859-1\")\n        else:\n            reason = self.reason\n    \n        if 400 <= self.status_code < 500:\n            http_error_msg = (\n                f\"{self.status_code} Client Error: {reason} for url: {self.url}\"\n            )\n    \n        elif 500 <= self.status_code < 600:\n            http_error_msg = (\n                f\"{self.status_code} Server Error: {reason} for url: {self.url}\"\n            )\n    \n        if http_error_msg:\n>           raise HTTPError(http_error_msg, response=self)\nE           requests.exceptions.HTTPError: 502 Server Error: Bad Gateway for url: https://api-mcshared.uat.cstar.pagopa.it/auth/token\n\n/opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/requests/models.py:1026: HTTPError","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"_session_faker","time":{"start":1758270979519,"stop":1758270979579,"duration":60},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"afterStages":[],"labels":[{"name":"feature","value":"RTP Get"},{"name":"story","value":"Service provider retrieves an RTP"},{"name":"tag","value":"happy_path"},{"name":"tag","value":"get"},{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_get_rtp"},{"name":"host","value":"runnervmf4ws1"},{"name":"thread","value":"2488-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_get_rtp"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":51,"broken":20,"skipped":0,"passed":78,"unknown":0,"total":149},"items":[{"uid":"327d942e37899a98","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/536//#testresult/327d942e37899a98","status":"passed","time":{"start":1758267106631,"stop":1758267109602,"duration":2971}},{"uid":"d7da2471fe9c426c","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/535//#testresult/d7da2471fe9c426c","status":"passed","time":{"start":1758180709065,"stop":1758180713118,"duration":4053}},{"uid":"b885019f170f18f8","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/534//#testresult/b885019f170f18f8","status":"passed","time":{"start":1758094290408,"stop":1758094293530,"duration":3122}},{"uid":"626bbc6bbaa587a9","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/533//#testresult/626bbc6bbaa587a9","status":"passed","time":{"start":1758007958923,"stop":1758007962185,"duration":3262}},{"uid":"3ad66b26f05c92b9","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/532//#testresult/3ad66b26f05c92b9","status":"passed","time":{"start":1757921585847,"stop":1757921588806,"duration":2959}},{"uid":"182888b8ffba1d43","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/531//#testresult/182888b8ffba1d43","status":"passed","time":{"start":1757835091083,"stop":1757835095253,"duration":4170}},{"uid":"ee02e9bc158a940","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/530//#testresult/ee02e9bc158a940","status":"passed","time":{"start":1757748734679,"stop":1757748738048,"duration":3369}},{"uid":"4c44506bcd5ad7f4","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/529//#testresult/4c44506bcd5ad7f4","status":"passed","time":{"start":1757666494777,"stop":1757666499011,"duration":4234}},{"uid":"7630e3ede708f657","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/528//#testresult/7630e3ede708f657","status":"failed","statusDetails":"AssertionError: assert 403 == 200\n +  where 403 = <Response [403]>.status_code","time":{"start":1757661688215,"stop":1757661691220,"duration":3005}},{"uid":"3fa40852a92ad81a","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/527//#testresult/3fa40852a92ad81a","status":"failed","statusDetails":"AssertionError: assert 403 == 200\n +  where 403 = <Response [403]>.status_code","time":{"start":1757598393847,"stop":1757598395996,"duration":2149}},{"uid":"dde1b897448ea945","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/526//#testresult/dde1b897448ea945","status":"failed","statusDetails":"AssertionError: assert 403 == 200\n +  where 403 = <Response [403]>.status_code","time":{"start":1757575321726,"stop":1757575323901,"duration":2175}},{"uid":"7e75e56ba3c90a58","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/525//#testresult/7e75e56ba3c90a58","status":"failed","statusDetails":"AssertionError: assert 403 == 200\n +  where 403 = <Response [403]>.status_code","time":{"start":1757489074350,"stop":1757489076579,"duration":2229}},{"uid":"656749d8807eb92","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/524//#testresult/656749d8807eb92","status":"failed","statusDetails":"AssertionError: assert 403 == 200\n +  where 403 = <Response [403]>.status_code","time":{"start":1757402552032,"stop":1757402553937,"duration":1905}},{"uid":"ac7b8efe3de5ae3a","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/523//#testresult/ac7b8efe3de5ae3a","status":"failed","statusDetails":"AssertionError: assert 403 == 200\n +  where 403 = <Response [403]>.status_code","time":{"start":1757316146228,"stop":1757316148161,"duration":1933}},{"uid":"49af22cbcea7336c","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/522//#testresult/49af22cbcea7336c","status":"failed","statusDetails":"AssertionError: assert 403 == 200\n +  where 403 = <Response [403]>.status_code","time":{"start":1757229692128,"stop":1757229694440,"duration":2312}},{"uid":"69e336763d8d009c","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/521//#testresult/69e336763d8d009c","status":"failed","statusDetails":"AssertionError: assert 403 == 200\n +  where 403 = <Response [403]>.status_code","time":{"start":1757143253621,"stop":1757143257017,"duration":3396}},{"uid":"93edf57a48ac7c0","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/520//#testresult/93edf57a48ac7c0","status":"broken","statusDetails":"requests.exceptions.HTTPError: 502 Server Error: Bad Gateway for url: https://api-mcshared.uat.cstar.pagopa.it/auth/token","time":{"start":1757057136616,"stop":1757057137226,"duration":610}},{"uid":"7573928ce9113472","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/519//#testresult/7573928ce9113472","status":"failed","statusDetails":"AssertionError: assert 403 == 200\n +  where 403 = <Response [403]>.status_code","time":{"start":1756969677539,"stop":1756969679518,"duration":1979}},{"uid":"2f3a3603a47a789f","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/518//#testresult/2f3a3603a47a789f","status":"failed","statusDetails":"AssertionError: assert 403 == 200\n +  where 403 = <Response [403]>.status_code","time":{"start":1756910910590,"stop":1756910913862,"duration":3272}},{"uid":"84694b505d8829e4","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/517//#testresult/84694b505d8829e4","status":"failed","statusDetails":"AssertionError: assert 403 == 200\n +  where 403 = <Response [403]>.status_code","time":{"start":1756883298521,"stop":1756883300785,"duration":2264}}]},"tags":["get","happy_path"]},"source":"4668aaebd6a806e3.json","parameterValues":[]}