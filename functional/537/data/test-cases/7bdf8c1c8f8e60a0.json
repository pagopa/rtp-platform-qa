{"uid":"7bdf8c1c8f8e60a0","name":"An RTP callback with status ACTC is successfully received","fullName":"tests.test_callback#test_receive_rtp_callback_DS_05_ACTC_compliant","historyId":"4b2bd33e1a231657dc457cb580c88b06","time":{"start":1758270990702,"stop":1758270991257,"duration":555},"status":"broken","statusMessage":"requests.exceptions.HTTPError: 502 Server Error: Bad Gateway for url: https://api-mcshared.uat.cstar.pagopa.it/auth/token","statusTrace":"@allure.feature('RTP Callback')\n    @allure.story('Service provider sends a callback referred to an RTP with status ACTC')\n    @allure.title('An RTP callback with status ACTC is successfully received')\n    @pytest.mark.callback\n    @pytest.mark.happy_path\n    def test_receive_rtp_callback_DS_05_ACTC_compliant():\n        rtp_data = generate_rtp_data()\n    \n>       debtor_service_provider_access_token = get_valid_access_token(\n            client_id=secrets.debtor_service_provider.client_id,\n            client_secret=secrets.debtor_service_provider.client_secret,\n            access_token_function=get_access_token,\n        )\n\nfunctional-tests/tests/test_callback.py:158: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \napi/auth.py:8: in get_valid_access_token\n    token_response.raise_for_status()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <Response [502]>\n\n    def raise_for_status(self):\n        \"\"\"Raises :class:`HTTPError`, if one occurred.\"\"\"\n    \n        http_error_msg = \"\"\n        if isinstance(self.reason, bytes):\n            # We attempt to decode utf-8 first because some servers\n            # choose to localize their reason strings. If the string\n            # isn't utf-8, we fall back to iso-8859-1 for all other\n            # encodings. (See PR #3538)\n            try:\n                reason = self.reason.decode(\"utf-8\")\n            except UnicodeDecodeError:\n                reason = self.reason.decode(\"iso-8859-1\")\n        else:\n            reason = self.reason\n    \n        if 400 <= self.status_code < 500:\n            http_error_msg = (\n                f\"{self.status_code} Client Error: {reason} for url: {self.url}\"\n            )\n    \n        elif 500 <= self.status_code < 600:\n            http_error_msg = (\n                f\"{self.status_code} Server Error: {reason} for url: {self.url}\"\n            )\n    \n        if http_error_msg:\n>           raise HTTPError(http_error_msg, response=self)\nE           requests.exceptions.HTTPError: 502 Server Error: Bad Gateway for url: https://api-mcshared.uat.cstar.pagopa.it/auth/token\n\n/opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/requests/models.py:1026: HTTPError","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"_session_faker","time":{"start":1758270979519,"stop":1758270979579,"duration":60},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"afterStages":[],"labels":[{"name":"story","value":"Service provider sends a callback referred to an RTP with status ACTC"},{"name":"feature","value":"RTP Callback"},{"name":"tag","value":"happy_path"},{"name":"tag","value":"callback"},{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_callback"},{"name":"host","value":"runnervmf4ws1"},{"name":"thread","value":"2488-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_callback"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":51,"broken":19,"skipped":0,"passed":12,"unknown":0,"total":82},"items":[{"uid":"993828b623425239","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/536//#testresult/993828b623425239","status":"passed","time":{"start":1758266456493,"stop":1758266459539,"duration":3046}},{"uid":"2048cf39af7b8ad2","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/535//#testresult/2048cf39af7b8ad2","status":"passed","time":{"start":1758180045980,"stop":1758180050090,"duration":4110}},{"uid":"3f6ccbe10fe94c9","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/534//#testresult/3f6ccbe10fe94c9","status":"passed","time":{"start":1758093640795,"stop":1758093643843,"duration":3048}},{"uid":"27bfa431aa10efa1","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/533//#testresult/27bfa431aa10efa1","status":"passed","time":{"start":1758007302396,"stop":1758007305632,"duration":3236}},{"uid":"96eb9892f28dc5a7","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/532//#testresult/96eb9892f28dc5a7","status":"passed","time":{"start":1757920930620,"stop":1757920933567,"duration":2947}},{"uid":"4b80d73589aa22ca","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/531//#testresult/4b80d73589aa22ca","status":"passed","time":{"start":1757834370908,"stop":1757834375102,"duration":4194}},{"uid":"4eddb03983e05241","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/530//#testresult/4eddb03983e05241","status":"passed","time":{"start":1757747917138,"stop":1757747920144,"duration":3006}},{"uid":"26099b275c606761","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/529//#testresult/26099b275c606761","status":"passed","time":{"start":1757665828388,"stop":1757665832956,"duration":4568}},{"uid":"f261e0a9191ec2ce","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/528//#testresult/f261e0a9191ec2ce","status":"failed","statusDetails":"AssertionError: assert 403 == 200\n +  where 403 = <Response [403]>.status_code","time":{"start":1757661618201,"stop":1757661621833,"duration":3632}},{"uid":"2f74a82ce768f495","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/527//#testresult/2f74a82ce768f495","status":"failed","statusDetails":"AssertionError: assert 403 == 200\n +  where 403 = <Response [403]>.status_code","time":{"start":1757598319647,"stop":1757598322335,"duration":2688}},{"uid":"e2dbbd0e745a842c","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/526//#testresult/e2dbbd0e745a842c","status":"failed","statusDetails":"AssertionError: assert 403 == 200\n +  where 403 = <Response [403]>.status_code","time":{"start":1757575266812,"stop":1757575269509,"duration":2697}},{"uid":"106927a53784e0f4","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/525//#testresult/106927a53784e0f4","status":"failed","statusDetails":"AssertionError: assert 403 == 200\n +  where 403 = <Response [403]>.status_code","time":{"start":1757488967298,"stop":1757489022893,"duration":55595}},{"uid":"af03a1addbd69e2e","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/524//#testresult/af03a1addbd69e2e","status":"failed","statusDetails":"AssertionError: assert 403 == 200\n +  where 403 = <Response [403]>.status_code","time":{"start":1757402498019,"stop":1757402500464,"duration":2445}},{"uid":"f6e414654d2c05f1","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/523//#testresult/f6e414654d2c05f1","status":"failed","statusDetails":"AssertionError: assert 403 == 200\n +  where 403 = <Response [403]>.status_code","time":{"start":1757316095218,"stop":1757316097580,"duration":2362}},{"uid":"7d172f3fd54bdf8c","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/522//#testresult/7d172f3fd54bdf8c","status":"failed","statusDetails":"AssertionError: assert 403 == 200\n +  where 403 = <Response [403]>.status_code","time":{"start":1757229583369,"stop":1757229585966,"duration":2597}},{"uid":"c9195dc34d969ebf","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/521//#testresult/c9195dc34d969ebf","status":"failed","statusDetails":"AssertionError: assert 403 == 200\n +  where 403 = <Response [403]>.status_code","time":{"start":1757143116352,"stop":1757143120364,"duration":4012}},{"uid":"f1f46c49bc1b96b0","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/520//#testresult/f1f46c49bc1b96b0","status":"broken","statusDetails":"requests.exceptions.HTTPError: 502 Server Error: Bad Gateway for url: https://api-mcshared.uat.cstar.pagopa.it/auth/token","time":{"start":1757057090689,"stop":1757057091470,"duration":781}},{"uid":"851993df363be7c1","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/519//#testresult/851993df363be7c1","status":"failed","statusDetails":"AssertionError: assert 403 == 200\n +  where 403 = <Response [403]>.status_code","time":{"start":1756969624488,"stop":1756969626924,"duration":2436}},{"uid":"d9b9fa6296685844","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/518//#testresult/d9b9fa6296685844","status":"failed","statusDetails":"AssertionError: assert 403 == 200\n +  where 403 = <Response [403]>.status_code","time":{"start":1756910835626,"stop":1756910839622,"duration":3996}},{"uid":"833b5881e5a49c63","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/517//#testresult/833b5881e5a49c63","status":"failed","statusDetails":"AssertionError: assert 403 == 200\n +  where 403 = <Response [403]>.status_code","time":{"start":1756883245502,"stop":1756883248281,"duration":2779}}]},"tags":["callback","happy_path"]},"source":"7bdf8c1c8f8e60a0.json","parameterValues":[]}