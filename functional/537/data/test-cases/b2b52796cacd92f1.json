{"uid":"b2b52796cacd92f1","name":"inexistent RTP -> empty body","fullName":"tests.test_get_rtp#test_get_rtp_not_found","historyId":"f374baeb8e6aa77fbe08e6036a22e13b","time":{"start":1758271088326,"stop":1758271088879,"duration":553},"status":"broken","statusMessage":"requests.exceptions.HTTPError: 502 Server Error: Bad Gateway for url: https://api-mcshared.uat.cstar.pagopa.it/auth/token","statusTrace":"@allure.feature('RTP Get')\n    @allure.story('Service provider retrieves an RTP')\n    @allure.title('inexistent RTP -> empty body')\n    @pytest.mark.get\n    @pytest.mark.unhappy_path\n    def test_get_rtp_not_found():\n        fake_rtp_id = str(uuid.uuid4())\n    \n>       token = get_valid_access_token(\n            client_id=secrets.rtp_reader.client_id,\n            client_secret=secrets.rtp_reader.client_secret,\n            access_token_function=get_access_token,\n        )\n\nfunctional-tests/tests/test_get_rtp.py:74: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \napi/auth.py:8: in get_valid_access_token\n    token_response.raise_for_status()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <Response [502]>\n\n    def raise_for_status(self):\n        \"\"\"Raises :class:`HTTPError`, if one occurred.\"\"\"\n    \n        http_error_msg = \"\"\n        if isinstance(self.reason, bytes):\n            # We attempt to decode utf-8 first because some servers\n            # choose to localize their reason strings. If the string\n            # isn't utf-8, we fall back to iso-8859-1 for all other\n            # encodings. (See PR #3538)\n            try:\n                reason = self.reason.decode(\"utf-8\")\n            except UnicodeDecodeError:\n                reason = self.reason.decode(\"iso-8859-1\")\n        else:\n            reason = self.reason\n    \n        if 400 <= self.status_code < 500:\n            http_error_msg = (\n                f\"{self.status_code} Client Error: {reason} for url: {self.url}\"\n            )\n    \n        elif 500 <= self.status_code < 600:\n            http_error_msg = (\n                f\"{self.status_code} Server Error: {reason} for url: {self.url}\"\n            )\n    \n        if http_error_msg:\n>           raise HTTPError(http_error_msg, response=self)\nE           requests.exceptions.HTTPError: 502 Server Error: Bad Gateway for url: https://api-mcshared.uat.cstar.pagopa.it/auth/token\n\n/opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/requests/models.py:1026: HTTPError","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"_session_faker","time":{"start":1758270979519,"stop":1758270979579,"duration":60},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"afterStages":[],"labels":[{"name":"feature","value":"RTP Get"},{"name":"story","value":"Service provider retrieves an RTP"},{"name":"tag","value":"unhappy_path"},{"name":"tag","value":"get"},{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_get_rtp"},{"name":"host","value":"runnervmf4ws1"},{"name":"thread","value":"2488-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_get_rtp"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":51,"broken":20,"skipped":0,"passed":78,"unknown":0,"total":149},"items":[{"uid":"aa8c4c66d175feb8","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/536//#testresult/aa8c4c66d175feb8","status":"passed","time":{"start":1758267109603,"stop":1758267110427,"duration":824}},{"uid":"71a765a1f1027556","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/535//#testresult/71a765a1f1027556","status":"passed","time":{"start":1758180713119,"stop":1758180714238,"duration":1119}},{"uid":"a6263d567bb908e8","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/534//#testresult/a6263d567bb908e8","status":"passed","time":{"start":1758094293531,"stop":1758094294350,"duration":819}},{"uid":"75003e99087e2db8","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/533//#testresult/75003e99087e2db8","status":"passed","time":{"start":1758007962186,"stop":1758007963077,"duration":891}},{"uid":"179e4d4cc6924cd","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/532//#testresult/179e4d4cc6924cd","status":"passed","time":{"start":1757921588808,"stop":1757921589559,"duration":751}},{"uid":"c52f06fdd63cdb0f","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/531//#testresult/c52f06fdd63cdb0f","status":"passed","time":{"start":1757835095254,"stop":1757835096400,"duration":1146}},{"uid":"9d481da0a7187d6d","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/530//#testresult/9d481da0a7187d6d","status":"passed","time":{"start":1757748738049,"stop":1757748738870,"duration":821}},{"uid":"ca1a8163cd9e7274","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/529//#testresult/ca1a8163cd9e7274","status":"passed","time":{"start":1757666499013,"stop":1757666500221,"duration":1208}},{"uid":"d56d17c26898f2d","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/528//#testresult/d56d17c26898f2d","status":"failed","statusDetails":"AssertionError: Status code: 403, body: \nassert 403 in (404, 204)\n +  where 403 = <Response [403]>.status_code","time":{"start":1757661691225,"stop":1757661692422,"duration":1197}},{"uid":"3d5b15490dedf31b","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/527//#testresult/3d5b15490dedf31b","status":"failed","statusDetails":"AssertionError: Status code: 403, body: \nassert 403 in (404, 204)\n +  where 403 = <Response [403]>.status_code","time":{"start":1757598396000,"stop":1757598396885,"duration":885}},{"uid":"5d66619d48712cb5","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/526//#testresult/5d66619d48712cb5","status":"failed","statusDetails":"AssertionError: Status code: 403, body: \nassert 403 in (404, 204)\n +  where 403 = <Response [403]>.status_code","time":{"start":1757575323905,"stop":1757575324795,"duration":890}},{"uid":"695b00f0a54ff41b","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/525//#testresult/695b00f0a54ff41b","status":"failed","statusDetails":"AssertionError: Status code: 403, body: \nassert 403 in (404, 204)\n +  where 403 = <Response [403]>.status_code","time":{"start":1757489076583,"stop":1757489077471,"duration":888}},{"uid":"cb5370ce82c31bee","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/524//#testresult/cb5370ce82c31bee","status":"failed","statusDetails":"AssertionError: Status code: 403, body: \nassert 403 in (404, 204)\n +  where 403 = <Response [403]>.status_code","time":{"start":1757402553942,"stop":1757402554696,"duration":754}},{"uid":"a8fe36b228eb87f2","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/523//#testresult/a8fe36b228eb87f2","status":"failed","statusDetails":"AssertionError: Status code: 403, body: \nassert 403 in (404, 204)\n +  where 403 = <Response [403]>.status_code","time":{"start":1757316148165,"stop":1757316148928,"duration":763}},{"uid":"529fcb6fed3c5ac","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/522//#testresult/529fcb6fed3c5ac","status":"failed","statusDetails":"AssertionError: Status code: 403, body: \nassert 403 in (404, 204)\n +  where 403 = <Response [403]>.status_code","time":{"start":1757229694444,"stop":1757229695255,"duration":811}},{"uid":"ce8e6b1e9746178a","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/521//#testresult/ce8e6b1e9746178a","status":"failed","statusDetails":"AssertionError: Status code: 403, body: \nassert 403 in (404, 204)\n +  where 403 = <Response [403]>.status_code","time":{"start":1757143257021,"stop":1757143258297,"duration":1276}},{"uid":"7c1067037ab800c3","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/520//#testresult/7c1067037ab800c3","status":"broken","statusDetails":"requests.exceptions.HTTPError: 502 Server Error: Bad Gateway for url: https://api-mcshared.uat.cstar.pagopa.it/auth/token","time":{"start":1757057137242,"stop":1757057137833,"duration":591}},{"uid":"65e4c10b7831d0c2","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/519//#testresult/65e4c10b7831d0c2","status":"failed","statusDetails":"AssertionError: Status code: 403, body: \nassert 403 in (404, 204)\n +  where 403 = <Response [403]>.status_code","time":{"start":1756969679522,"stop":1756969680332,"duration":810}},{"uid":"85ce41346e481aef","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/518//#testresult/85ce41346e481aef","status":"failed","statusDetails":"AssertionError: Status code: 403, body: \nassert 403 in (404, 204)\n +  where 403 = <Response [403]>.status_code","time":{"start":1756910913866,"stop":1756910915183,"duration":1317}},{"uid":"3f45928531cedb1e","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/517//#testresult/3f45928531cedb1e","status":"failed","statusDetails":"AssertionError: Status code: 403, body: \nassert 403 in (404, 204)\n +  where 403 = <Response [403]>.status_code","time":{"start":1756883300789,"stop":1756883301671,"duration":882}}]},"tags":["get","unhappy_path"]},"source":"b2b52796cacd92f1.json","parameterValues":[]}