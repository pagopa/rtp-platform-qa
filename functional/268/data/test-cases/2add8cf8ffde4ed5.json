{"uid":"2add8cf8ffde4ed5","name":"RTP callback is successfully received","fullName":"tests.test_callback#test_receive_rtp_callback","historyId":"564f1dce6aedb3cd53747bbee764bfb9","time":{"start":1743754330537,"stop":1743754330538,"duration":1},"status":"broken","statusMessage":"ValueError: Could not deserialize PKCS12 data","statusTrace":"@allure.feature('RTP Callback')\n    @allure.story('Service provider receives RTP callback')\n    @allure.title('RTP callback is successfully received')\n    @pytest.mark.callback\n    @pytest.mark.happy_path\n    def test_receive_rtp_callback():\n        rtp_data = generate_rtp_data()\n    \n>       cert, key = pfx_to_pem(secrets.debtor_service_provider_mock_PFX_base64,\n                               secrets.debtor_service_provider_mock_PFX_password_base64,\n                               config.cert_path,\n                               config.key_path)\n\nfunctional-tests/tests/test_callback.py:19: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nbase64_pfx = '', base64_password = '', cert_destination_path = 'config/cert.pem'\nkey_destination_path = 'config/key.pem'\n\n    def pfx_to_pem(base64_pfx, base64_password, cert_destination_path=None, key_destination_path=None):\n    \n        pfx_data = base64.b64decode(base64_pfx)\n        pfx_password = base64.b64decode(base64_password)\n    \n>       private_key, certificate, additional_certs = load_key_and_certificates(pfx_data, pfx_password)\nE       ValueError: Could not deserialize PKCS12 data\n\nutils/cryptography.py:21: ValueError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"_session_faker","time":{"start":1743754323121,"stop":1743754323183,"duration":62},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"afterStages":[],"labels":[{"name":"story","value":"Service provider receives RTP callback"},{"name":"feature","value":"RTP Callback"},{"name":"tag","value":"happy_path"},{"name":"tag","value":"callback"},{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_callback"},{"name":"host","value":"fv-az2241-191"},{"name":"thread","value":"2290-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_callback"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":18,"skipped":0,"passed":0,"unknown":0,"total":18},"items":[{"uid":"2aec45c1ee9164ef","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/267//#testresult/2aec45c1ee9164ef","status":"broken","statusDetails":"ValueError: Could not deserialize PKCS12 data","time":{"start":1743750399821,"stop":1743750399821,"duration":0}},{"uid":"1506441cba21da34","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/266//#testresult/1506441cba21da34","status":"broken","statusDetails":"ValueError: Could not deserialize PKCS12 data","time":{"start":1743664017315,"stop":1743664017315,"duration":0}},{"uid":"d924a5c5d0a5eba7","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/265//#testresult/d924a5c5d0a5eba7","status":"broken","statusDetails":"ValueError: Could not deserialize PKCS12 data","time":{"start":1743577624986,"stop":1743577624987,"duration":1}},{"uid":"108106a805f5e6cb","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/264//#testresult/108106a805f5e6cb","status":"broken","statusDetails":"ValueError: Could not deserialize PKCS12 data","time":{"start":1743523471476,"stop":1743523471476,"duration":0}},{"uid":"fbcfa7b97aabb497","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/263//#testresult/fbcfa7b97aabb497","status":"broken","statusDetails":"ValueError: Could not deserialize PKCS12 data","time":{"start":1743521034792,"stop":1743521034793,"duration":1}},{"uid":"29c65f7be148a9cd","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/262//#testresult/29c65f7be148a9cd","status":"broken","statusDetails":"ValueError: Could not deserialize PKCS12 data","time":{"start":1743491220317,"stop":1743491220318,"duration":1}},{"uid":"bf7a278e77d82b9e","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/261//#testresult/bf7a278e77d82b9e","status":"broken","statusDetails":"ValueError: Could not deserialize PKCS12 data","time":{"start":1743404833562,"stop":1743404833563,"duration":1}},{"uid":"1e92ebbd73db29fe","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/260//#testresult/1e92ebbd73db29fe","status":"broken","statusDetails":"ValueError: Could not deserialize PKCS12 data","time":{"start":1743318391385,"stop":1743318391386,"duration":1}},{"uid":"5f3bb9f47e7107a7","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/259//#testresult/5f3bb9f47e7107a7","status":"broken","statusDetails":"ValueError: Could not deserialize PKCS12 data","time":{"start":1743231993128,"stop":1743231993129,"duration":1}},{"uid":"566dec6657a0266c","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/258//#testresult/566dec6657a0266c","status":"broken","statusDetails":"ValueError: Could not deserialize PKCS12 data","time":{"start":1743145626701,"stop":1743145626701,"duration":0}},{"uid":"fe28442e8a5f565","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/257//#testresult/fe28442e8a5f565","status":"broken","statusDetails":"ValueError: Could not deserialize PKCS12 data","time":{"start":1743059220275,"stop":1743059220276,"duration":1}},{"uid":"12dbbf7110f4fb90","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/256//#testresult/12dbbf7110f4fb90","status":"broken","statusDetails":"ValueError: Could not deserialize PKCS12 data","time":{"start":1742972814194,"stop":1742972814195,"duration":1}},{"uid":"f16cce36bfa6c960","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/255//#testresult/f16cce36bfa6c960","status":"broken","statusDetails":"ValueError: Could not deserialize PKCS12 data","time":{"start":1742886423771,"stop":1742886423772,"duration":1}},{"uid":"3bf1646f1337cdc0","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/254//#testresult/3bf1646f1337cdc0","status":"broken","statusDetails":"ValueError: Could not deserialize PKCS12 data","time":{"start":1742800024487,"stop":1742800024487,"duration":0}},{"uid":"9519ad38b400393a","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/253//#testresult/9519ad38b400393a","status":"broken","statusDetails":"ValueError: Could not deserialize PKCS12 data","time":{"start":1742713595590,"stop":1742713595591,"duration":1}},{"uid":"36d1edc22f61cd6e","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/252//#testresult/36d1edc22f61cd6e","status":"broken","statusDetails":"ValueError: Could not deserialize PKCS12 data","time":{"start":1742627176058,"stop":1742627176059,"duration":1}},{"uid":"3b07398bac9c4be6","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/251//#testresult/3b07398bac9c4be6","status":"broken","statusDetails":"ValueError: Could not deserialize PKCS12 data","time":{"start":1742576847783,"stop":1742576847784,"duration":1}}]},"tags":["callback","happy_path"]},"source":"2add8cf8ffde4ed5.json","parameterValues":[]}