{"uid":"f6fb59857d483100","name":"An RTP is sent to ICCREA service with activated fiscal code","fullName":"functional-tests.tests.test_send_rtp#test_send_rtp_to_iccrea","historyId":"1eb8d3de0b6a65dd591cf5aa10130f4c","time":{"start":1760941476006,"stop":1760941479025,"duration":3019},"status":"failed","statusMessage":"AssertionError: assert 422 == 201\n +  where 422 = <Response [422]>.status_code","statusTrace":"@allure.feature('RTP Send')\n    @allure.story('Service provider sends an RTP to a provider')\n    @allure.title('An RTP is sent to ICCREA service with activated fiscal code')\n    @pytest.mark.send\n    @pytest.mark.happy_path\n    @pytest.mark.real_integration\n    @pytest.mark.iccrea\n    def test_send_rtp_to_iccrea():\n        rtp_data = generate_rtp_data(payer_id=secrets.iccrea_activated_fiscal_code)\n    \n        creditor_service_provider_access_token = get_valid_access_token(\n            client_id=secrets.creditor_service_provider.client_id,\n            client_secret=secrets.creditor_service_provider.client_secret,\n            access_token_function=get_access_token,\n        )\n    \n        send_response = send_rtp(\n            access_token=creditor_service_provider_access_token, rtp_payload=rtp_data\n        )\n>       assert send_response.status_code == 201\nE       assert 422 == 201\nE        +  where 422 = <Response [422]>.status_code\n\nfunctional-tests/tests/test_send_rtp.py:143: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"_session_faker","time":{"start":1760941408043,"stop":1760941408101,"duration":58},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"afterStages":[],"labels":[{"name":"feature","value":"RTP Send"},{"name":"story","value":"Service provider sends an RTP to a provider"},{"name":"tag","value":"iccrea"},{"name":"tag","value":"real_integration"},{"name":"tag","value":"happy_path"},{"name":"tag","value":"send"},{"name":"parentSuite","value":"functional-tests.tests"},{"name":"suite","value":"test_send_rtp"},{"name":"host","value":"runnervmzdgdc"},{"name":"thread","value":"2541-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"functional-tests.tests.test_send_rtp"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":15,"broken":0,"skipped":0,"passed":0,"unknown":0,"total":15},"items":[{"uid":"c397b97f7c067e2e","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/583//#testresult/c397b97f7c067e2e","status":"failed","statusDetails":"AssertionError: assert 422 == 201\n +  where 422 = <Response [422]>.status_code","time":{"start":1760854973935,"stop":1760854976808,"duration":2873}},{"uid":"3b4b4c9afe1fb4d5","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/582//#testresult/3b4b4c9afe1fb4d5","status":"failed","statusDetails":"AssertionError: assert 422 == 201\n +  where 422 = <Response [422]>.status_code","time":{"start":1760768509305,"stop":1760768512005,"duration":2700}},{"uid":"70e6360125ed66c6","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/581//#testresult/70e6360125ed66c6","status":"failed","statusDetails":"AssertionError: assert 422 == 201\n +  where 422 = <Response [422]>.status_code","time":{"start":1760682164493,"stop":1760682167331,"duration":2838}},{"uid":"183bfa9d63ac0806","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/580//#testresult/183bfa9d63ac0806","status":"failed","statusDetails":"AssertionError: assert 422 == 201\n +  where 422 = <Response [422]>.status_code","time":{"start":1760624534390,"stop":1760624538055,"duration":3665}},{"uid":"3c3fc442c6aee022","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/579//#testresult/3c3fc442c6aee022","status":"failed","statusDetails":"AssertionError: assert 422 == 201\n +  where 422 = <Response [422]>.status_code","time":{"start":1760619710285,"stop":1760619713505,"duration":3220}},{"uid":"a68d1a623a755da9","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/578//#testresult/a68d1a623a755da9","status":"failed","statusDetails":"AssertionError: assert 422 == 201\n +  where 422 = <Response [422]>.status_code","time":{"start":1760595819854,"stop":1760595823080,"duration":3226}},{"uid":"572fefce97ea83f8","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/577//#testresult/572fefce97ea83f8","status":"failed","statusDetails":"AssertionError: assert 422 == 201\n +  where 422 = <Response [422]>.status_code","time":{"start":1760523170930,"stop":1760523174419,"duration":3489}},{"uid":"f8df460f5acbff30","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/576//#testresult/f8df460f5acbff30","status":"failed","statusDetails":"AssertionError: assert 422 == 201\n +  where 422 = <Response [422]>.status_code","time":{"start":1760523068228,"stop":1760523071887,"duration":3659}},{"uid":"7625108e5c0705a7","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/575//#testresult/7625108e5c0705a7","status":"failed","statusDetails":"AssertionError: assert 422 == 201\n +  where 422 = <Response [422]>.status_code","time":{"start":1760522139615,"stop":1760522142893,"duration":3278}},{"uid":"1a86ee8fd00cdbde","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/574//#testresult/1a86ee8fd00cdbde","status":"failed","statusDetails":"AssertionError: assert 422 == 201\n +  where 422 = <Response [422]>.status_code","time":{"start":1760521361656,"stop":1760521364358,"duration":2702}},{"uid":"f54facc84d2940ce","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/573//#testresult/f54facc84d2940ce","status":"failed","statusDetails":"AssertionError: assert 422 == 201\n +  where 422 = <Response [422]>.status_code","time":{"start":1760520563191,"stop":1760520566314,"duration":3123}},{"uid":"e5b66a2f6e6a1f40","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/571//#testresult/e5b66a2f6e6a1f40","status":"failed","statusDetails":"AssertionError: assert 422 == 201\n +  where 422 = <Response [422]>.status_code","time":{"start":1760443989799,"stop":1760443992874,"duration":3075}},{"uid":"2de12fbccd33b8dc","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/570//#testresult/2de12fbccd33b8dc","status":"failed","statusDetails":"AssertionError: assert 422 == 201\n +  where 422 = <Response [422]>.status_code","time":{"start":1760439540176,"stop":1760439543136,"duration":2960}},{"uid":"a9d835e0a294f788","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/569//#testresult/a9d835e0a294f788","status":"failed","statusDetails":"AssertionError: assert 422 == 201\n +  where 422 = <Response [422]>.status_code","time":{"start":1760439333964,"stop":1760439337070,"duration":3106}}]},"tags":["iccrea","real_integration","send","happy_path"]},"source":"f6fb59857d483100.json","parameterValues":[]}