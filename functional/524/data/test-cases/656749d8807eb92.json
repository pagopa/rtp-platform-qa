{"uid":"656749d8807eb92","name":"RTP is successfully retrieved","fullName":"tests.test_get_rtp#test_get_rtp_success","historyId":"caeb9610ab96a7a077f09cf26a913a9a","time":{"start":1757402552032,"stop":1757402553937,"duration":1905},"status":"failed","statusMessage":"AssertionError: assert 403 == 200\n +  where 403 = <Response [403]>.status_code","statusTrace":"@allure.feature('RTP Get')\n    @allure.story('Service provider retrieves an RTP')\n    @allure.title('RTP is successfully retrieved')\n    @pytest.mark.get\n    @pytest.mark.happy_path\n    def test_get_rtp_success():\n        rtp_data = generate_rtp_data()\n    \n        debtor_service_provider_access_token = get_valid_access_token(\n            client_id=secrets.debtor_service_provider.client_id,\n            client_secret=secrets.debtor_service_provider.client_secret,\n            access_token_function=get_access_token,\n        )\n    \n        creditor_service_provider_access_token = get_valid_access_token(\n            client_id=secrets.creditor_service_provider.client_id,\n            client_secret=secrets.creditor_service_provider.client_secret,\n            access_token_function=get_access_token,\n        )\n    \n        activation_response = activate(\n            debtor_service_provider_access_token,\n            rtp_data['payer']['payerId'],\n            secrets.debtor_service_provider.service_provider_id,\n        )\n        assert activation_response.status_code == 201, 'Error activating debtor'\n    \n        send_response = send_rtp(\n            access_token=creditor_service_provider_access_token, rtp_payload=rtp_data\n        )\n        assert send_response.status_code == 201\n    \n        location = send_response.headers['Location']\n        resource_id = location.split('/')[-1]\n    \n        get_response = get_rtp(\n            access_token=creditor_service_provider_access_token, rtp_id=resource_id\n        )\n>       assert get_response.status_code == 200\nE       assert 403 == 200\nE        +  where 403 = <Response [403]>.status_code\n\nfunctional-tests/tests/test_get_rtp.py:54: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"_session_faker","time":{"start":1757402474888,"stop":1757402474947,"duration":59},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"afterStages":[],"labels":[{"name":"story","value":"Service provider retrieves an RTP"},{"name":"feature","value":"RTP Get"},{"name":"tag","value":"happy_path"},{"name":"tag","value":"get"},{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_get_rtp"},{"name":"host","value":"pkrvm7jw40e0xgp"},{"name":"thread","value":"2581-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_get_rtp"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":47,"broken":19,"skipped":0,"passed":70,"unknown":0,"total":136},"items":[{"uid":"ac7b8efe3de5ae3a","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/523//#testresult/ac7b8efe3de5ae3a","status":"failed","statusDetails":"AssertionError: assert 403 == 200\n +  where 403 = <Response [403]>.status_code","time":{"start":1757316146228,"stop":1757316148161,"duration":1933}},{"uid":"49af22cbcea7336c","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/522//#testresult/49af22cbcea7336c","status":"failed","statusDetails":"AssertionError: assert 403 == 200\n +  where 403 = <Response [403]>.status_code","time":{"start":1757229692128,"stop":1757229694440,"duration":2312}},{"uid":"69e336763d8d009c","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/521//#testresult/69e336763d8d009c","status":"failed","statusDetails":"AssertionError: assert 403 == 200\n +  where 403 = <Response [403]>.status_code","time":{"start":1757143253621,"stop":1757143257017,"duration":3396}},{"uid":"93edf57a48ac7c0","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/520//#testresult/93edf57a48ac7c0","status":"broken","statusDetails":"requests.exceptions.HTTPError: 502 Server Error: Bad Gateway for url: https://api-mcshared.uat.cstar.pagopa.it/auth/token","time":{"start":1757057136616,"stop":1757057137226,"duration":610}},{"uid":"7573928ce9113472","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/519//#testresult/7573928ce9113472","status":"failed","statusDetails":"AssertionError: assert 403 == 200\n +  where 403 = <Response [403]>.status_code","time":{"start":1756969677539,"stop":1756969679518,"duration":1979}},{"uid":"2f3a3603a47a789f","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/518//#testresult/2f3a3603a47a789f","status":"failed","statusDetails":"AssertionError: assert 403 == 200\n +  where 403 = <Response [403]>.status_code","time":{"start":1756910910590,"stop":1756910913862,"duration":3272}},{"uid":"84694b505d8829e4","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/517//#testresult/84694b505d8829e4","status":"failed","statusDetails":"AssertionError: assert 403 == 200\n +  where 403 = <Response [403]>.status_code","time":{"start":1756883298521,"stop":1756883300785,"duration":2264}},{"uid":"fbfb9937eed28eeb","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/516//#testresult/fbfb9937eed28eeb","status":"failed","statusDetails":"AssertionError: assert 403 == 200\n +  where 403 = <Response [403]>.status_code","time":{"start":1756798021401,"stop":1756798023251,"duration":1850}},{"uid":"310aac7f992e46b8","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/515//#testresult/310aac7f992e46b8","status":"failed","statusDetails":"AssertionError: assert 403 == 200\n +  where 403 = <Response [403]>.status_code","time":{"start":1756796895755,"stop":1756796897923,"duration":2168}},{"uid":"cf1db574ddfb5239","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/514//#testresult/cf1db574ddfb5239","status":"failed","statusDetails":"AssertionError: assert 403 == 200\n +  where 403 = <Response [403]>.status_code","time":{"start":1756719629247,"stop":1756719632555,"duration":3308}},{"uid":"399b8a1134a4a6f0","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/513//#testresult/399b8a1134a4a6f0","status":"failed","statusDetails":"AssertionError: assert 403 == 200\n +  where 403 = <Response [403]>.status_code","time":{"start":1756710578079,"stop":1756710580982,"duration":2903}},{"uid":"d80921494736112d","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/512//#testresult/d80921494736112d","status":"failed","statusDetails":"AssertionError: assert 403 == 200\n +  where 403 = <Response [403]>.status_code","time":{"start":1756624050864,"stop":1756624052819,"duration":1955}},{"uid":"b109adee554848f5","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/511//#testresult/b109adee554848f5","status":"failed","statusDetails":"AssertionError: assert 403 == 200\n +  where 403 = <Response [403]>.status_code","time":{"start":1756537642256,"stop":1756537644204,"duration":1948}},{"uid":"b33aa7d4fa7c9c7f","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/510//#testresult/b33aa7d4fa7c9c7f","status":"failed","statusDetails":"AssertionError: assert 403 == 200\n +  where 403 = <Response [403]>.status_code","time":{"start":1756451298556,"stop":1756451300776,"duration":2220}},{"uid":"22e46b50c1d2ea1d","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/509//#testresult/22e46b50c1d2ea1d","status":"failed","statusDetails":"AssertionError: assert 403 == 200\n +  where 403 = <Response [403]>.status_code","time":{"start":1756385958467,"stop":1756385961708,"duration":3241}},{"uid":"34e6e470e03f8987","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/508//#testresult/34e6e470e03f8987","status":"failed","statusDetails":"AssertionError: assert 403 == 200\n +  where 403 = <Response [403]>.status_code","time":{"start":1756364926491,"stop":1756364929738,"duration":3247}},{"uid":"77fb708d1dbadd2e","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/507//#testresult/77fb708d1dbadd2e","status":"failed","statusDetails":"AssertionError: assert 403 == 200\n +  where 403 = <Response [403]>.status_code","time":{"start":1756278512714,"stop":1756278516240,"duration":3526}},{"uid":"91165db1a045347d","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/506//#testresult/91165db1a045347d","status":"failed","statusDetails":"AssertionError: assert 403 == 200\n +  where 403 = <Response [403]>.status_code","time":{"start":1756192107795,"stop":1756192109937,"duration":2142}},{"uid":"81235ed558a966cb","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/505//#testresult/81235ed558a966cb","status":"failed","statusDetails":"AssertionError: assert 403 == 200\n +  where 403 = <Response [403]>.status_code","time":{"start":1756105755499,"stop":1756105757460,"duration":1961}},{"uid":"7fc2c6b0c16be3a5","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/504//#testresult/7fc2c6b0c16be3a5","status":"failed","statusDetails":"AssertionError: assert 403 == 200\n +  where 403 = <Response [403]>.status_code","time":{"start":1756019243123,"stop":1756019245070,"duration":1947}}]},"tags":["get","happy_path"]},"source":"656749d8807eb92.json","parameterValues":[]}