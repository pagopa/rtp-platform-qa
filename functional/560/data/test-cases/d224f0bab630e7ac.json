{"uid":"d224f0bab630e7ac","name":"Unauthorized callback due to wrong certificate serial","fullName":"tests.test_callback#test_fail_send_rtp_callback_wrong_certificate_serial_DS_04b_compliant","historyId":"2cc2abb0fda2edeacf4f957d8bb07347","time":{"start":1759920835008,"stop":1759920835429,"duration":421},"status":"failed","statusMessage":"AssertionError: Expecting error from callback, expected 403 got 500\nassert 500 == 403\n +  where 500 = <Response [500]>.status_code","statusTrace":"@allure.feature('RTP Callback')\n    @allure.story('Service provider sends a callback referred to an RTP')\n    @allure.title('Unauthorized callback due to wrong certificate serial')\n    @pytest.mark.callback\n    @pytest.mark.unhappy_path\n    def test_fail_send_rtp_callback_wrong_certificate_serial_DS_04b_compliant():\n        callback_data = generate_callback_data_DS_04b_compliant(BIC='MOCKSP01')\n    \n        cert, key = pfx_to_pem(\n            secrets.debtor_service_provider_mock_PFX_base64,\n            secrets.debtor_service_provider_mock_PFX_password_base64,\n            config.cert_path,\n            config.key_path,\n        )\n    \n        callback_response = srtp_callback(\n            rtp_payload=callback_data, cert_path=cert, key_path=key\n        )\n>       assert (\n            callback_response.status_code == 403\n        ), f\"Expecting error from callback, expected 403 got {callback_response.status_code}\"\nE       AssertionError: Expecting error from callback, expected 403 got 500\nE       assert 500 == 403\nE        +  where 500 = <Response [500]>.status_code\n\nfunctional-tests/tests/test_callback.py:241: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"_session_faker","time":{"start":1759920815183,"stop":1759920815241,"duration":58},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"afterStages":[],"labels":[{"name":"story","value":"Service provider sends a callback referred to an RTP"},{"name":"feature","value":"RTP Callback"},{"name":"tag","value":"unhappy_path"},{"name":"tag","value":"callback"},{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_callback"},{"name":"host","value":"runnervmwhb2z"},{"name":"thread","value":"2485-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_callback"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":6,"broken":10,"skipped":0,"passed":238,"unknown":0,"total":254},"items":[{"uid":"5445f825ed99edd0","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/559//#testresult/5445f825ed99edd0","status":"failed","statusDetails":"AssertionError: Expecting error from callback, expected 403 got 500\nassert 500 == 403\n +  where 500 = <Response [500]>.status_code","time":{"start":1759919594574,"stop":1759919595117,"duration":543}},{"uid":"99d287e6a6bb6f92","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/558//#testresult/99d287e6a6bb6f92","status":"failed","statusDetails":"AssertionError: Expecting error from callback, expected 403 got 500\nassert 500 == 403\n +  where 500 = <Response [500]>.status_code","time":{"start":1759908052839,"stop":1759908053423,"duration":584}},{"uid":"4b1d704d7d668a0a","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/557//#testresult/4b1d704d7d668a0a","status":"passed","time":{"start":1759821687651,"stop":1759821688052,"duration":401}},{"uid":"a4c2ea2b15a7d7f5","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/556//#testresult/a4c2ea2b15a7d7f5","status":"passed","time":{"start":1759735339003,"stop":1759735339677,"duration":674}},{"uid":"16fc772c17cc83e3","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/555//#testresult/16fc772c17cc83e3","status":"passed","time":{"start":1759648716288,"stop":1759648716734,"duration":446}},{"uid":"75b4518fd08a8606","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/554//#testresult/75b4518fd08a8606","status":"passed","time":{"start":1759562356881,"stop":1759562357557,"duration":676}},{"uid":"aaf1cea868be9f54","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/553//#testresult/aaf1cea868be9f54","status":"passed","time":{"start":1759483558371,"stop":1759483559059,"duration":688}},{"uid":"979654ab9fa8cf14","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/552//#testresult/979654ab9fa8cf14","status":"passed","time":{"start":1759476036127,"stop":1759476036847,"duration":720}},{"uid":"3746fca526a33aa0","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/551//#testresult/3746fca526a33aa0","status":"passed","time":{"start":1759389611524,"stop":1759389611947,"duration":423}},{"uid":"52b96e80c5191b2b","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/550//#testresult/52b96e80c5191b2b","status":"passed","time":{"start":1759315765578,"stop":1759315766062,"duration":484}},{"uid":"a31505e6cae1fe8b","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/549//#testresult/a31505e6cae1fe8b","status":"passed","time":{"start":1759303341512,"stop":1759303341939,"duration":427}},{"uid":"383c3f7d960c92e8","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/548//#testresult/383c3f7d960c92e8","status":"passed","time":{"start":1759216949307,"stop":1759216949816,"duration":509}},{"uid":"73d947e44830fd59","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/547//#testresult/73d947e44830fd59","status":"passed","time":{"start":1759130562729,"stop":1759130563187,"duration":458}},{"uid":"cfc1153cfc4740b6","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/546//#testresult/cfc1153cfc4740b6","status":"passed","time":{"start":1759043964726,"stop":1759043965365,"duration":639}},{"uid":"77a9d48e82303382","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/545//#testresult/77a9d48e82303382","status":"passed","time":{"start":1758957529924,"stop":1758957530369,"duration":445}},{"uid":"23f1a4b2e21d0819","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/544//#testresult/23f1a4b2e21d0819","status":"passed","time":{"start":1758871287233,"stop":1758871287902,"duration":669}},{"uid":"55cf629bbb71a7b8","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/543//#testresult/55cf629bbb71a7b8","status":"passed","time":{"start":1758784901958,"stop":1758784902379,"duration":421}},{"uid":"53c246192422c26e","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/542//#testresult/53c246192422c26e","status":"passed","time":{"start":1758698496904,"stop":1758698501494,"duration":4590}},{"uid":"8f8937deadc10f71","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/541//#testresult/8f8937deadc10f71","status":"passed","time":{"start":1758612127572,"stop":1758612128203,"duration":631}},{"uid":"1e798524a52c4cd9","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/540//#testresult/1e798524a52c4cd9","status":"passed","time":{"start":1758525790921,"stop":1758525791648,"duration":727}}]},"tags":["callback","unhappy_path"]},"source":"d224f0bab630e7ac.json","parameterValues":[]}