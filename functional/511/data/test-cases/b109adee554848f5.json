{"uid":"b109adee554848f5","name":"RTP is successfully retrieved","fullName":"tests.test_get_rtp#test_get_rtp_success","historyId":"caeb9610ab96a7a077f09cf26a913a9a","time":{"start":1756537642256,"stop":1756537644204,"duration":1948},"status":"failed","statusMessage":"AssertionError: assert 403 == 200\n +  where 403 = <Response [403]>.status_code","statusTrace":"@allure.feature('RTP Get')\n    @allure.story('Service provider retrieves an RTP')\n    @allure.title('RTP is successfully retrieved')\n    @pytest.mark.get\n    @pytest.mark.happy_path\n    def test_get_rtp_success():\n        rtp_data = generate_rtp_data()\n    \n        debtor_service_provider_access_token = get_valid_access_token(\n            client_id=secrets.debtor_service_provider.client_id,\n            client_secret=secrets.debtor_service_provider.client_secret,\n            access_token_function=get_access_token,\n        )\n    \n        creditor_service_provider_access_token = get_valid_access_token(\n            client_id=secrets.creditor_service_provider.client_id,\n            client_secret=secrets.creditor_service_provider.client_secret,\n            access_token_function=get_access_token,\n        )\n    \n        activation_response = activate(\n            debtor_service_provider_access_token,\n            rtp_data['payer']['payerId'],\n            secrets.debtor_service_provider.service_provider_id,\n        )\n        assert activation_response.status_code == 201, 'Error activating debtor'\n    \n        send_response = send_rtp(\n            access_token=creditor_service_provider_access_token, rtp_payload=rtp_data\n        )\n        assert send_response.status_code == 201\n    \n        location = send_response.headers['Location']\n        resource_id = location.split('/')[-1]\n    \n        get_response = get_rtp(\n            access_token=creditor_service_provider_access_token, rtp_id=resource_id\n        )\n>       assert get_response.status_code == 200\nE       assert 403 == 200\nE        +  where 403 = <Response [403]>.status_code\n\nfunctional-tests/tests/test_get_rtp.py:54: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"_session_faker","time":{"start":1756537570746,"stop":1756537570804,"duration":58},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"afterStages":[],"labels":[{"name":"feature","value":"RTP Get"},{"name":"story","value":"Service provider retrieves an RTP"},{"name":"tag","value":"happy_path"},{"name":"tag","value":"get"},{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_get_rtp"},{"name":"host","value":"pkrvmccyg1gnepe"},{"name":"thread","value":"2552-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_get_rtp"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":35,"broken":18,"skipped":0,"passed":70,"unknown":0,"total":123},"items":[{"uid":"b33aa7d4fa7c9c7f","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/510//#testresult/b33aa7d4fa7c9c7f","status":"failed","statusDetails":"AssertionError: assert 403 == 200\n +  where 403 = <Response [403]>.status_code","time":{"start":1756451298556,"stop":1756451300776,"duration":2220}},{"uid":"22e46b50c1d2ea1d","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/509//#testresult/22e46b50c1d2ea1d","status":"failed","statusDetails":"AssertionError: assert 403 == 200\n +  where 403 = <Response [403]>.status_code","time":{"start":1756385958467,"stop":1756385961708,"duration":3241}},{"uid":"34e6e470e03f8987","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/508//#testresult/34e6e470e03f8987","status":"failed","statusDetails":"AssertionError: assert 403 == 200\n +  where 403 = <Response [403]>.status_code","time":{"start":1756364926491,"stop":1756364929738,"duration":3247}},{"uid":"77fb708d1dbadd2e","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/507//#testresult/77fb708d1dbadd2e","status":"failed","statusDetails":"AssertionError: assert 403 == 200\n +  where 403 = <Response [403]>.status_code","time":{"start":1756278512714,"stop":1756278516240,"duration":3526}},{"uid":"91165db1a045347d","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/506//#testresult/91165db1a045347d","status":"failed","statusDetails":"AssertionError: assert 403 == 200\n +  where 403 = <Response [403]>.status_code","time":{"start":1756192107795,"stop":1756192109937,"duration":2142}},{"uid":"81235ed558a966cb","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/505//#testresult/81235ed558a966cb","status":"failed","statusDetails":"AssertionError: assert 403 == 200\n +  where 403 = <Response [403]>.status_code","time":{"start":1756105755499,"stop":1756105757460,"duration":1961}},{"uid":"7fc2c6b0c16be3a5","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/504//#testresult/7fc2c6b0c16be3a5","status":"failed","statusDetails":"AssertionError: assert 403 == 200\n +  where 403 = <Response [403]>.status_code","time":{"start":1756019243123,"stop":1756019245070,"duration":1947}},{"uid":"e6a46b4b5616fa17","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/503//#testresult/e6a46b4b5616fa17","status":"failed","statusDetails":"AssertionError: assert 403 == 200\n +  where 403 = <Response [403]>.status_code","time":{"start":1755932835369,"stop":1755932837634,"duration":2265}},{"uid":"1ab93a84a4913c5","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/502//#testresult/1ab93a84a4913c5","status":"failed","statusDetails":"AssertionError: assert 403 == 200\n +  where 403 = <Response [403]>.status_code","time":{"start":1755847701501,"stop":1755847704597,"duration":3096}},{"uid":"417ebe2248168a3e","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/501//#testresult/417ebe2248168a3e","status":"failed","statusDetails":"AssertionError: assert 403 == 200\n +  where 403 = <Response [403]>.status_code","time":{"start":1755846491506,"stop":1755846493686,"duration":2180}},{"uid":"7ee0f358e8ae3b29","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/500//#testresult/7ee0f358e8ae3b29","status":"failed","statusDetails":"AssertionError: assert 403 == 200\n +  where 403 = <Response [403]>.status_code","time":{"start":1755843956669,"stop":1755843958910,"duration":2241}},{"uid":"543b1d6f7ec163b0","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/499//#testresult/543b1d6f7ec163b0","status":"failed","statusDetails":"AssertionError: assert 403 == 200\n +  where 403 = <Response [403]>.status_code","time":{"start":1755760224927,"stop":1755760226889,"duration":1962}},{"uid":"ae0a025b77b807dc","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/498//#testresult/ae0a025b77b807dc","status":"failed","statusDetails":"AssertionError: assert 403 == 200\n +  where 403 = <Response [403]>.status_code","time":{"start":1755673743953,"stop":1755673747151,"duration":3198}},{"uid":"19b507bf22165f75","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/497//#testresult/19b507bf22165f75","status":"failed","statusDetails":"AssertionError: assert 403 == 200\n +  where 403 = <Response [403]>.status_code","time":{"start":1755613344434,"stop":1755613346457,"duration":2023}},{"uid":"17f3667fb1984016","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/496//#testresult/17f3667fb1984016","status":"failed","statusDetails":"AssertionError: assert 403 == 200\n +  where 403 = <Response [403]>.status_code","time":{"start":1755588525729,"stop":1755588527636,"duration":1907}},{"uid":"a85710d35d5ec880","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/495//#testresult/a85710d35d5ec880","status":"failed","statusDetails":"AssertionError: assert 403 == 200\n +  where 403 = <Response [403]>.status_code","time":{"start":1755587314444,"stop":1755587316725,"duration":2281}},{"uid":"933f79cbcdca929b","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/494//#testresult/933f79cbcdca929b","status":"failed","statusDetails":"AssertionError: assert 403 == 200\n +  where 403 = <Response [403]>.status_code","time":{"start":1755501057368,"stop":1755501060685,"duration":3317}},{"uid":"262866390a0642ae","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/493//#testresult/262866390a0642ae","status":"failed","statusDetails":"AssertionError: assert 403 == 200\n +  where 403 = <Response [403]>.status_code","time":{"start":1755414452671,"stop":1755414454617,"duration":1946}},{"uid":"c253d4490e2d268a","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/492//#testresult/c253d4490e2d268a","status":"failed","statusDetails":"AssertionError: assert 403 == 200\n +  where 403 = <Response [403]>.status_code","time":{"start":1755328045228,"stop":1755328047059,"duration":1831}},{"uid":"1a219bf2f9887015","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/491//#testresult/1a219bf2f9887015","status":"failed","statusDetails":"AssertionError: assert 403 == 200\n +  where 403 = <Response [403]>.status_code","time":{"start":1755241730146,"stop":1755241732122,"duration":1976}}]},"tags":["get","happy_path"]},"source":"b109adee554848f5.json","parameterValues":[]}