{"uid":"e2750dc5a556c340","name":"Happy path: a newly published debt position with VALID status is updated","fullName":"tests.test_debt_position_update#test_update_valid_newly_published_debt_position","historyId":"679ff7081714ee69d34bdd290b398cfd","time":{"start":1759130886826,"stop":1759130887188,"duration":362},"description":"\nVerify that a newly published debt position with VALID status\ncan be updated and changes are reflected in RTP lookups.\n","descriptionHtml":"<p>Verify that a newly published debt position with VALID status<br />\ncan be updated and changes are reflected in RTP lookups.</p>\n","status":"failed","statusMessage":"AssertionError: assert 502 == 201\n +  where 502 = <Response [502]>.status_code","statusTrace":"setup_data = {'debtor_fc': 'MJRBTC66D15X000J', 'iupd': '97b6d82d4b704bc19', 'iuv': '07718799654285996', 'organization_id': '02438750586', ...}\n\n    @allure.feature('Debt Positions')\n    @allure.story('Update Valid Newly Published Debt Position')\n    @pytest.mark.debt_positions\n    @pytest.mark.send\n    @pytest.mark.happy_path\n    @pytest.mark.timeout(TEST_TIMEOUT_SEC)\n    def test_update_valid_newly_published_debt_position(setup_data: dict[str, Any]) -> None:\n        \"\"\"\n        Verify that a newly published debt position with VALID status\n        can be updated and changes are reflected in RTP lookups.\n        \"\"\"\n        allure.dynamic.title('Happy path: a newly published debt position with VALID status is updated')\n    \n>       update_data = _setup_update_test(setup_data, 'VALID', to_publish=False)\n\nfunctional-tests/tests/test_debt_position_update.py:111: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nsetup_data = {'debtor_fc': 'MJRBTC66D15X000J', 'iupd': '97b6d82d4b704bc19', 'iuv': '07718799654285996', 'organization_id': '02438750586', ...}\nstatus = 'VALID', to_publish = False, waiting_time_sec = 5\n\n    def _setup_update_test(\n        setup_data: dict[str, Any],\n        status: str,\n        to_publish: bool = True,\n        waiting_time_sec: int = 5,\n    ) -> UpdateCheckData:\n        \"\"\"\n        Create and update a debt position, returning both the original\n        and updated values for validation.\n    \n        Args:\n            setup_data (dict): Pre-computed setup data including identifiers and keys.\n            status (str): Expected status of the created/updated debt position.\n            to_publish (bool, optional): Whether to publish immediately. Defaults to True.\n            waiting_time_sec (int, optional): Delay between creation/update and checks. Defaults to 5.\n    \n        Returns:\n            UpdateCheckData: Structured data for validating the update.\n        \"\"\"\n        subscription_key = setup_data['subscription_key']\n        organization_id = setup_data['organization_id']\n        debtor_fc = setup_data['debtor_fc']\n        iupd = setup_data['iupd']\n        iuv = setup_data['iuv']\n    \n        payload = create_debt_position_payload(debtor_fc=debtor_fc, iupd=iupd, iuv=iuv)\n        create_response = create_debt_position(subscription_key, organization_id, payload, to_publish=to_publish)\n>       assert create_response.status_code == 201\nE       assert 502 == 201\nE        +  where 502 = <Response [502]>.status_code\n\nfunctional-tests/tests/test_debt_position_update.py:242: AssertionError","flaky":true,"newFailed":true,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"_session_faker","time":{"start":1759130537816,"stop":1759130537875,"duration":59},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"setup_data","time":{"start":1759130886080,"stop":1759130886826,"duration":746},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"afterStages":[],"labels":[{"name":"story","value":"Update Valid Newly Published Debt Position"},{"name":"feature","value":"Debt Positions"},{"name":"tag","value":"timeout(300)"},{"name":"tag","value":"happy_path"},{"name":"tag","value":"send"},{"name":"tag","value":"debt_positions"},{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_debt_position_update"},{"name":"host","value":"runnervm3ublj"},{"name":"thread","value":"2574-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_debt_position_update"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":11,"broken":1,"skipped":0,"passed":7,"unknown":0,"total":19},"items":[{"uid":"8d00d162a15b588e","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/546//#testresult/8d00d162a15b588e","status":"passed","time":{"start":1759044308864,"stop":1759044321423,"duration":12559}},{"uid":"9a1b5612e91013e1","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/545//#testresult/9a1b5612e91013e1","status":"passed","time":{"start":1758957654518,"stop":1758957696607,"duration":42089}},{"uid":"32233a5cbb79cd73","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/544//#testresult/32233a5cbb79cd73","status":"passed","time":{"start":1758871929851,"stop":1758871973148,"duration":43297}},{"uid":"eb1ceafc3c5d025","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/543//#testresult/eb1ceafc3c5d025","status":"failed","statusDetails":"Failed: Timeout (>300.0s) from pytest-timeout.","time":{"start":1758785534193,"stop":1758785833445,"duration":299252}},{"uid":"1d64fc8e6e53e648","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/542//#testresult/1d64fc8e6e53e648","status":"failed","statusDetails":"Failed: Timeout (>300.0s) from pytest-timeout.","time":{"start":1758699139441,"stop":1758699438313,"duration":298872}},{"uid":"1f2f65f0b8a8e086","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/541//#testresult/1f2f65f0b8a8e086","status":"passed","time":{"start":1758612500704,"stop":1758612543809,"duration":43105}},{"uid":"fa604a3a6987e441","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/540//#testresult/fa604a3a6987e441","status":"passed","time":{"start":1758526167545,"stop":1758526210861,"duration":43316}},{"uid":"5cdf0019b46b8d3b","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/539//#testresult/5cdf0019b46b8d3b","status":"passed","time":{"start":1758439510427,"stop":1758439553479,"duration":43052}},{"uid":"4ab4fd1d92aec1f4","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/538//#testresult/4ab4fd1d92aec1f4","status":"passed","time":{"start":1758353170249,"stop":1758353213428,"duration":43179}},{"uid":"b1e312bff9e4cb3b","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/537//#testresult/b1e312bff9e4cb3b","status":"broken","statusDetails":"requests.exceptions.HTTPError: 502 Server Error: Bad Gateway for url: https://api-mcshared.uat.cstar.pagopa.it/auth/token","time":{"start":1758271013809,"stop":1758271013809,"duration":0}},{"uid":"e8a190e08d2b1844","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/536//#testresult/e8a190e08d2b1844","status":"failed","statusDetails":"Failed: Timeout (>300.0s) from pytest-timeout.","time":{"start":1758266497703,"stop":1758266796870,"duration":299167}},{"uid":"7ff076a0b835a0ef","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/535//#testresult/7ff076a0b835a0ef","status":"failed","statusDetails":"Failed: Timeout (>300.0s) from pytest-timeout.","time":{"start":1758180094681,"stop":1758180393546,"duration":298865}},{"uid":"7fee5691b4d37aad","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/534//#testresult/7fee5691b4d37aad","status":"failed","statusDetails":"Failed: Timeout (>300.0s) from pytest-timeout.","time":{"start":1758093681016,"stop":1758093980198,"duration":299182}},{"uid":"eae142450345823a","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/533//#testresult/eae142450345823a","status":"failed","statusDetails":"Failed: Timeout (>300.0s) from pytest-timeout.","time":{"start":1758007344394,"stop":1758007643488,"duration":299094}},{"uid":"2b1902f2150cefe8","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/532//#testresult/2b1902f2150cefe8","status":"failed","statusDetails":"Failed: Timeout (>300.0s) from pytest-timeout.","time":{"start":1757920970355,"stop":1757921269598,"duration":299243}},{"uid":"4ce2105306e4a424","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/531//#testresult/4ce2105306e4a424","status":"failed","statusDetails":"Failed: Timeout (>300.0s) from pytest-timeout.","time":{"start":1757834479163,"stop":1757834778008,"duration":298845}},{"uid":"697613f1aee615da","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/530//#testresult/697613f1aee615da","status":"failed","statusDetails":"Failed: Timeout (>300.0s) from pytest-timeout.","time":{"start":1757748005417,"stop":1757748304590,"duration":299173}},{"uid":"edb259144e594bc1","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/529//#testresult/edb259144e594bc1","status":"failed","statusDetails":"Failed: Timeout (>300.0s) from pytest-timeout.","time":{"start":1757665880618,"stop":1757666179359,"duration":298741}}]},"tags":["debt_positions","timeout(300)","send","happy_path"]},"source":"e2750dc5a556c340.json","parameterValues":[]}