{"uid":"8ebcf00b9e312569","name":"The activation request bust contain lower case fiscal code","fullName":"tests.test_activation#test_cannot_activate_debtor_lower_fiscal_code","historyId":"971059c719c6f6b5223e6fd267753e9e","time":{"start":1740899138736,"stop":1740899140739,"duration":2003},"status":"failed","statusMessage":"AssertionError: assert 401 == 400\n +  where 401 = <Response [401]>.status_code","statusTrace":"@allure.feature('Activation')\n    @allure.story('Debtor activation')\n    @allure.title('The activation request bust contain lower case fiscal code')\n    @pytest.mark.auth\n    @pytest.mark.activation\n    @pytest.mark.unhappy_path\n    def test_cannot_activate_debtor_lower_fiscal_code():\n        access_token = get_valid_access_token(client_id=secrets.debtor_service_provider.client_id,\n                                              client_secret=secrets.debtor_service_provider.client_secret)\n        debtor_fc = fake_fc().lower()\n    \n        res = activate(access_token, debtor_fc, secrets.debtor_service_provider.service_provider_id)\n>       assert res.status_code == 400\nE       assert 401 == 400\nE        +  where 401 = <Response [401]>.status_code\n\nfunctional-tests/tests/test_activation.py:59: AssertionError","flaky":true,"newFailed":true,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"_session_faker","time":{"start":1740899133980,"stop":1740899134037,"duration":57},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"afterStages":[],"labels":[{"name":"feature","value":"Activation"},{"name":"story","value":"Debtor activation"},{"name":"tag","value":"unhappy_path"},{"name":"tag","value":"activation"},{"name":"tag","value":"auth"},{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_activation"},{"name":"host","value":"fv-az1267-395"},{"name":"thread","value":"2277-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_activation"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":18,"broken":0,"skipped":0,"passed":34,"unknown":0,"total":52},"items":[{"uid":"d4564831461c2401","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/219//#testresult/d4564831461c2401","status":"passed","time":{"start":1740812737036,"stop":1740812738674,"duration":1638}},{"uid":"b734b89d10f32188","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/218//#testresult/b734b89d10f32188","status":"passed","time":{"start":1740726395792,"stop":1740726397355,"duration":1563}},{"uid":"8287ac1807a88434","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/217//#testresult/8287ac1807a88434","status":"failed","statusDetails":"AssertionError: assert 401 == 400\n +  where 401 = <Response [401]>.status_code","time":{"start":1740639983808,"stop":1740639985613,"duration":1805}},{"uid":"50384f58e780da9","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/216//#testresult/50384f58e780da9","status":"passed","time":{"start":1740577970406,"stop":1740577972659,"duration":2253}},{"uid":"9998612b22c89994","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/215//#testresult/9998612b22c89994","status":"failed","statusDetails":"AssertionError: assert 401 == 400\n +  where 401 = <Response [401]>.status_code","time":{"start":1740553588236,"stop":1740553590235,"duration":1999}},{"uid":"f51bc6f8fbb0421b","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/214//#testresult/f51bc6f8fbb0421b","status":"failed","statusDetails":"AssertionError: assert 401 == 400\n +  where 401 = <Response [401]>.status_code","time":{"start":1740467180667,"stop":1740467182877,"duration":2210}},{"uid":"6fcdf74bb4d469b4","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/213//#testresult/6fcdf74bb4d469b4","status":"passed","time":{"start":1740391809264,"stop":1740391810847,"duration":1583}},{"uid":"7263c541c616a0e4","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/212//#testresult/7263c541c616a0e4","status":"failed","statusDetails":"AssertionError: assert 'Pattern.acti...er.fiscalCode' == 'Pattern'\n  \n  - Pattern\n  + Pattern.activationReqDtoMono.payer.fiscalCode","time":{"start":1740380808967,"stop":1740380810808,"duration":1841}},{"uid":"b7fbe978637860ff","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/211//#testresult/b7fbe978637860ff","status":"failed","statusDetails":"AssertionError: assert 401 == 400\n +  where 401 = <Response [401]>.status_code","time":{"start":1740294341983,"stop":1740294344152,"duration":2169}},{"uid":"bf2ce3d136850ba0","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/210//#testresult/bf2ce3d136850ba0","status":"failed","statusDetails":"AssertionError: assert 401 == 400\n +  where 401 = <Response [401]>.status_code","time":{"start":1740207933574,"stop":1740207935320,"duration":1746}},{"uid":"b1ca9edea6075672","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/209//#testresult/b1ca9edea6075672","status":"failed","statusDetails":"AssertionError: assert 'Pattern.acti...er.fiscalCode' == 'Pattern'\n  \n  - Pattern\n  + Pattern.activationReqDtoMono.payer.fiscalCode","time":{"start":1740144044800,"stop":1740144046590,"duration":1790}},{"uid":"4545273f1e2839b6","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/208//#testresult/4545273f1e2839b6","status":"failed","statusDetails":"AssertionError: assert 401 == 400\n +  where 401 = <Response [401]>.status_code","time":{"start":1740121603033,"stop":1740121604866,"duration":1833}},{"uid":"ba5368f36a733fa8","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/207//#testresult/ba5368f36a733fa8","status":"failed","statusDetails":"AssertionError: assert 'Pattern.acti...er.fiscalCode' == 'Pattern'\n  \n  - Pattern\n  + Pattern.activationReqDtoMono.payer.fiscalCode","time":{"start":1740039470040,"stop":1740039471739,"duration":1699}},{"uid":"67bdfa71062f5da6","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/206//#testresult/67bdfa71062f5da6","status":"failed","statusDetails":"AssertionError: assert 401 == 400\n +  where 401 = <Response [401]>.status_code","time":{"start":1740035188365,"stop":1740035191414,"duration":3049}},{"uid":"c261b7cf3fe144e2","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/205//#testresult/c261b7cf3fe144e2","status":"failed","statusDetails":"AssertionError: assert 'Pattern.acti...er.fiscalCode' == 'Pattern'\n  \n  - Pattern\n  + Pattern.activationReqDtoMono.payer.fiscalCode","time":{"start":1739977923905,"stop":1739977925605,"duration":1700}},{"uid":"70434ca0e57006a0","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/204//#testresult/70434ca0e57006a0","status":"failed","statusDetails":"AssertionError: assert 'Pattern.acti...er.fiscalCode' == 'Pattern'\n  \n  - Pattern\n  + Pattern.activationReqDtoMono.payer.fiscalCode","time":{"start":1739948768039,"stop":1739948769698,"duration":1659}},{"uid":"349d1df47608a950","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/203//#testresult/349d1df47608a950","status":"failed","statusDetails":"AssertionError: assert 'Pattern.acti...er.fiscalCode' == 'Pattern'\n  \n  - Pattern\n  + Pattern.activationReqDtoMono.payer.fiscalCode","time":{"start":1739909364163,"stop":1739909366027,"duration":1864}},{"uid":"9747ed53b44b747f","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/202//#testresult/9747ed53b44b747f","status":"failed","statusDetails":"AssertionError: assert 401 == 400\n +  where 401 = <Response [401]>.status_code","time":{"start":1739862378816,"stop":1739862381427,"duration":2611}},{"uid":"c5be828148de6137","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/201//#testresult/c5be828148de6137","status":"failed","statusDetails":"AssertionError: assert 401 == 400\n +  where 401 = <Response [401]>.status_code","time":{"start":1739776001754,"stop":1739776003948,"duration":2194}},{"uid":"b5b6383a8fad9538","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/200//#testresult/b5b6383a8fad9538","status":"failed","statusDetails":"AssertionError: assert 401 == 400\n +  where 401 = <Response [401]>.status_code","time":{"start":1739689529095,"stop":1739689530758,"duration":1663}}]},"tags":["auth","activation","unhappy_path"]},"source":"8ebcf00b9e312569.json","parameterValues":[]}