{"uid":"8419d436f2c10528","name":"An RTP is sent through CBI API","fullName":"tests.test_debtor_service_provider_availability#test_send_rtp_to_cbi","historyId":"f80da3262bf8ce0e665c096b1873cbf4","time":{"start":1749193628287,"stop":1749193629273,"duration":986},"status":"failed","statusMessage":"AssertionError: assert 400 == 201\n +  where 400 = <Response [400]>.status_code","statusTrace":"@allure.feature('RTP Send')\n    @allure.story('Service provider sends an RTP to CBI directly')\n    @allure.title('An RTP is sent through CBI API')\n    @pytest.mark.send\n    @pytest.mark.happy_path\n    @pytest.mark.cbi\n    def test_send_rtp_to_cbi():\n        rtp_data = generate_rtp_data()\n        cbi_payload = generate_cbi_rtp_data(rtp_data)\n    \n        auth = client_credentials_to_auth_token(\n            secrets.CBI_client_id, secrets.CBI_client_secret\n        )\n        cert, key = pfx_to_pem(\n            secrets.CBI_client_PFX_base64,\n            secrets.CBI_client_PFX_password_base64,\n            config.cert_path,\n            config.key_path,\n        )\n        cbi_token = get_cbi_access_token(cert, key, auth)\n    \n        response = send_srtp_to_cbi(f\"Bearer {cbi_token}\", cbi_payload)\n>       assert response.status_code == 201\nE       assert 400 == 201\nE        +  where 400 = <Response [400]>.status_code\n\nfunctional-tests/tests/test_debtor_service_provider_availability.py:55: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"_session_faker","time":{"start":1749193610746,"stop":1749193610802,"duration":56},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"afterStages":[],"labels":[{"name":"feature","value":"RTP Send"},{"name":"story","value":"Service provider sends an RTP to CBI directly"},{"name":"tag","value":"cbi"},{"name":"tag","value":"happy_path"},{"name":"tag","value":"send"},{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_debtor_service_provider_availability"},{"name":"host","value":"pkrvmf6wy0o8zjz"},{"name":"thread","value":"2534-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_debtor_service_provider_availability"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":11,"broken":0,"skipped":0,"passed":0,"unknown":0,"total":11},"items":[{"uid":"3184957d5c59650c","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/359//#testresult/3184957d5c59650c","status":"failed","statusDetails":"AssertionError: assert 400 == 201\n +  where 400 = <Response [400]>.status_code","time":{"start":1749107258512,"stop":1749107260556,"duration":2044}},{"uid":"8a21f0ca16f11985","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/358//#testresult/8a21f0ca16f11985","status":"failed","statusDetails":"AssertionError: assert 400 == 201\n +  where 400 = <Response [400]>.status_code","time":{"start":1749020838883,"stop":1749020839944,"duration":1061}},{"uid":"182f19c17800aad8","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/357//#testresult/182f19c17800aad8","status":"failed","statusDetails":"AssertionError: assert 400 == 201\n +  where 400 = <Response [400]>.status_code","time":{"start":1748956574248,"stop":1748956575104,"duration":856}},{"uid":"3bc78e635dafa159","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/356//#testresult/3bc78e635dafa159","status":"failed","statusDetails":"AssertionError: assert 500 == 201\n +  where 500 = <Response [500]>.status_code","time":{"start":1748953139140,"stop":1748953140072,"duration":932}},{"uid":"2d8931d2ef2f65e2","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/355//#testresult/2d8931d2ef2f65e2","status":"failed","statusDetails":"AssertionError: assert 400 == 201\n +  where 400 = <Response [400]>.status_code","time":{"start":1748934482716,"stop":1748934483732,"duration":1016}},{"uid":"a489e4b5e4d076c6","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/354//#testresult/a489e4b5e4d076c6","status":"failed","statusDetails":"AssertionError: assert 400 == 201\n +  where 400 = <Response [400]>.status_code","time":{"start":1748848079712,"stop":1748848080985,"duration":1273}},{"uid":"71b1951e0085cd2d","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/353//#testresult/71b1951e0085cd2d","status":"failed","statusDetails":"AssertionError: assert 500 == 201\n +  where 500 = <Response [500]>.status_code","time":{"start":1748761639858,"stop":1748761641699,"duration":1841}},{"uid":"b861bd0265ff7282","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/352//#testresult/b861bd0265ff7282","status":"failed","statusDetails":"AssertionError: assert 400 == 201\n +  where 400 = <Response [400]>.status_code","time":{"start":1748675226443,"stop":1748675227559,"duration":1116}},{"uid":"e5a18d951be51a04","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/351//#testresult/e5a18d951be51a04","status":"failed","statusDetails":"AssertionError: assert 400 == 201\n +  where 400 = <Response [400]>.status_code","time":{"start":1748588844109,"stop":1748588845902,"duration":1793}},{"uid":"fa2ae55543f3b051","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/350//#testresult/fa2ae55543f3b051","status":"failed","statusDetails":"AssertionError: assert 400 == 201\n +  where 400 = <Response [400]>.status_code","time":{"start":1748534039120,"stop":1748534040144,"duration":1024}}]},"tags":["cbi","send","happy_path"]},"source":"8419d436f2c10528.json","parameterValues":[]}