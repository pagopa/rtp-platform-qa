{"uid":"ba8450ecc273d9b3","name":"An RTP is sent through CBI API","fullName":"functional-tests.tests.test_debtor_service_provider_availability#test_send_rtp_to_cbi","historyId":"02bce6347ef196fe199a14c6e2a830f5","time":{"start":1761752098338,"stop":1761752104898,"duration":6560},"status":"failed","statusMessage":"AssertionError: assert 400 == 201\n +  where 400 = <Response [400]>.status_code","statusTrace":"@allure.feature('RTP Send')\n    @allure.story('Service provider sends an RTP to CBI directly')\n    @allure.title('An RTP is sent through CBI API')\n    @pytest.mark.send\n    @pytest.mark.happy_path\n    @pytest.mark.cbi\n    def test_send_rtp_to_cbi():\n        rtp_data = generate_rtp_data()\n        cbi_payload = generate_epc_rtp_data(rtp_data, bic='UNCRITMM')\n    \n        auth = client_credentials_to_auth_token(\n            secrets.CBI_client_id, secrets.CBI_client_secret\n        )\n        cert, key = pfx_to_pem(\n            secrets.CBI_client_PFX_base64,\n            secrets.CBI_client_PFX_password_base64,\n            config.cert_path,\n            config.key_path,\n        )\n        cbi_token = get_cbi_access_token(cert, key, auth)\n        response = send_srtp_to_cbi(f\"Bearer {cbi_token}\", cbi_payload)\n>       assert response.status_code == 201\nE       assert 400 == 201\nE        +  where 400 = <Response [400]>.status_code\n\nfunctional-tests/tests/test_debtor_service_provider_availability.py:57: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"_session_faker","time":{"start":1761752064454,"stop":1761752064516,"duration":62},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"afterStages":[],"labels":[{"name":"story","value":"Service provider sends an RTP to CBI directly"},{"name":"feature","value":"RTP Send"},{"name":"tag","value":"cbi"},{"name":"tag","value":"happy_path"},{"name":"tag","value":"send"},{"name":"parentSuite","value":"functional-tests.tests"},{"name":"suite","value":"test_debtor_service_provider_availability"},{"name":"host","value":"runnervmwhb2z"},{"name":"thread","value":"2485-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"functional-tests.tests.test_debtor_service_provider_availability"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":12,"broken":0,"skipped":0,"passed":15,"unknown":0,"total":27},"items":[{"uid":"b5e02878ea3f006","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/595//#testresult/b5e02878ea3f006","status":"failed","statusDetails":"AssertionError: assert 400 == 201\n +  where 400 = <Response [400]>.status_code","time":{"start":1761719097058,"stop":1761719104254,"duration":7196}},{"uid":"865d5873f6e5b037","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/594//#testresult/865d5873f6e5b037","status":"failed","statusDetails":"AssertionError: assert 400 == 201\n +  where 400 = <Response [400]>.status_code","time":{"start":1761632726311,"stop":1761632733791,"duration":7480}},{"uid":"69d8f4c790e65a80","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/593//#testresult/69d8f4c790e65a80","status":"failed","statusDetails":"AssertionError: assert 400 == 201\n +  where 400 = <Response [400]>.status_code","time":{"start":1761546381544,"stop":1761546393494,"duration":11950}},{"uid":"8391a0e2bc04525a","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/592//#testresult/8391a0e2bc04525a","status":"failed","statusDetails":"AssertionError: assert 400 == 201\n +  where 400 = <Response [400]>.status_code","time":{"start":1761459737018,"stop":1761459743397,"duration":6379}},{"uid":"33cbb194b404c46b","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/591//#testresult/33cbb194b404c46b","status":"failed","statusDetails":"AssertionError: assert 400 == 201\n +  where 400 = <Response [400]>.status_code","time":{"start":1761373295198,"stop":1761373301825,"duration":6627}},{"uid":"13233e6202408a8a","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/590//#testresult/13233e6202408a8a","status":"failed","statusDetails":"AssertionError: assert 400 == 201\n +  where 400 = <Response [400]>.status_code","time":{"start":1761286977191,"stop":1761286983924,"duration":6733}},{"uid":"57c30f77d6b33cc3","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/589//#testresult/57c30f77d6b33cc3","status":"failed","statusDetails":"AssertionError: assert 400 == 201\n +  where 400 = <Response [400]>.status_code","time":{"start":1761200593543,"stop":1761200600178,"duration":6635}},{"uid":"51271c9edcc662cb","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/588//#testresult/51271c9edcc662cb","status":"failed","statusDetails":"AssertionError: assert 400 == 201\n +  where 400 = <Response [400]>.status_code","time":{"start":1761114256468,"stop":1761114262939,"duration":6471}},{"uid":"1519a0f88bb5c010","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/587//#testresult/1519a0f88bb5c010","status":"failed","statusDetails":"AssertionError: assert 400 == 201\n +  where 400 = <Response [400]>.status_code","time":{"start":1761053831558,"stop":1761053838585,"duration":7027}},{"uid":"58c488005d40eaba","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/586//#testresult/58c488005d40eaba","status":"failed","statusDetails":"AssertionError: assert 400 == 201\n +  where 400 = <Response [400]>.status_code","time":{"start":1761040686135,"stop":1761040687957,"duration":1822}},{"uid":"919aa6f91a3a086c","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/585//#testresult/919aa6f91a3a086c","status":"passed","time":{"start":1761027807918,"stop":1761027813791,"duration":5873}},{"uid":"2295d46ba7cbc754","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/584//#testresult/2295d46ba7cbc754","status":"passed","time":{"start":1760941446422,"stop":1760941453913,"duration":7491}},{"uid":"dbde7bd86822e115","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/583//#testresult/dbde7bd86822e115","status":"passed","time":{"start":1760854945236,"stop":1760854953104,"duration":7868}},{"uid":"fcd38610fe5b5988","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/582//#testresult/fcd38610fe5b5988","status":"passed","time":{"start":1760768475268,"stop":1760768483923,"duration":8655}},{"uid":"40646063cfa12da1","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/581//#testresult/40646063cfa12da1","status":"passed","time":{"start":1760682138472,"stop":1760682143632,"duration":5160}},{"uid":"2685018314bdc3e9","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/580//#testresult/2685018314bdc3e9","status":"passed","time":{"start":1760624499014,"stop":1760624504238,"duration":5224}},{"uid":"f3668a50b978261e","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/579//#testresult/f3668a50b978261e","status":"passed","time":{"start":1760619677621,"stop":1760619682683,"duration":5062}},{"uid":"bc68e832e3b2a25d","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/578//#testresult/bc68e832e3b2a25d","status":"passed","time":{"start":1760595791962,"stop":1760595797168,"duration":5206}},{"uid":"a3eae5f7d0c261a8","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/577//#testresult/a3eae5f7d0c261a8","status":"passed","time":{"start":1760523139709,"stop":1760523142916,"duration":3207}},{"uid":"4f1c513023b6ddf9","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/576//#testresult/4f1c513023b6ddf9","status":"passed","time":{"start":1760523041495,"stop":1760523045092,"duration":3597}}]},"tags":["cbi","send","happy_path"]},"source":"ba8450ecc273d9b3.json","parameterValues":[]}