{"uid":"1e6da8f94158a962","name":"Send GPD message with registry payee_id and verify RTP creation","fullName":"tests.test_producer_gpd_message#test_send_producer_gpd_message_valid_registry_payee","historyId":"c854b43abd6efa1924754b5bc31c20b5","time":{"start":1760513128841,"stop":1760513140570,"duration":11729},"status":"failed","statusMessage":"Failed: Failed to send registry_payee message after 3 attempts","statusTrace":"@allure.feature('GPD Message')\n    @allure.story('Send GPD message to queue with valid payee from registry')\n    @allure.title('Send GPD message with registry payee_id and verify RTP creation')\n    @pytest.mark.producer_gpd_message\n    @pytest.mark.happy_path\n    @pytest.mark.timeout(TEST_TIMEOUT_SEC)\n    def test_send_producer_gpd_message_valid_registry_payee():\n    \n        debtor_fc = activate_new_debtor()\n    \n        payee_registry_token = get_valid_access_token(\n            client_id=secrets.pagopa_integration_payee_registry.client_id,\n            client_secret=secrets.pagopa_integration_payee_registry.client_secret,\n            access_token_function=get_access_token\n        )\n    \n        payee_response = get_payee_registry(payee_registry_token)\n        assert payee_response.status_code == 200, f\"Failed to get payees: {payee_response.text}\"\n    \n        payees_data = payee_response.json()\n        assert 'payees' in payees_data and len(payees_data['payees']) > 0, 'No payees found in registry'\n    \n        registry_payees = payees_data['payees']\n        registry_payee_id = None\n    \n        for payee in registry_payees:\n            if payee['payeeId'] == '80015010723':\n                registry_payee_id = payee['payeeId']\n                break\n    \n        if not registry_payee_id:\n            registry_payee_id = registry_payees[0]['payeeId']\n    \n        common_iuv = '12445678901234067'\n        common_nav = f\"3{common_iuv}\"\n    \n        timestamp = 1768442371790 + 10000000\n    \n        payload = generate_producer_gpd_message_payload(\n            operation='CREATE',\n            ec_tax_code=registry_payee_id,\n            amount=30000,\n            status='VALID',\n            overrides={\n                'iuv': common_iuv,\n                'nav': common_nav,\n                'timestamp': timestamp,\n                'debtor_tax_code': debtor_fc\n            }\n        )\n    \n>       response = send_message_with_retry(payload, 'registry_payee')\n\nfunctional-tests/tests/test_producer_gpd_message.py:200: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\npayload = {'amount': 30000, 'debtor_tax_code': 'TLSBLD38D41X000L', 'description': 'YdMVqES8GFxggSfZtdRQyW1M52xrLeNGGCDcoe LpUjmfuzdXNDgKNyyPUwWD1sY', 'due_date': 1763105130486, ...}\nmessage_label = 'registry_payee', max_retries = 3, retry_delay = 5\n\n    def send_message_with_retry(payload, message_label='', max_retries=3, retry_delay=5):\n        \"\"\"Helper function to send a GPD message with retry mechanism.\n    \n        Args:\n            payload (dict): The message payload to send\n            message_label (str): A label for the message for logging purposes\n            max_retries (int): Maximum number of retry attempts\n            retry_delay (int): Seconds to wait between retry attempts\n    \n        Returns:\n            requests.Response: The API response if successful\n    \n        Raises:\n            AssertionError: If all retries fail\n        \"\"\"\n        for attempt in range(max_retries):\n            try:\n                print(f\"Sending {message_label} message (attempt {attempt+1}/{max_retries})...\")\n                response = send_producer_gpd_message(payload)\n    \n                if response.status_code == 200:\n                    print(f\"{message_label} message sent successfully\")\n                    return response\n                elif 'RequestTimedOutError' in response.text:\n                    print(f\"Timeout detected: {response.text}\")\n                    if attempt < max_retries - 1:\n                        print(f\"Waiting {retry_delay} seconds before retrying...\")\n                        time.sleep(retry_delay)\n                    continue\n                else:\n                    assert response.status_code == 200, f\"Failed to send {message_label} message: {response.text}\"\n            except Exception as e:\n                if attempt < max_retries - 1:\n                    print(f\"Error sending: {str(e)}. Retrying in {retry_delay} seconds...\")\n                    time.sleep(retry_delay)\n    \n>       pytest.fail(f\"Failed to send {message_label} message after {max_retries} attempts\")\nE       Failed: Failed to send registry_payee message after 3 attempts\n\nutils/producer_gpd_utils.py:50: Failed","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"_session_faker","time":{"start":1760512946085,"stop":1760512946145,"duration":60},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"status":"failed","statusMessage":"Failed: Failed to send registry_payee message after 3 attempts","statusTrace":"@allure.feature('GPD Message')\n    @allure.story('Send GPD message to queue with valid payee from registry')\n    @allure.title('Send GPD message with registry payee_id and verify RTP creation')\n    @pytest.mark.producer_gpd_message\n    @pytest.mark.happy_path\n    @pytest.mark.timeout(TEST_TIMEOUT_SEC)\n    def test_send_producer_gpd_message_valid_registry_payee():\n    \n        debtor_fc = activate_new_debtor()\n    \n        payee_registry_token = get_valid_access_token(\n            client_id=secrets.pagopa_integration_payee_registry.client_id,\n            client_secret=secrets.pagopa_integration_payee_registry.client_secret,\n            access_token_function=get_access_token\n        )\n    \n        payee_response = get_payee_registry(payee_registry_token)\n        assert payee_response.status_code == 200, f\"Failed to get payees: {payee_response.text}\"\n    \n        payees_data = payee_response.json()\n        assert 'payees' in payees_data and len(payees_data['payees']) > 0, 'No payees found in registry'\n    \n        registry_payees = payees_data['payees']\n        registry_payee_id = None\n    \n        for payee in registry_payees:\n            if payee['payeeId'] == '80015010723':\n                registry_payee_id = payee['payeeId']\n                break\n    \n        if not registry_payee_id:\n            registry_payee_id = registry_payees[0]['payeeId']\n    \n        common_iuv = '12445678901234067'\n        common_nav = f\"3{common_iuv}\"\n    \n        timestamp = 1768442371790 + 10000000\n    \n        payload = generate_producer_gpd_message_payload(\n            operation='CREATE',\n            ec_tax_code=registry_payee_id,\n            amount=30000,\n            status='VALID',\n            overrides={\n                'iuv': common_iuv,\n                'nav': common_nav,\n                'timestamp': timestamp,\n                'debtor_tax_code': debtor_fc\n            }\n        )\n    \n>       response = send_message_with_retry(payload, 'registry_payee')\n\nfunctional-tests/tests/test_producer_gpd_message.py:200: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\npayload = {'amount': 30000, 'debtor_tax_code': 'TLSBLD38D41X000L', 'description': 'YdMVqES8GFxggSfZtdRQyW1M52xrLeNGGCDcoe LpUjmfuzdXNDgKNyyPUwWD1sY', 'due_date': 1763105130486, ...}\nmessage_label = 'registry_payee', max_retries = 3, retry_delay = 5\n\n    def send_message_with_retry(payload, message_label='', max_retries=3, retry_delay=5):\n        \"\"\"Helper function to send a GPD message with retry mechanism.\n    \n        Args:\n            payload (dict): The message payload to send\n            message_label (str): A label for the message for logging purposes\n            max_retries (int): Maximum number of retry attempts\n            retry_delay (int): Seconds to wait between retry attempts\n    \n        Returns:\n            requests.Response: The API response if successful\n    \n        Raises:\n            AssertionError: If all retries fail\n        \"\"\"\n        for attempt in range(max_retries):\n            try:\n                print(f\"Sending {message_label} message (attempt {attempt+1}/{max_retries})...\")\n                response = send_producer_gpd_message(payload)\n    \n                if response.status_code == 200:\n                    print(f\"{message_label} message sent successfully\")\n                    return response\n                elif 'RequestTimedOutError' in response.text:\n                    print(f\"Timeout detected: {response.text}\")\n                    if attempt < max_retries - 1:\n                        print(f\"Waiting {retry_delay} seconds before retrying...\")\n                        time.sleep(retry_delay)\n                    continue\n                else:\n                    assert response.status_code == 200, f\"Failed to send {message_label} message: {response.text}\"\n            except Exception as e:\n                if attempt < max_retries - 1:\n                    print(f\"Error sending: {str(e)}. Retrying in {retry_delay} seconds...\")\n                    time.sleep(retry_delay)\n    \n>       pytest.fail(f\"Failed to send {message_label} message after {max_retries} attempts\")\nE       Failed: Failed to send registry_payee message after 3 attempts\n\nutils/producer_gpd_utils.py:50: Failed","steps":[],"attachments":[{"uid":"abdeae59fbe66ba0","name":"stdout","source":"abdeae59fbe66ba0.txt","type":"text/plain","size":947}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},"afterStages":[],"labels":[{"name":"story","value":"Send GPD message to queue with valid payee from registry"},{"name":"feature","value":"GPD Message"},{"name":"tag","value":"timeout(300)"},{"name":"tag","value":"happy_path"},{"name":"tag","value":"producer_gpd_message"},{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_producer_gpd_message"},{"name":"host","value":"runnervmwhb2z"},{"name":"thread","value":"2578-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_producer_gpd_message"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":16,"broken":1,"skipped":0,"passed":0,"unknown":0,"total":17},"items":[{"uid":"460ca0fb86f3242e","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/568//#testresult/460ca0fb86f3242e","status":"failed","statusDetails":"Failed: Failed to send registry_payee message after 3 attempts","time":{"start":1760434987301,"stop":1760435000184,"duration":12883}},{"uid":"b593660ebfb345c6","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/567//#testresult/b593660ebfb345c6","status":"failed","statusDetails":"Failed: Failed to send registry_payee message after 3 attempts","time":{"start":1760427039265,"stop":1760427051060,"duration":11795}},{"uid":"48001dd9e92bdb9d","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/566//#testresult/48001dd9e92bdb9d","status":"failed","statusDetails":"Failed: Failed to send registry_payee message after 3 attempts","time":{"start":1760340668034,"stop":1760340680479,"duration":12445}},{"uid":"b19938055620a3d2","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/565//#testresult/b19938055620a3d2","status":"failed","statusDetails":"Failed: Failed to send registry_payee message after 3 attempts","time":{"start":1760254055400,"stop":1760254067842,"duration":12442}},{"uid":"ae5ed1ce4918aa61","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/564//#testresult/ae5ed1ce4918aa61","status":"failed","statusDetails":"Failed: Failed to send registry_payee message after 3 attempts","time":{"start":1760167617937,"stop":1760167629440,"duration":11503}},{"uid":"24049911f23e168e","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/563//#testresult/24049911f23e168e","status":"failed","statusDetails":"Failed: Failed to send registry_payee message after 3 attempts","time":{"start":1760081332126,"stop":1760081343854,"duration":11728}},{"uid":"714f0a3f1b13cec","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/562//#testresult/714f0a3f1b13cec","status":"failed","statusDetails":"Failed: Failed to send registry_payee message after 3 attempts","time":{"start":1759994963021,"stop":1759994974870,"duration":11849}},{"uid":"178192aa10d584b0","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/561//#testresult/178192aa10d584b0","status":"failed","statusDetails":"Failed: Failed to send registry_payee message after 3 attempts","time":{"start":1759929494280,"stop":1759929506202,"duration":11922}},{"uid":"479b8ace6568e9ef","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/560//#testresult/479b8ace6568e9ef","status":"failed","statusDetails":"Failed: Failed to send registry_payee message after 3 attempts","time":{"start":1759921288935,"stop":1759921300370,"duration":11435}},{"uid":"e120d87e635e9516","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/559//#testresult/e120d87e635e9516","status":"failed","statusDetails":"Failed: Failed to send registry_payee message after 3 attempts","time":{"start":1759920055443,"stop":1759920066937,"duration":11494}},{"uid":"6bff4706fa47925e","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/558//#testresult/6bff4706fa47925e","status":"broken","statusDetails":"requests.exceptions.HTTPError: 502 Server Error: Bad Gateway for url: https://api-mcshared.uat.cstar.pagopa.it/auth/token","time":{"start":1759908350538,"stop":1759908351020,"duration":482}},{"uid":"53c2b7bce61e029e","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/557//#testresult/53c2b7bce61e029e","status":"failed","statusDetails":"Failed: Failed to send registry_payee message after 3 attempts","time":{"start":1759822148429,"stop":1759822159888,"duration":11459}},{"uid":"c0202e016f6dc1ea","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/556//#testresult/c0202e016f6dc1ea","status":"failed","statusDetails":"Failed: Failed to send registry_payee message after 3 attempts","time":{"start":1759735733208,"stop":1759735745890,"duration":12682}},{"uid":"d8286e42bc25905d","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/555//#testresult/d8286e42bc25905d","status":"failed","statusDetails":"Failed: Failed to send registry_payee message after 3 attempts","time":{"start":1759650027333,"stop":1759650038859,"duration":11526}},{"uid":"667b7831a398b4f7","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/554//#testresult/667b7831a398b4f7","status":"failed","statusDetails":"Failed: Failed to send registry_payee message after 3 attempts","time":{"start":1759563691146,"stop":1759563703625,"duration":12479}},{"uid":"78ead9508a9888e3","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/553//#testresult/78ead9508a9888e3","status":"failed","statusDetails":"Failed: Failed to send registry_payee message after 3 attempts","time":{"start":1759484855563,"stop":1759484868070,"duration":12507}}]},"tags":["timeout(300)","producer_gpd_message","happy_path"]},"source":"1e6da8f94158a962.json","parameterValues":[]}