{"uid":"53d9d485dcb4b881","name":"An RTP callback is successfully received","fullName":"tests.test_callback#test_receive_rtp_callback_DS_04b_compliant","historyId":"475e3c0708b05c2b7bfae9db8dc283af","time":{"start":1748588827402,"stop":1748588828303,"duration":901},"status":"failed","statusMessage":"AssertionError: Error from callback, expected 200 got 400\nassert 400 == 200\n +  where 400 = <Response [400]>.status_code","statusTrace":"@allure.feature('RTP Callback')\n    @allure.story('Service provider sends a callback referred to an RTP')\n    @allure.title('An RTP callback is successfully received')\n    @pytest.mark.callback\n    @pytest.mark.happy_path\n    def test_receive_rtp_callback_DS_04b_compliant():\n        callback_data = generate_callback_data_DS_04b_compliant()\n    \n        cert, key = pfx_to_pem(secrets.debtor_service_provider_mock_PFX_base64,\n                               secrets.debtor_service_provider_mock_PFX_password_base64,\n                               config.cert_path,\n                               config.key_path)\n    \n        callback_response = srtp_callback(rtp_payload=callback_data,\n                                          cert_path=cert,\n                                          key_path=key)\n>       assert callback_response.status_code == 200, f'Error from callback, expected 200 got {callback_response.status_code}'\nE       AssertionError: Error from callback, expected 200 got 400\nE       assert 400 == 200\nE        +  where 400 = <Response [400]>.status_code\n\nfunctional-tests/tests/test_callback.py:28: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"_session_faker","time":{"start":1748588815232,"stop":1748588815293,"duration":61},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"afterStages":[],"labels":[{"name":"story","value":"Service provider sends a callback referred to an RTP"},{"name":"feature","value":"RTP Callback"},{"name":"tag","value":"happy_path"},{"name":"tag","value":"callback"},{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_callback"},{"name":"host","value":"pkrvmf6wy0o8zjz"},{"name":"thread","value":"2593-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_callback"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":3,"broken":1,"skipped":0,"passed":50,"unknown":0,"total":54},"items":[{"uid":"7088ac15e68b8e5","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/350//#testresult/7088ac15e68b8e5","status":"failed","statusDetails":"AssertionError: Error from callback, expected 200 got 400\nassert 400 == 200\n +  where 400 = <Response [400]>.status_code","time":{"start":1748534028006,"stop":1748534028622,"duration":616}},{"uid":"732b2f29e7424f8d","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/349//#testresult/732b2f29e7424f8d","status":"passed","time":{"start":1748502447591,"stop":1748502452909,"duration":5318}},{"uid":"5f3c40e74620d713","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/348//#testresult/5f3c40e74620d713","status":"passed","time":{"start":1748449647589,"stop":1748449648193,"duration":604}},{"uid":"634efc2fba39ce45","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/347//#testresult/634efc2fba39ce45","status":"passed","time":{"start":1748442441863,"stop":1748442442536,"duration":673}},{"uid":"fce1b989e6a24015","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/346//#testresult/fce1b989e6a24015","status":"passed","time":{"start":1748441496059,"stop":1748441496567,"duration":508}},{"uid":"c86a8f8394c7616a","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/345//#testresult/c86a8f8394c7616a","status":"passed","time":{"start":1748436773761,"stop":1748436774540,"duration":779}},{"uid":"2356dfd620042f6e","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/344//#testresult/2356dfd620042f6e","status":"broken","statusDetails":"AttributeError: 'dict' object has no attribute 'debtor_service_provider_mock_PFX_base64'","time":{"start":1748417982639,"stop":1748417982639,"duration":0}},{"uid":"f8f13ae309079e98","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/343//#testresult/f8f13ae309079e98","status":"passed","time":{"start":1748416025574,"stop":1748416027329,"duration":1755}},{"uid":"8da4264b15744e6a","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/342//#testresult/8da4264b15744e6a","status":"passed","time":{"start":1748329639728,"stop":1748329640729,"duration":1001}},{"uid":"98a96fc3aa21d9fe","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/341//#testresult/98a96fc3aa21d9fe","status":"passed","time":{"start":1748264263208,"stop":1748264263693,"duration":485}},{"uid":"71a61489ee128f9","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/340//#testresult/71a61489ee128f9","status":"passed","time":{"start":1748243385024,"stop":1748243386874,"duration":1850}},{"uid":"c6f21169da4a0f2","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/339//#testresult/c6f21169da4a0f2","status":"passed","time":{"start":1748156832872,"stop":1748156833393,"duration":521}},{"uid":"1e89d92c857a4351","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/338//#testresult/1e89d92c857a4351","status":"passed","time":{"start":1748070405903,"stop":1748070406442,"duration":539}},{"uid":"8a827dd6125deb5","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/337//#testresult/8a827dd6125deb5","status":"passed","time":{"start":1747984030908,"stop":1747984035813,"duration":4905}},{"uid":"76b8daf27b5a194d","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/336//#testresult/76b8daf27b5a194d","status":"passed","time":{"start":1747897632627,"stop":1747897633281,"duration":654}},{"uid":"11b17d39a9676527","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/335//#testresult/11b17d39a9676527","status":"passed","time":{"start":1747840415846,"stop":1747840417495,"duration":1649}},{"uid":"22d68ca18d6bd2c4","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/334//#testresult/22d68ca18d6bd2c4","status":"passed","time":{"start":1747811222964,"stop":1747811223472,"duration":508}},{"uid":"9a3df831e17e8964","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/333//#testresult/9a3df831e17e8964","status":"passed","time":{"start":1747724834602,"stop":1747724835166,"duration":564}},{"uid":"9fb58eb0148f3504","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/332//#testresult/9fb58eb0148f3504","status":"passed","time":{"start":1747661444728,"stop":1747661445195,"duration":467}},{"uid":"9d38f51fca9062d","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/331//#testresult/9d38f51fca9062d","status":"passed","time":{"start":1747638465483,"stop":1747638466178,"duration":695}}]},"tags":["callback","happy_path"]},"source":"53d9d485dcb4b881.json","parameterValues":[]}