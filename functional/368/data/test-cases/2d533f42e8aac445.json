{"uid":"2d533f42e8aac445","name":"An RTP callback is successfully received","fullName":"tests.test_callback#test_receive_rtp_callback_DS_08P_compliant","historyId":"e98ff8a1e43c45b6eec2e1ce025e4cfc","time":{"start":1749483915668,"stop":1749483915669,"duration":1},"status":"broken","statusMessage":"TypeError: argument should be a bytes-like object or ASCII string, not 'NoneType'","statusTrace":"@allure.feature('RTP Callback')\n    @allure.story('Service provider sends a callback referred to an RTP')\n    @allure.title('An RTP callback is successfully received')\n    @pytest.mark.callback\n    @pytest.mark.happy_path\n    def test_receive_rtp_callback_DS_08P_compliant():\n        callback_data = generate_callback_data_DS_08P_compliant()\n    \n>       cert, key = pfx_to_pem(secrets.debtor_service_provider_mock_PFX_base64,\n                               secrets.debtor_service_provider_mock_PFX_password_base64,\n                               config.cert_path,\n                               config.key_path)\n\nfunctional-tests/tests/test_callback.py:39: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nutils/cryptography.py:20: in pfx_to_pem\n    pfx_data = base64.b64decode(base64_pfx)\n/opt/hostedtoolcache/Python/3.13.3/x64/lib/python3.13/base64.py:83: in b64decode\n    s = _bytes_from_decode_data(s)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ns = None\n\n    def _bytes_from_decode_data(s):\n        if isinstance(s, str):\n            try:\n                return s.encode('ascii')\n            except UnicodeEncodeError:\n                raise ValueError('string argument should contain only ASCII characters')\n        if isinstance(s, bytes_types):\n            return s\n        try:\n            return memoryview(s).tobytes()\n        except TypeError:\n>           raise TypeError(\"argument should be a bytes-like object or ASCII \"\n                            \"string, not %r\" % s.__class__.__name__) from None\nE           TypeError: argument should be a bytes-like object or ASCII string, not 'NoneType'\n\n/opt/hostedtoolcache/Python/3.13.3/x64/lib/python3.13/base64.py:45: TypeError","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"_session_faker","time":{"start":1749483911591,"stop":1749483911648,"duration":57},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"afterStages":[],"labels":[{"name":"feature","value":"RTP Callback"},{"name":"story","value":"Service provider sends a callback referred to an RTP"},{"name":"tag","value":"happy_path"},{"name":"tag","value":"callback"},{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_callback"},{"name":"host","value":"pkrvmf6wy0o8zjz"},{"name":"thread","value":"2508-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_callback"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":16,"broken":3,"skipped":0,"passed":50,"unknown":0,"total":69},"items":[{"uid":"140e09b8bc057b0","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/365//#testresult/140e09b8bc057b0","status":"failed","statusDetails":"AssertionError: Error from callback, expected 200 got 400\nassert 400 == 200\n +  where 400 = <Response [400]>.status_code","time":{"start":1749482097040,"stop":1749482097447,"duration":407}},{"uid":"a6a074647ca07d12","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/367//#testresult/a6a074647ca07d12","status":"broken","statusDetails":"TypeError: argument should be a bytes-like object or ASCII string, not 'NoneType'","time":{"start":1749482223385,"stop":1749482223386,"duration":1}},{"uid":"4f6b05731bafaa86","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/363//#testresult/4f6b05731bafaa86","status":"failed","statusDetails":"AssertionError: Error from callback, expected 200 got 400\nassert 400 == 200\n +  where 400 = <Response [400]>.status_code","time":{"start":1749452880327,"stop":1749452880789,"duration":462}},{"uid":"a8ec5de4fd7a9201","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/362//#testresult/a8ec5de4fd7a9201","status":"failed","statusDetails":"AssertionError: Error from callback, expected 200 got 400\nassert 400 == 200\n +  where 400 = <Response [400]>.status_code","time":{"start":1749366423787,"stop":1749366424448,"duration":661}},{"uid":"507a66ef301ec85c","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/361//#testresult/507a66ef301ec85c","status":"failed","statusDetails":"AssertionError: Error from callback, expected 200 got 400\nassert 400 == 200\n +  where 400 = <Response [400]>.status_code","time":{"start":1749280009310,"stop":1749280009821,"duration":511}},{"uid":"775d2dfbb4d2417f","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/360//#testresult/775d2dfbb4d2417f","status":"failed","statusDetails":"AssertionError: Error from callback, expected 200 got 400\nassert 400 == 200\n +  where 400 = <Response [400]>.status_code","time":{"start":1749193618381,"stop":1749193618763,"duration":382}},{"uid":"9600ce8525e0ccef","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/359//#testresult/9600ce8525e0ccef","status":"failed","statusDetails":"AssertionError: Error from callback, expected 200 got 400\nassert 400 == 200\n +  where 400 = <Response [400]>.status_code","time":{"start":1749107243056,"stop":1749107243871,"duration":815}},{"uid":"dd9ee987d591f16e","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/358//#testresult/dd9ee987d591f16e","status":"failed","statusDetails":"AssertionError: Error from callback, expected 200 got 400\nassert 400 == 200\n +  where 400 = <Response [400]>.status_code","time":{"start":1749020828080,"stop":1749020828533,"duration":453}},{"uid":"e0328b7b944d9996","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/357//#testresult/e0328b7b944d9996","status":"failed","statusDetails":"AssertionError: Error from callback, expected 200 got 400\nassert 400 == 200\n +  where 400 = <Response [400]>.status_code","time":{"start":1748956563814,"stop":1748956564202,"duration":388}},{"uid":"5e73600d8622b26c","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/356//#testresult/5e73600d8622b26c","status":"failed","statusDetails":"AssertionError: Error from callback, expected 200 got 400\nassert 400 == 200\n +  where 400 = <Response [400]>.status_code","time":{"start":1748953129697,"stop":1748953130191,"duration":494}},{"uid":"3737fe2825e9c593","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/355//#testresult/3737fe2825e9c593","status":"failed","statusDetails":"AssertionError: Error from callback, expected 200 got 400\nassert 400 == 200\n +  where 400 = <Response [400]>.status_code","time":{"start":1748934472589,"stop":1748934472983,"duration":394}},{"uid":"e4318af5edc22951","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/354//#testresult/e4318af5edc22951","status":"failed","statusDetails":"AssertionError: Error from callback, expected 200 got 400\nassert 400 == 200\n +  where 400 = <Response [400]>.status_code","time":{"start":1748848069954,"stop":1748848070454,"duration":500}},{"uid":"81e3e4d8776ad425","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/353//#testresult/81e3e4d8776ad425","status":"failed","statusDetails":"AssertionError: Error from callback, expected 200 got 400\nassert 400 == 200\n +  where 400 = <Response [400]>.status_code","time":{"start":1748761623861,"stop":1748761624512,"duration":651}},{"uid":"a91dbfeca101794","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/352//#testresult/a91dbfeca101794","status":"failed","statusDetails":"AssertionError: Error from callback, expected 200 got 400\nassert 400 == 200\n +  where 400 = <Response [400]>.status_code","time":{"start":1748675215909,"stop":1748675216366,"duration":457}},{"uid":"e96315c6f7c9e3ee","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/351//#testresult/e96315c6f7c9e3ee","status":"failed","statusDetails":"AssertionError: Error from callback, expected 200 got 400\nassert 400 == 200\n +  where 400 = <Response [400]>.status_code","time":{"start":1748588828314,"stop":1748588828977,"duration":663}},{"uid":"226f1be6312b2ca7","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/350//#testresult/226f1be6312b2ca7","status":"failed","statusDetails":"AssertionError: Error from callback, expected 200 got 400\nassert 400 == 200\n +  where 400 = <Response [400]>.status_code","time":{"start":1748534028633,"stop":1748534029080,"duration":447}},{"uid":"e6487a6118a14ab4","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/349//#testresult/e6487a6118a14ab4","status":"passed","time":{"start":1748502452910,"stop":1748502453556,"duration":646}},{"uid":"aedbf0ee1f8150c8","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/348//#testresult/aedbf0ee1f8150c8","status":"passed","time":{"start":1748449648194,"stop":1748449648787,"duration":593}},{"uid":"9b550581bf601fff","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/347//#testresult/9b550581bf601fff","status":"passed","time":{"start":1748442442538,"stop":1748442442958,"duration":420}},{"uid":"a59b0368aafc725a","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/346//#testresult/a59b0368aafc725a","status":"passed","time":{"start":1748441496569,"stop":1748441496965,"duration":396}}]},"tags":["callback","happy_path"]},"source":"2d533f42e8aac445.json","parameterValues":[]}