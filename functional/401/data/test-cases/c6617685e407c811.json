{"uid":"c6617685e407c811","name":"An RTP callback is successfully received","fullName":"tests.test_callback#test_receive_rtp_callback_DS_04b_compliant","historyId":"475e3c0708b05c2b7bfae9db8dc283af","time":{"start":1750662488919,"stop":1750662490692,"duration":1773},"status":"failed","statusMessage":"AssertionError: Error from callback, expected 200 got 400\nassert 400 == 200\n +  where 400 = <Response [400]>.status_code","statusTrace":"@allure.feature('RTP Callback')\n    @allure.story('Service provider sends a callback referred to an RTP')\n    @allure.title('An RTP callback is successfully received')\n    @pytest.mark.callback\n    @pytest.mark.happy_path\n    def test_receive_rtp_callback_DS_04b_compliant():\n        callback_data = generate_callback_data_DS_04b_compliant()\n    \n        cert, key = pfx_to_pem(secrets.debtor_service_provider_mock_PFX_base64,\n                               secrets.debtor_service_provider_mock_PFX_password_base64,\n                               config.cert_path,\n                               config.key_path)\n    \n        callback_response = srtp_callback(rtp_payload=callback_data,\n                                          cert_path=cert,\n                                          key_path=key)\n>       assert callback_response.status_code == 200, f'Error from callback, expected 200 got {callback_response.status_code}'\nE       AssertionError: Error from callback, expected 200 got 400\nE       assert 400 == 200\nE        +  where 400 = <Response [400]>.status_code\n\nfunctional-tests/tests/test_callback.py:28: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"_session_faker","time":{"start":1750662476762,"stop":1750662476819,"duration":57},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"afterStages":[],"labels":[{"name":"story","value":"Service provider sends a callback referred to an RTP"},{"name":"feature","value":"RTP Callback"},{"name":"tag","value":"happy_path"},{"name":"tag","value":"callback"},{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_callback"},{"name":"host","value":"pkrvmxyh4eaekms"},{"name":"thread","value":"2489-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_callback"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":41,"broken":9,"skipped":0,"passed":50,"unknown":0,"total":100},"items":[{"uid":"25306c214a5cd779","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/400//#testresult/25306c214a5cd779","status":"failed","statusDetails":"AssertionError: Error from callback, expected 200 got 400\nassert 400 == 200\n +  where 400 = <Response [400]>.status_code","time":{"start":1750576068993,"stop":1750576069582,"duration":589}},{"uid":"fe00c251e745895a","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/399//#testresult/fe00c251e745895a","status":"failed","statusDetails":"AssertionError: Error from callback, expected 200 got 400\nassert 400 == 200\n +  where 400 = <Response [400]>.status_code","time":{"start":1750489632384,"stop":1750489633016,"duration":632}},{"uid":"5cb209d1abab4acd","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/398//#testresult/5cb209d1abab4acd","status":"failed","statusDetails":"AssertionError: Error from callback, expected 200 got 400\nassert 400 == 200\n +  where 400 = <Response [400]>.status_code","time":{"start":1750403231770,"stop":1750403232304,"duration":534}},{"uid":"b6e21e2f7bed446c","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/397//#testresult/b6e21e2f7bed446c","status":"failed","statusDetails":"AssertionError: Error from callback, expected 200 got 400\nassert 400 == 200\n +  where 400 = <Response [400]>.status_code","time":{"start":1750334997692,"stop":1750334998849,"duration":1157}},{"uid":"b71d62c73990b310","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/396//#testresult/b71d62c73990b310","status":"failed","statusDetails":"AssertionError: Error from callback, expected 200 got 400\nassert 400 == 200\n +  where 400 = <Response [400]>.status_code","time":{"start":1750329637394,"stop":1750329638042,"duration":648}},{"uid":"8baacb036068096b","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/395//#testresult/8baacb036068096b","status":"failed","statusDetails":"AssertionError: Error from callback, expected 200 got 400\nassert 400 == 200\n +  where 400 = <Response [400]>.status_code","time":{"start":1750328580866,"stop":1750328581352,"duration":486}},{"uid":"77f2ad9cab84fa03","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/394//#testresult/77f2ad9cab84fa03","status":"failed","statusDetails":"AssertionError: Error from callback, expected 200 got 400\nassert 400 == 200\n +  where 400 = <Response [400]>.status_code","time":{"start":1750317540509,"stop":1750317540910,"duration":401}},{"uid":"51c18c5ba1a8c486","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/393//#testresult/51c18c5ba1a8c486","status":"failed","statusDetails":"AssertionError: Error from callback, expected 200 got 400\nassert 400 == 200\n +  where 400 = <Response [400]>.status_code","time":{"start":1750316857890,"stop":1750316858728,"duration":838}},{"uid":"729e4f528b27600c","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/392//#testresult/729e4f528b27600c","status":"failed","statusDetails":"AssertionError: Error from callback, expected 200 got 400\nassert 400 == 200\n +  where 400 = <Response [400]>.status_code","time":{"start":1750230471416,"stop":1750230472914,"duration":1498}},{"uid":"9e1280efe87a54a1","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/391//#testresult/9e1280efe87a54a1","status":"failed","statusDetails":"AssertionError: Error from callback, expected 200 got 400\nassert 400 == 200\n +  where 400 = <Response [400]>.status_code","time":{"start":1750170132946,"stop":1750170133362,"duration":416}},{"uid":"50127c01f10f273f","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/389//#testresult/50127c01f10f273f","status":"failed","statusDetails":"AssertionError: Error from callback, expected 200 got 400\nassert 400 == 200\n +  where 400 = <Response [400]>.status_code","time":{"start":1750144039853,"stop":1750144040582,"duration":729}},{"uid":"c536aaa08759629a","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/388//#testresult/c536aaa08759629a","status":"failed","statusDetails":"AssertionError: Error from callback, expected 200 got 400\nassert 400 == 200\n +  where 400 = <Response [400]>.status_code","time":{"start":1750069024538,"stop":1750069025105,"duration":567}},{"uid":"72f779edfbac31f4","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/387//#testresult/72f779edfbac31f4","status":"failed","statusDetails":"AssertionError: Error from callback, expected 200 got 400\nassert 400 == 200\n +  where 400 = <Response [400]>.status_code","time":{"start":1750057705500,"stop":1750057707115,"duration":1615}},{"uid":"791f332ccab3c474","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/386//#testresult/791f332ccab3c474","status":"failed","statusDetails":"AssertionError: Error from callback, expected 200 got 400\nassert 400 == 200\n +  where 400 = <Response [400]>.status_code","time":{"start":1749971241768,"stop":1749971243534,"duration":1766}},{"uid":"74b6246310dd74df","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/385//#testresult/74b6246310dd74df","status":"failed","statusDetails":"AssertionError: Error from callback, expected 200 got 400\nassert 400 == 200\n +  where 400 = <Response [400]>.status_code","time":{"start":1749884849913,"stop":1749884851251,"duration":1338}},{"uid":"2ce1cbf1398e5edc","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/384//#testresult/2ce1cbf1398e5edc","status":"failed","statusDetails":"AssertionError: Error from callback, expected 200 got 400\nassert 400 == 200\n +  where 400 = <Response [400]>.status_code","time":{"start":1749810118229,"stop":1749810118727,"duration":498}},{"uid":"f3208f3e99d1a1ac","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/383//#testresult/f3208f3e99d1a1ac","status":"failed","statusDetails":"AssertionError: Error from callback, expected 200 got 400\nassert 400 == 200\n +  where 400 = <Response [400]>.status_code","time":{"start":1749805339149,"stop":1749805339824,"duration":675}},{"uid":"507fd75bec29a9c7","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/382//#testresult/507fd75bec29a9c7","status":"failed","statusDetails":"AssertionError: Error from callback, expected 200 got 400\nassert 400 == 200\n +  where 400 = <Response [400]>.status_code","time":{"start":1749803871924,"stop":1749803872333,"duration":409}},{"uid":"e0657d021c4414f","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/381//#testresult/e0657d021c4414f","status":"failed","statusDetails":"AssertionError: Error from callback, expected 200 got 400\nassert 400 == 200\n +  where 400 = <Response [400]>.status_code","time":{"start":1749802595365,"stop":1749802595855,"duration":490}},{"uid":"3c82a04c5b03cc99","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/380//#testresult/3c82a04c5b03cc99","status":"failed","statusDetails":"AssertionError: Error from callback, expected 200 got 400\nassert 400 == 200\n +  where 400 = <Response [400]>.status_code","time":{"start":1749801527452,"stop":1749801527875,"duration":423}}]},"tags":["callback","happy_path"]},"source":"c6617685e407c811.json","parameterValues":[]}