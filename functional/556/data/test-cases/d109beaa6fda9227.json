{"uid":"d109beaa6fda9227","name":"Happy path: an already published debt position with VALID status is updated","fullName":"tests.test_debt_position_update#test_update_valid_already_published_debt_position","historyId":"0b7c62c7454094d3206fd6273e9965e0","time":{"start":1759735675850,"stop":1759735676476,"duration":626},"description":"\nVerify that an already published debt position with VALID status\ncan be updated and changes are reflected in RTP lookups.\n","descriptionHtml":"<p>Verify that an already published debt position with VALID status<br />\ncan be updated and changes are reflected in RTP lookups.</p>\n","status":"failed","statusMessage":"AssertionError: assert 403 == 201\n +  where 403 = <Response [403]>.status_code","statusTrace":"setup_data = {'debtor_fc': 'BGOLCU10E55X000K', 'iupd': '551e67bb0c734644b', 'iuv': '30579380823554499', 'organization_id': '02438750586', ...}\n\n    @allure.feature('Debt Positions')\n    @allure.story('Update Valid Already Published Debt Position')\n    @pytest.mark.debt_positions\n    @pytest.mark.send\n    @pytest.mark.happy_path\n    @pytest.mark.timeout(TEST_TIMEOUT_SEC)\n    def test_update_valid_already_published_debt_position(setup_data: dict[str, Any]) -> None:\n        \"\"\"\n        Verify that an already published debt position with VALID status\n        can be updated and changes are reflected in RTP lookups.\n        \"\"\"\n        allure.dynamic.title('Happy path: an already published debt position with VALID status is updated')\n    \n>       update_data = _setup_update_test(setup_data, 'VALID')\n\nfunctional-tests/tests/test_debt_position_update.py:157: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nsetup_data = {'debtor_fc': 'BGOLCU10E55X000K', 'iupd': '551e67bb0c734644b', 'iuv': '30579380823554499', 'organization_id': '02438750586', ...}\nstatus = 'VALID', to_publish = True, waiting_time_sec = 5\n\n    def _setup_update_test(\n        setup_data: dict[str, Any],\n        status: str,\n        to_publish: bool = True,\n        waiting_time_sec: int = 5,\n    ) -> UpdateCheckData:\n        \"\"\"\n        Create and update a debt position, returning both the original\n        and updated values for validation.\n    \n        Args:\n            setup_data (dict): Pre-computed setup data including identifiers and keys.\n            status (str): Expected status of the created/updated debt position.\n            to_publish (bool, optional): Whether to publish immediately. Defaults to True.\n            waiting_time_sec (int, optional): Delay between creation/update and checks. Defaults to 5.\n    \n        Returns:\n            UpdateCheckData: Structured data for validating the update.\n        \"\"\"\n        subscription_key = setup_data['subscription_key']\n        organization_id = setup_data['organization_id']\n        debtor_fc = setup_data['debtor_fc']\n        iupd = setup_data['iupd']\n        iuv = setup_data['iuv']\n    \n        payload = create_debt_position_payload(debtor_fc=debtor_fc, iupd=iupd, iuv=iuv)\n        create_response = create_debt_position(subscription_key, organization_id, payload, to_publish=to_publish)\n>       assert create_response.status_code == 201\nE       assert 403 == 201\nE        +  where 403 = <Response [403]>.status_code\n\nfunctional-tests/tests/test_debt_position_update.py:242: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"_session_faker","time":{"start":1759735301434,"stop":1759735301492,"duration":58},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"setup_data","time":{"start":1759735674596,"stop":1759735675849,"duration":1253},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"afterStages":[],"labels":[{"name":"feature","value":"Debt Positions"},{"name":"story","value":"Update Valid Already Published Debt Position"},{"name":"tag","value":"timeout(300)"},{"name":"tag","value":"happy_path"},{"name":"tag","value":"send"},{"name":"tag","value":"debt_positions"},{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_debt_position_update"},{"name":"host","value":"runnervmwhb2z"},{"name":"thread","value":"2560-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_debt_position_update"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":16,"broken":2,"skipped":0,"passed":10,"unknown":0,"total":28},"items":[{"uid":"9b64b97180defd01","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/555//#testresult/9b64b97180defd01","status":"failed","statusDetails":"Failed: Timeout (>300.0s) from pytest-timeout.","time":{"start":1759649647624,"stop":1759649946625,"duration":299001}},{"uid":"64686f517f23a15f","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/554//#testresult/64686f517f23a15f","status":"failed","statusDetails":"Failed: Timeout (>300.0s) from pytest-timeout.","time":{"start":1759563298327,"stop":1759563596837,"duration":298510}},{"uid":"98926a06443ccdf2","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/553//#testresult/98926a06443ccdf2","status":"failed","statusDetails":"Failed: Timeout (>300.0s) from pytest-timeout.","time":{"start":1759484500190,"stop":1759484798471,"duration":298281}},{"uid":"a164ed187190eba1","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/552//#testresult/a164ed187190eba1","status":"broken","statusDetails":"requests.exceptions.HTTPError: 502 Server Error: Bad Gateway for url: https://api-mcshared.uat.cstar.pagopa.it/auth/token","time":{"start":1759476793906,"stop":1759476793906,"duration":0}},{"uid":"4e0e7bd65d55863f","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/551//#testresult/4e0e7bd65d55863f","status":"failed","statusDetails":"Failed: Timeout (>300.0s) from pytest-timeout.","time":{"start":1759390490508,"stop":1759390789469,"duration":298961}},{"uid":"de545b0fc4441c28","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/550//#testresult/de545b0fc4441c28","status":"passed","time":{"start":1759316173860,"stop":1759316185925,"duration":12065}},{"uid":"1878201f93918c17","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/549//#testresult/1878201f93918c17","status":"passed","time":{"start":1759303748254,"stop":1759303759855,"duration":11601}},{"uid":"78ec1710cd0f1c54","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/548//#testresult/78ec1710cd0f1c54","status":"passed","time":{"start":1759217330544,"stop":1759217342498,"duration":11954}},{"uid":"dd16528ada05a8b7","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/547//#testresult/dd16528ada05a8b7","status":"failed","statusDetails":"AssertionError: assert 502 == 201\n +  where 502 = <Response [502]>.status_code","time":{"start":1759130887928,"stop":1759130888290,"duration":362}},{"uid":"2fd1299660dc09a4","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/546//#testresult/2fd1299660dc09a4","status":"passed","time":{"start":1759044322613,"stop":1759044335152,"duration":12539}},{"uid":"d1f284f165285890","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/545//#testresult/d1f284f165285890","status":"passed","time":{"start":1758957697355,"stop":1758957709336,"duration":11981}},{"uid":"4665184770fb78ad","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/544//#testresult/4665184770fb78ad","status":"passed","time":{"start":1758871974352,"stop":1758871986894,"duration":12542}},{"uid":"7dca9d8e63250418","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/543//#testresult/7dca9d8e63250418","status":"failed","statusDetails":"Failed: Timeout (>300.0s) from pytest-timeout.","time":{"start":1758785834431,"stop":1758786133451,"duration":299020}},{"uid":"11e83257f0869b2a","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/542//#testresult/11e83257f0869b2a","status":"failed","statusDetails":"Failed: Timeout (>300.0s) from pytest-timeout.","time":{"start":1758699439743,"stop":1758699738319,"duration":298576}},{"uid":"67b0f3527a35531e","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/541//#testresult/67b0f3527a35531e","status":"passed","time":{"start":1758612544959,"stop":1758612557399,"duration":12440}},{"uid":"9959e48f3d27cd87","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/540//#testresult/9959e48f3d27cd87","status":"passed","time":{"start":1758526212167,"stop":1758526224726,"duration":12559}},{"uid":"46cc2c159f447576","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/539//#testresult/46cc2c159f447576","status":"passed","time":{"start":1758439554635,"stop":1758439568051,"duration":13416}},{"uid":"f893b509cf05d758","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/538//#testresult/f893b509cf05d758","status":"passed","time":{"start":1758353214671,"stop":1758353227316,"duration":12645}},{"uid":"79da5cad0d4021c6","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/537//#testresult/79da5cad0d4021c6","status":"broken","statusDetails":"requests.exceptions.HTTPError: 502 Server Error: Bad Gateway for url: https://api-mcshared.uat.cstar.pagopa.it/auth/token","time":{"start":1758271014366,"stop":1758271014366,"duration":0}},{"uid":"b09c8079193d33be","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/536//#testresult/b09c8079193d33be","status":"failed","statusDetails":"Failed: Timeout (>300.0s) from pytest-timeout.","time":{"start":1758266797942,"stop":1758267096883,"duration":298941}}]},"tags":["debt_positions","timeout(300)","send","happy_path"]},"source":"d109beaa6fda9227.json","parameterValues":[]}