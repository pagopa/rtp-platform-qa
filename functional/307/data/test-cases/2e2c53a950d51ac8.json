{"uid":"2e2c53a950d51ac8","name":"A debtor is activated by an authenticated service provider","fullName":"tests.test_activation#test_activate_debtor","historyId":"ac494fa39e43ac7e7a23514069507895","time":{"start":1745564803597,"stop":1745564811863,"duration":8266},"status":"failed","statusMessage":"AssertionError: Invalid date format\nassert False","statusTrace":"@allure.feature('Activation')\n    @allure.story('Debtor activation')\n    @allure.title('A debtor is activated by an authenticated service provider')\n    @pytest.mark.auth\n    @pytest.mark.activation\n    @pytest.mark.happy_path\n    def test_activate_debtor():\n        access_token = get_valid_access_token(client_id=secrets.debtor_service_provider.client_id,\n                                              client_secret=secrets.debtor_service_provider.client_secret,\n                                              access_token_function=get_access_token)\n        debtor_fc = fake_fc()\n    \n        res = activate(access_token, debtor_fc, secrets.debtor_service_provider.service_provider_id)\n        assert res.status_code == 201, 'Error activating debtor'\n    \n        location = res.headers['Location']\n        location_split = location.split('/')\n    \n        assert '/'.join(location_split[:-1]) == config.activation_base_url_path + config.activation_path\n        assert bool(uuidv4_pattern.fullmatch(location_split[-1]))\n    \n        res = get_activation_by_payer_id(access_token, debtor_fc)\n        assert res.status_code == 200\n        assert res.json()['payer']['fiscalCode'] == debtor_fc\n        assert res.json()['payer']['rtpSpId'] == secrets.debtor_service_provider.service_provider_id\n        assert bool(uuidv4_pattern.fullmatch(res.json()['id']))\n    \n        try:\n>           datetime.strptime(res.json()['effectiveActivationDate'], '%Y-%m-%dT%H:%M:%S.%f')\n\nfunctional-tests/tests/test_activation.py:44: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/opt/hostedtoolcache/Python/3.13.3/x64/lib/python3.13/_strptime.py:674: in _strptime_datetime\n    tt, fraction, gmtoff_fraction = _strptime(data_string, format)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ndata_string = '2025-04-25T07:06:51', format = '%Y-%m-%dT%H:%M:%S.%f'\n\n    def _strptime(data_string, format=\"%a %b %d %H:%M:%S %Y\"):\n        \"\"\"Return a 2-tuple consisting of a time struct and an int containing\n        the number of microseconds based on the input string and the\n        format string.\"\"\"\n    \n        for index, arg in enumerate([data_string, format]):\n            if not isinstance(arg, str):\n                msg = \"strptime() argument {} must be str, not {}\"\n                raise TypeError(msg.format(index, type(arg)))\n    \n        global _TimeRE_cache, _regex_cache\n        with _cache_lock:\n            locale_time = _TimeRE_cache.locale_time\n            if (_getlang() != locale_time.lang or\n                time.tzname != locale_time.tzname or\n                time.daylight != locale_time.daylight):\n                _TimeRE_cache = TimeRE()\n                _regex_cache.clear()\n                locale_time = _TimeRE_cache.locale_time\n            if len(_regex_cache) > _CACHE_MAX_SIZE:\n                _regex_cache.clear()\n            format_regex = _regex_cache.get(format)\n            if not format_regex:\n                try:\n                    format_regex = _TimeRE_cache.compile(format)\n                # KeyError raised when a bad format is found; can be specified as\n                # \\\\, in which case it was a stray % but with a space after it\n                except KeyError as err:\n                    bad_directive = err.args[0]\n                    if bad_directive == \"\\\\\":\n                        bad_directive = \"%\"\n                    del err\n                    raise ValueError(\"'%s' is a bad directive in format '%s'\" %\n                                        (bad_directive, format)) from None\n                # IndexError only occurs when the format string is \"%\"\n                except IndexError:\n                    raise ValueError(\"stray %% in format '%s'\" % format) from None\n                _regex_cache[format] = format_regex\n        found = format_regex.match(data_string)\n        if not found:\n>           raise ValueError(\"time data %r does not match format %r\" %\n                             (data_string, format))\nE           ValueError: time data '2025-04-25T07:06:51' does not match format '%Y-%m-%dT%H:%M:%S.%f'\n\n/opt/hostedtoolcache/Python/3.13.3/x64/lib/python3.13/_strptime.py:453: ValueError\n\nDuring handling of the above exception, another exception occurred:\n\n    @allure.feature('Activation')\n    @allure.story('Debtor activation')\n    @allure.title('A debtor is activated by an authenticated service provider')\n    @pytest.mark.auth\n    @pytest.mark.activation\n    @pytest.mark.happy_path\n    def test_activate_debtor():\n        access_token = get_valid_access_token(client_id=secrets.debtor_service_provider.client_id,\n                                              client_secret=secrets.debtor_service_provider.client_secret,\n                                              access_token_function=get_access_token)\n        debtor_fc = fake_fc()\n    \n        res = activate(access_token, debtor_fc, secrets.debtor_service_provider.service_provider_id)\n        assert res.status_code == 201, 'Error activating debtor'\n    \n        location = res.headers['Location']\n        location_split = location.split('/')\n    \n        assert '/'.join(location_split[:-1]) == config.activation_base_url_path + config.activation_path\n        assert bool(uuidv4_pattern.fullmatch(location_split[-1]))\n    \n        res = get_activation_by_payer_id(access_token, debtor_fc)\n        assert res.status_code == 200\n        assert res.json()['payer']['fiscalCode'] == debtor_fc\n        assert res.json()['payer']['rtpSpId'] == secrets.debtor_service_provider.service_provider_id\n        assert bool(uuidv4_pattern.fullmatch(res.json()['id']))\n    \n        try:\n            datetime.strptime(res.json()['effectiveActivationDate'], '%Y-%m-%dT%H:%M:%S.%f')\n        except ValueError:\n>           assert False, 'Invalid date format'\nE           AssertionError: Invalid date format\nE           assert False\n\nfunctional-tests/tests/test_activation.py:46: AssertionError","flaky":false,"newFailed":true,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"_session_faker","time":{"start":1745564803539,"stop":1745564803597,"duration":58},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"afterStages":[],"labels":[{"name":"story","value":"Debtor activation"},{"name":"feature","value":"Activation"},{"name":"tag","value":"happy_path"},{"name":"tag","value":"activation"},{"name":"tag","value":"auth"},{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_activation"},{"name":"host","value":"fv-az1671-215"},{"name":"thread","value":"2377-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_activation"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":28,"broken":23,"skipped":0,"passed":82,"unknown":0,"total":133},"items":[{"uid":"9d6351a0b1838ca","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/306//#testresult/9d6351a0b1838ca","status":"passed","time":{"start":1745491283883,"stop":1745491286128,"duration":2245}},{"uid":"c283c05d83c0fad5","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/305//#testresult/c283c05d83c0fad5","status":"passed","time":{"start":1745478430653,"stop":1745478432935,"duration":2282}},{"uid":"30a5492a28d25b20","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/304//#testresult/30a5492a28d25b20","status":"passed","time":{"start":1745392028738,"stop":1745392031854,"duration":3116}},{"uid":"b3dd24e3cbaf1bea","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/303//#testresult/b3dd24e3cbaf1bea","status":"passed","time":{"start":1745305607208,"stop":1745305616630,"duration":9422}},{"uid":"8c737542c3c32285","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/302//#testresult/8c737542c3c32285","status":"passed","time":{"start":1745219243145,"stop":1745219251770,"duration":8625}},{"uid":"801dbe91d3112850","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/301//#testresult/801dbe91d3112850","status":"passed","time":{"start":1745132752047,"stop":1745132783283,"duration":31236}},{"uid":"1f30dfb9390bf744","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/300//#testresult/1f30dfb9390bf744","status":"passed","time":{"start":1745046337710,"stop":1745046383116,"duration":45406}},{"uid":"2fcf506c6739117e","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/299//#testresult/2fcf506c6739117e","status":"passed","time":{"start":1744959999907,"stop":1744960001611,"duration":1704}},{"uid":"3309e017fca4c6ad","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/298//#testresult/3309e017fca4c6ad","status":"passed","time":{"start":1744902265118,"stop":1744902267064,"duration":1946}},{"uid":"5751c8a3c6d3a955","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/297//#testresult/5751c8a3c6d3a955","status":"broken","statusDetails":"TypeError: strptime() argument 1 must be str, not list","time":{"start":1744873629050,"stop":1744873631593,"duration":2543}},{"uid":"ca00db489ce5f7c0","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/296//#testresult/ca00db489ce5f7c0","status":"broken","statusDetails":"TypeError: strptime() argument 1 must be str, not list","time":{"start":1744799595610,"stop":1744799597599,"duration":1989}},{"uid":"a99797f733b274c6","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/295//#testresult/a99797f733b274c6","status":"broken","statusDetails":"TypeError: strptime() argument 1 must be str, not list","time":{"start":1744787214806,"stop":1744787222483,"duration":7677}},{"uid":"93474396099d0595","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/294//#testresult/93474396099d0595","status":"broken","statusDetails":"TypeError: strptime() argument 1 must be str, not list","time":{"start":1744727101910,"stop":1744727104481,"duration":2571}},{"uid":"e7f0adf96407171f","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/293//#testresult/e7f0adf96407171f","status":"broken","statusDetails":"TypeError: strptime() argument 1 must be str, not list","time":{"start":1744726244407,"stop":1744726246144,"duration":1737}},{"uid":"58c1db3d05c6842e","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/292//#testresult/58c1db3d05c6842e","status":"broken","statusDetails":"TypeError: strptime() argument 1 must be str, not list","time":{"start":1744725384254,"stop":1744725387852,"duration":3598}},{"uid":"eb992be4badd8ebc","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/291//#testresult/eb992be4badd8ebc","status":"broken","statusDetails":"TypeError: strptime() argument 1 must be str, not list","time":{"start":1744700814999,"stop":1744700817797,"duration":2798}},{"uid":"bcb4a3268c7a4a2d","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/290//#testresult/bcb4a3268c7a4a2d","status":"broken","statusDetails":"TypeError: strptime() argument 1 must be str, not list","time":{"start":1744640101430,"stop":1744640103134,"duration":1704}},{"uid":"1e736fad9e12bff5","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/289//#testresult/1e736fad9e12bff5","status":"broken","statusDetails":"TypeError: strptime() argument 1 must be str, not list","time":{"start":1744614428607,"stop":1744614431012,"duration":2405}},{"uid":"9e690bd8bd0099a6","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/288//#testresult/9e690bd8bd0099a6","status":"broken","statusDetails":"TypeError: strptime() argument 1 must be str, not list","time":{"start":1744527957872,"stop":1744528004363,"duration":46491}},{"uid":"3b354717eb01c862","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/287//#testresult/3b354717eb01c862","status":"broken","statusDetails":"TypeError: strptime() argument 1 must be str, not list","time":{"start":1744441542542,"stop":1744441580142,"duration":37600}}]},"tags":["auth","activation","happy_path"]},"source":"2e2c53a950d51ac8.json","parameterValues":[]}