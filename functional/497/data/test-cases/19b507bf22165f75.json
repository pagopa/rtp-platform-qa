{"uid":"19b507bf22165f75","name":"RTP is successfully retrieved","fullName":"tests.test_get_rtp#test_get_rtp_success","historyId":"caeb9610ab96a7a077f09cf26a913a9a","time":{"start":1755613344434,"stop":1755613346457,"duration":2023},"status":"failed","statusMessage":"AssertionError: assert 403 == 200\n +  where 403 = <Response [403]>.status_code","statusTrace":"@allure.feature('RTP Get')\n    @allure.story('Service provider retrieves an RTP')\n    @allure.title('RTP is successfully retrieved')\n    @pytest.mark.get\n    @pytest.mark.happy_path\n    def test_get_rtp_success():\n        rtp_data = generate_rtp_data()\n    \n        debtor_service_provider_access_token = get_valid_access_token(\n            client_id=secrets.debtor_service_provider.client_id,\n            client_secret=secrets.debtor_service_provider.client_secret,\n            access_token_function=get_access_token,\n        )\n    \n        creditor_service_provider_access_token = get_valid_access_token(\n            client_id=secrets.creditor_service_provider.client_id,\n            client_secret=secrets.creditor_service_provider.client_secret,\n            access_token_function=get_access_token,\n        )\n    \n        activation_response = activate(\n            debtor_service_provider_access_token,\n            rtp_data['payer']['payerId'],\n            secrets.debtor_service_provider.service_provider_id,\n        )\n        assert activation_response.status_code == 201, 'Error activating debtor'\n    \n        send_response = send_rtp(\n            access_token=creditor_service_provider_access_token, rtp_payload=rtp_data\n        )\n        assert send_response.status_code == 201\n    \n        location = send_response.headers['Location']\n        resource_id = location.split('/')[-1]\n    \n        get_response = get_rtp(\n            access_token=creditor_service_provider_access_token, rtp_id=resource_id\n        )\n>       assert get_response.status_code == 200\nE       assert 403 == 200\nE        +  where 403 = <Response [403]>.status_code\n\nfunctional-tests/tests/test_get_rtp.py:54: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"_session_faker","time":{"start":1755613273592,"stop":1755613273648,"duration":56},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"afterStages":[],"labels":[{"name":"feature","value":"RTP Get"},{"name":"story","value":"Service provider retrieves an RTP"},{"name":"tag","value":"happy_path"},{"name":"tag","value":"get"},{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_get_rtp"},{"name":"host","value":"pkrvmubgrv54qmi"},{"name":"thread","value":"2521-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_get_rtp"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":21,"broken":18,"skipped":0,"passed":70,"unknown":0,"total":109},"items":[{"uid":"17f3667fb1984016","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/496//#testresult/17f3667fb1984016","status":"failed","statusDetails":"AssertionError: assert 403 == 200\n +  where 403 = <Response [403]>.status_code","time":{"start":1755588525729,"stop":1755588527636,"duration":1907}},{"uid":"a85710d35d5ec880","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/495//#testresult/a85710d35d5ec880","status":"failed","statusDetails":"AssertionError: assert 403 == 200\n +  where 403 = <Response [403]>.status_code","time":{"start":1755587314444,"stop":1755587316725,"duration":2281}},{"uid":"933f79cbcdca929b","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/494//#testresult/933f79cbcdca929b","status":"failed","statusDetails":"AssertionError: assert 403 == 200\n +  where 403 = <Response [403]>.status_code","time":{"start":1755501057368,"stop":1755501060685,"duration":3317}},{"uid":"262866390a0642ae","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/493//#testresult/262866390a0642ae","status":"failed","statusDetails":"AssertionError: assert 403 == 200\n +  where 403 = <Response [403]>.status_code","time":{"start":1755414452671,"stop":1755414454617,"duration":1946}},{"uid":"c253d4490e2d268a","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/492//#testresult/c253d4490e2d268a","status":"failed","statusDetails":"AssertionError: assert 403 == 200\n +  where 403 = <Response [403]>.status_code","time":{"start":1755328045228,"stop":1755328047059,"duration":1831}},{"uid":"1a219bf2f9887015","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/491//#testresult/1a219bf2f9887015","status":"failed","statusDetails":"AssertionError: assert 403 == 200\n +  where 403 = <Response [403]>.status_code","time":{"start":1755241730146,"stop":1755241732122,"duration":1976}},{"uid":"db98912f4a56607b","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/490//#testresult/db98912f4a56607b","status":"failed","statusDetails":"AssertionError: assert 403 == 200\n +  where 403 = <Response [403]>.status_code","time":{"start":1755166840316,"stop":1755166843071,"duration":2755}},{"uid":"ffed12d123aebd1","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/489//#testresult/ffed12d123aebd1","status":"failed","statusDetails":"AssertionError: assert 403 == 200\n +  where 403 = <Response [403]>.status_code","time":{"start":1755158346712,"stop":1755158348645,"duration":1933}},{"uid":"18908563d029d471","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/488//#testresult/18908563d029d471","status":"failed","statusDetails":"AssertionError: assert 403 == 200\n +  where 403 = <Response [403]>.status_code","time":{"start":1755155387550,"stop":1755155390614,"duration":3064}},{"uid":"bd0c37bd588f0d51","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/487//#testresult/bd0c37bd588f0d51","status":"failed","statusDetails":"AssertionError: assert 403 == 200\n +  where 403 = <Response [403]>.status_code","time":{"start":1755068961472,"stop":1755068963760,"duration":2288}},{"uid":"d7737d0b1e6152c0","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/486//#testresult/d7737d0b1e6152c0","status":"failed","statusDetails":"AssertionError: assert 403 == 200\n +  where 403 = <Response [403]>.status_code","time":{"start":1754982572279,"stop":1754982575505,"duration":3226}},{"uid":"c886fc3f91710232","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/485//#testresult/c886fc3f91710232","status":"failed","statusDetails":"AssertionError: assert 403 == 200\n +  where 403 = <Response [403]>.status_code","time":{"start":1754907886433,"stop":1754907888638,"duration":2205}},{"uid":"5fe9e3fadac31ab2","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/483//#testresult/5fe9e3fadac31ab2","status":"failed","statusDetails":"AssertionError: assert 403 == 200\n +  where 403 = <Response [403]>.status_code","time":{"start":1754896330115,"stop":1754896333353,"duration":3238}},{"uid":"ad848fea8d10630","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/482//#testresult/ad848fea8d10630","status":"failed","statusDetails":"AssertionError: assert 403 == 200\n +  where 403 = <Response [403]>.status_code","time":{"start":1754809662403,"stop":1754809664620,"duration":2217}},{"uid":"b0b20fa550f1e922","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/481//#testresult/b0b20fa550f1e922","status":"failed","statusDetails":"AssertionError: assert 403 == 200\n +  where 403 = <Response [403]>.status_code","time":{"start":1754723272713,"stop":1754723274636,"duration":1923}},{"uid":"4e4fc92270c5af0f","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/480//#testresult/4e4fc92270c5af0f","status":"failed","statusDetails":"AssertionError: assert 403 == 200\n +  where 403 = <Response [403]>.status_code","time":{"start":1754637175915,"stop":1754637179265,"duration":3350}},{"uid":"b5b8e156e1512b09","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/479//#testresult/b5b8e156e1512b09","status":"failed","statusDetails":"AssertionError: assert 403 == 200\n +  where 403 = <Response [403]>.status_code","time":{"start":1754550749776,"stop":1754550752280,"duration":2504}},{"uid":"17ac97065d14805","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/478//#testresult/17ac97065d14805","status":"failed","statusDetails":"AssertionError: assert 403 == 200\n +  where 403 = <Response [403]>.status_code","time":{"start":1754464837491,"stop":1754464840768,"duration":3277}},{"uid":"96d3262683d1eba8","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/476//#testresult/96d3262683d1eba8","status":"failed","statusDetails":"AssertionError: assert 403 == 200\n +  where 403 = <Response [403]>.status_code","time":{"start":1754464765272,"stop":1754464767169,"duration":1897}},{"uid":"70796a77134ff76","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/475//#testresult/70796a77134ff76","status":"failed","statusDetails":"AssertionError: assert 403 == 200\n +  where 403 = <Response [403]>.status_code","time":{"start":1754464345476,"stop":1754464348778,"duration":3302}}]},"tags":["get","happy_path"]},"source":"19b507bf22165f75.json","parameterValues":[]}