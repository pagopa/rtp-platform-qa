{"uid":"90bd507fce5fd67a","name":"An RTP is sent to Poste service with activated fiscal code","fullName":"tests.test_send_rtp#test_send_rtp_to_poste","historyId":"93feaaf7c0853e784de388e64bc6e877","time":{"start":1749484609302,"stop":1749484609708,"duration":406},"status":"broken","statusMessage":"requests.exceptions.HTTPError: 400 Client Error: Bad Request for url: https://api-mcshared.uat.cstar.pagopa.it/auth/token","statusTrace":"@allure.feature('RTP Send')\n    @allure.story('Service provider sends an RTP to a provider')\n    @allure.title('An RTP is sent to Poste service with activated fiscal code')\n    @pytest.mark.send\n    @pytest.mark.happy_path\n    @pytest.mark.real_integration\n    @pytest.mark.poste\n    def test_send_rtp_to_poste():\n        fiscal_code = secrets.poste_activated_fiscal_code\n        rtp_data = generate_rtp_data(payer_id=fiscal_code)\n    \n>       creditor_service_provider_access_token = get_valid_access_token(\n            client_id=secrets.creditor_service_provider.client_id,\n            client_secret=secrets.creditor_service_provider.client_secret,\n            access_token_function=get_access_token)\n\nfunctional-tests/tests/test_send_rtp.py:80: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \napi/auth.py:8: in get_valid_access_token\n    token_response.raise_for_status()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <Response [400]>\n\n    def raise_for_status(self):\n        \"\"\"Raises :class:`HTTPError`, if one occurred.\"\"\"\n    \n        http_error_msg = \"\"\n        if isinstance(self.reason, bytes):\n            # We attempt to decode utf-8 first because some servers\n            # choose to localize their reason strings. If the string\n            # isn't utf-8, we fall back to iso-8859-1 for all other\n            # encodings. (See PR #3538)\n            try:\n                reason = self.reason.decode(\"utf-8\")\n            except UnicodeDecodeError:\n                reason = self.reason.decode(\"iso-8859-1\")\n        else:\n            reason = self.reason\n    \n        if 400 <= self.status_code < 500:\n            http_error_msg = (\n                f\"{self.status_code} Client Error: {reason} for url: {self.url}\"\n            )\n    \n        elif 500 <= self.status_code < 600:\n            http_error_msg = (\n                f\"{self.status_code} Server Error: {reason} for url: {self.url}\"\n            )\n    \n        if http_error_msg:\n>           raise HTTPError(http_error_msg, response=self)\nE           requests.exceptions.HTTPError: 400 Client Error: Bad Request for url: https://api-mcshared.uat.cstar.pagopa.it/auth/token\n\n/opt/hostedtoolcache/Python/3.13.3/x64/lib/python3.13/site-packages/requests/models.py:1024: HTTPError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"_session_faker","time":{"start":1749484599772,"stop":1749484599830,"duration":58},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"afterStages":[],"labels":[{"name":"feature","value":"RTP Send"},{"name":"story","value":"Service provider sends an RTP to a provider"},{"name":"tag","value":"poste"},{"name":"tag","value":"real_integration"},{"name":"tag","value":"happy_path"},{"name":"tag","value":"send"},{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_send_rtp"},{"name":"host","value":"pkrvmf6wy0o8zjz"},{"name":"thread","value":"2506-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_send_rtp"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":14,"broken":5,"skipped":0,"passed":0,"unknown":0,"total":19},"items":[{"uid":"a4ae18b1de3d4ada","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/369//#testresult/a4ae18b1de3d4ada","status":"broken","statusDetails":"requests.exceptions.HTTPError: 400 Client Error: Bad Request for url: https://api-mcshared.uat.cstar.pagopa.it/auth/token","time":{"start":1749484265955,"stop":1749484266569,"duration":614}},{"uid":"d3a12e6d2115246a","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/368//#testresult/d3a12e6d2115246a","status":"broken","statusDetails":"requests.exceptions.HTTPError: 400 Client Error: Bad Request for url: https://api-mcshared.uat.cstar.pagopa.it/auth/token","time":{"start":1749483924129,"stop":1749483924627,"duration":498}},{"uid":"ab397e57b65090ad","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/365//#testresult/ab397e57b65090ad","status":"failed","statusDetails":"AssertionError: assert 504 == 201\n +  where 504 = <Response [504]>.status_code","time":{"start":1749482252423,"stop":1749482313276,"duration":60853}},{"uid":"27b285b556d93003","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/367//#testresult/27b285b556d93003","status":"broken","statusDetails":"requests.exceptions.HTTPError: 400 Client Error: Bad Request for url: https://api-mcshared.uat.cstar.pagopa.it/auth/token","time":{"start":1749482231629,"stop":1749482232238,"duration":609}},{"uid":"1698bad986e879b7","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/363//#testresult/1698bad986e879b7","status":"failed","statusDetails":"AssertionError: assert 504 == 201\n +  where 504 = <Response [504]>.status_code","time":{"start":1749453038786,"stop":1749453099582,"duration":60796}},{"uid":"c99b436b7d41376f","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/362//#testresult/c99b436b7d41376f","status":"failed","statusDetails":"AssertionError: assert 504 == 201\n +  where 504 = <Response [504]>.status_code","time":{"start":1749366592759,"stop":1749366653974,"duration":61215}},{"uid":"9f8c46674abd110b","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/361//#testresult/9f8c46674abd110b","status":"failed","statusDetails":"AssertionError: assert 504 == 201\n +  where 504 = <Response [504]>.status_code","time":{"start":1749280166022,"stop":1749280226856,"duration":60834}},{"uid":"fdd96d1d16baa5e4","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/360//#testresult/fdd96d1d16baa5e4","status":"failed","statusDetails":"AssertionError: assert 504 == 201\n +  where 504 = <Response [504]>.status_code","time":{"start":1749193775028,"stop":1749193835693,"duration":60665}},{"uid":"b94bbe3db34ff659","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/359//#testresult/b94bbe3db34ff659","status":"failed","statusDetails":"AssertionError: assert 504 == 201\n +  where 504 = <Response [504]>.status_code","time":{"start":1749107410217,"stop":1749107471421,"duration":61204}},{"uid":"8f0b502222219776","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/358//#testresult/8f0b502222219776","status":"failed","statusDetails":"AssertionError: assert 504 == 201\n +  where 504 = <Response [504]>.status_code","time":{"start":1749020986169,"stop":1749021046945,"duration":60776}},{"uid":"eaa9faea3d1aa491","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/357//#testresult/eaa9faea3d1aa491","status":"failed","statusDetails":"AssertionError: assert 504 == 201\n +  where 504 = <Response [504]>.status_code","time":{"start":1748956718611,"stop":1748956779307,"duration":60696}},{"uid":"5239a6edbbbbfbe","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/356//#testresult/5239a6edbbbbfbe","status":"failed","statusDetails":"AssertionError: assert 504 == 201\n +  where 504 = <Response [504]>.status_code","time":{"start":1748953285335,"stop":1748953346022,"duration":60687}},{"uid":"902d0c2d2b09f26c","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/355//#testresult/902d0c2d2b09f26c","status":"failed","statusDetails":"AssertionError: assert 504 == 201\n +  where 504 = <Response [504]>.status_code","time":{"start":1748934627184,"stop":1748934687865,"duration":60681}},{"uid":"61be8c8e12d88e5d","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/354//#testresult/61be8c8e12d88e5d","status":"failed","statusDetails":"AssertionError: assert 504 == 201\n +  where 504 = <Response [504]>.status_code","time":{"start":1748848227253,"stop":1748848287942,"duration":60689}},{"uid":"ab2ddc1f44024224","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/353//#testresult/ab2ddc1f44024224","status":"failed","statusDetails":"AssertionError: assert 504 == 201\n +  where 504 = <Response [504]>.status_code","time":{"start":1748761791347,"stop":1748761852549,"duration":61202}},{"uid":"5f065283bc070eee","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/352//#testresult/5f065283bc070eee","status":"failed","statusDetails":"AssertionError: assert 504 == 201\n +  where 504 = <Response [504]>.status_code","time":{"start":1748675372631,"stop":1748675433451,"duration":60820}},{"uid":"a3257512590e40cc","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/351//#testresult/a3257512590e40cc","status":"failed","statusDetails":"AssertionError: assert 504 == 201\n +  where 504 = <Response [504]>.status_code","time":{"start":1748588996046,"stop":1748589057259,"duration":61213}},{"uid":"891917d5be28d3f9","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/350//#testresult/891917d5be28d3f9","status":"broken","statusDetails":"dynaconf.vendor.box.exceptions.BoxKeyError: \"'DynaBox' object has no attribute 'poste_activated_fiscal_code'\"","time":{"start":1748534183171,"stop":1748534183171,"duration":0}}]},"tags":["poste","real_integration","send","happy_path"]},"source":"90bd507fce5fd67a.json","parameterValues":[]}