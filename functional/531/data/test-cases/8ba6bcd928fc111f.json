{"uid":"8ba6bcd928fc111f","name":"An RTP is sent through CBI API","fullName":"tests.test_debtor_service_provider_availability#test_send_rtp_to_cbi","historyId":"f80da3262bf8ce0e665c096b1873cbf4","time":{"start":1757835079387,"stop":1757835081748,"duration":2361},"status":"failed","statusMessage":"AssertionError: assert 400 == 201\n +  where 400 = <Response [400]>.status_code","statusTrace":"@allure.feature('RTP Send')\n    @allure.story('Service provider sends an RTP to CBI directly')\n    @allure.title('An RTP is sent through CBI API')\n    @pytest.mark.send\n    @pytest.mark.happy_path\n    @pytest.mark.cbi\n    def test_send_rtp_to_cbi():\n        rtp_data = generate_rtp_data()\n        cbi_payload = generate_epc_rtp_data(rtp_data, bic='UNCRITMM')\n    \n        auth = client_credentials_to_auth_token(\n            secrets.CBI_client_id, secrets.CBI_client_secret\n        )\n        cert, key = pfx_to_pem(\n            secrets.CBI_client_PFX_base64,\n            secrets.CBI_client_PFX_password_base64,\n            config.cert_path,\n            config.key_path,\n        )\n        cbi_token = get_cbi_access_token(cert, key, auth)\n        response = send_srtp_to_cbi(f\"Bearer {cbi_token}\", cbi_payload)\n>       assert response.status_code == 201\nE       assert 400 == 201\nE        +  where 400 = <Response [400]>.status_code\n\nfunctional-tests/tests/test_debtor_service_provider_availability.py:57: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"_session_faker","time":{"start":1757834289403,"stop":1757834289461,"duration":58},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"afterStages":[],"labels":[{"name":"feature","value":"RTP Send"},{"name":"story","value":"Service provider sends an RTP to CBI directly"},{"name":"tag","value":"cbi"},{"name":"tag","value":"happy_path"},{"name":"tag","value":"send"},{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_debtor_service_provider_availability"},{"name":"host","value":"runnervmf4ws1"},{"name":"thread","value":"2560-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_debtor_service_provider_availability"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":87,"broken":14,"skipped":0,"passed":72,"unknown":0,"total":173},"items":[{"uid":"f34850a42f870389","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/530//#testresult/f34850a42f870389","status":"failed","statusDetails":"AssertionError: assert 504 == 201\n +  where 504 = <Response [504]>.status_code","time":{"start":1757748605599,"stop":1757748667178,"duration":61579}},{"uid":"a7cbe9303eb92071","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/529//#testresult/a7cbe9303eb92071","status":"passed","time":{"start":1757666480750,"stop":1757666485469,"duration":4719}},{"uid":"71cdaaea6041f241","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/528//#testresult/71cdaaea6041f241","status":"passed","time":{"start":1757661673762,"stop":1757661679103,"duration":5341}},{"uid":"2f6d77e67cb52502","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/527//#testresult/2f6d77e67cb52502","status":"passed","time":{"start":1757598380082,"stop":1757598385843,"duration":5761}},{"uid":"eb21c7b240dab1df","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/526//#testresult/eb21c7b240dab1df","status":"passed","time":{"start":1757575306576,"stop":1757575314195,"duration":7619}},{"uid":"9482b779cfcce5a","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/525//#testresult/9482b779cfcce5a","status":"passed","time":{"start":1757489061513,"stop":1757489065868,"duration":4355}},{"uid":"91abfcb2da6c85f5","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/524//#testresult/91abfcb2da6c85f5","status":"failed","statusDetails":"AssertionError: assert 400 == 201\n +  where 400 = <Response [400]>.status_code","time":{"start":1757402536788,"stop":1757402544718,"duration":7930}},{"uid":"c0a767eac6d7334e","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/523//#testresult/c0a767eac6d7334e","status":"failed","statusDetails":"AssertionError: assert 400 == 201\n +  where 400 = <Response [400]>.status_code","time":{"start":1757316132913,"stop":1757316138223,"duration":5310}},{"uid":"335237e02c41e4f7","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/522//#testresult/335237e02c41e4f7","status":"failed","statusDetails":"AssertionError: assert 400 == 201\n +  where 400 = <Response [400]>.status_code","time":{"start":1757229678294,"stop":1757229683540,"duration":5246}},{"uid":"eb580ebba21e6aa1","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/521//#testresult/eb580ebba21e6aa1","status":"failed","statusDetails":"AssertionError: assert 400 == 201\n +  where 400 = <Response [400]>.status_code","time":{"start":1757143226076,"stop":1757143243348,"duration":17272}},{"uid":"c41a488885e6058","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/520//#testresult/c41a488885e6058","status":"failed","statusDetails":"AssertionError: assert 400 == 201\n +  where 400 = <Response [400]>.status_code","time":{"start":1757057118919,"stop":1757057124130,"duration":5211}},{"uid":"2225ea9427abe337","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/519//#testresult/2225ea9427abe337","status":"failed","statusDetails":"AssertionError: assert 400 == 201\n +  where 400 = <Response [400]>.status_code","time":{"start":1756969662193,"stop":1756969670318,"duration":8125}},{"uid":"63029d0cf3d7d58f","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/518//#testresult/63029d0cf3d7d58f","status":"failed","statusDetails":"AssertionError: assert 400 == 201\n +  where 400 = <Response [400]>.status_code","time":{"start":1756910892821,"stop":1756910900541,"duration":7720}},{"uid":"e598ab896b9a6bdb","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/517//#testresult/e598ab896b9a6bdb","status":"failed","statusDetails":"AssertionError: assert 400 == 201\n +  where 400 = <Response [400]>.status_code","time":{"start":1756883285969,"stop":1756883290485,"duration":4516}},{"uid":"cd5ea97ff88568e2","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/516//#testresult/cd5ea97ff88568e2","status":"failed","statusDetails":"AssertionError: assert 400 == 201\n +  where 400 = <Response [400]>.status_code","time":{"start":1756798009297,"stop":1756798013935,"duration":4638}},{"uid":"6933944d78786b34","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/515//#testresult/6933944d78786b34","status":"failed","statusDetails":"AssertionError: assert 400 == 201\n +  where 400 = <Response [400]>.status_code","time":{"start":1756796878746,"stop":1756796887629,"duration":8883}},{"uid":"bdb0aaefd2f0cbf8","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/514//#testresult/bdb0aaefd2f0cbf8","status":"failed","statusDetails":"AssertionError: assert 400 == 201\n +  where 400 = <Response [400]>.status_code","time":{"start":1756719615688,"stop":1756719619683,"duration":3995}},{"uid":"a791c53c6968ddf","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/513//#testresult/a791c53c6968ddf","status":"failed","statusDetails":"AssertionError: assert 400 == 201\n +  where 400 = <Response [400]>.status_code","time":{"start":1756710561182,"stop":1756710568770,"duration":7588}},{"uid":"733acaec2cdd3654","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/512//#testresult/733acaec2cdd3654","status":"failed","statusDetails":"AssertionError: assert 400 == 201\n +  where 400 = <Response [400]>.status_code","time":{"start":1756624037198,"stop":1756624042237,"duration":5039}},{"uid":"8c0f82d7f9925217","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/511//#testresult/8c0f82d7f9925217","status":"failed","statusDetails":"AssertionError: assert 400 == 201\n +  where 400 = <Response [400]>.status_code","time":{"start":1756537629082,"stop":1756537633573,"duration":4491}}]},"tags":["cbi","send","happy_path"]},"source":"8ba6bcd928fc111f.json","parameterValues":[]}