{"uid":"32907e340b617d61","name":"An RTP is sent through CBI API","fullName":"tests.test_debtor_service_provider_availability#test_send_rtp_to_cbi","historyId":"f80da3262bf8ce0e665c096b1873cbf4","time":{"start":1754032271140,"stop":1754032272846,"duration":1706},"status":"failed","statusMessage":"AssertionError: assert 400 == 201\n +  where 400 = <Response [400]>.status_code","statusTrace":"@allure.feature('RTP Send')\n    @allure.story('Service provider sends an RTP to CBI directly')\n    @allure.title('An RTP is sent through CBI API')\n    @pytest.mark.send\n    @pytest.mark.happy_path\n    @pytest.mark.cbi\n    def test_send_rtp_to_cbi():\n        rtp_data = generate_rtp_data()\n        cbi_payload = generate_epc_rtp_data(rtp_data, bic='UNCRITMM')\n    \n        auth = client_credentials_to_auth_token(\n            secrets.CBI_client_id, secrets.CBI_client_secret\n        )\n        cert, key = pfx_to_pem(\n            secrets.CBI_client_PFX_base64,\n            secrets.CBI_client_PFX_password_base64,\n            config.cert_path,\n            config.key_path,\n        )\n        cbi_token = get_cbi_access_token(cert, key, auth)\n        response = send_srtp_to_cbi(f\"Bearer {cbi_token}\", cbi_payload)\n>       assert response.status_code == 201\nE       assert 400 == 201\nE        +  where 400 = <Response [400]>.status_code\n\nfunctional-tests/tests/test_debtor_service_provider_availability.py:57: AssertionError","flaky":true,"newFailed":true,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"_session_faker","time":{"start":1754032238703,"stop":1754032238758,"duration":55},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"afterStages":[],"labels":[{"name":"feature","value":"RTP Send"},{"name":"story","value":"Service provider sends an RTP to CBI directly"},{"name":"tag","value":"cbi"},{"name":"tag","value":"happy_path"},{"name":"tag","value":"send"},{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_debtor_service_provider_availability"},{"name":"host","value":"pkrvmjbmru5nbw0"},{"name":"thread","value":"2639-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_debtor_service_provider_availability"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":66,"broken":11,"skipped":0,"passed":33,"unknown":0,"total":110},"items":[{"uid":"fe962d3a4ad1fabe","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/465//#testresult/fe962d3a4ad1fabe","status":"passed","time":{"start":1753974017892,"stop":1753974025401,"duration":7509}},{"uid":"fbf0bd27ee32d904","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/464//#testresult/fbf0bd27ee32d904","status":"failed","statusDetails":"AssertionError: assert 400 == 201\n +  where 400 = <Response [400]>.status_code","time":{"start":1753945830733,"stop":1753945833002,"duration":2269}},{"uid":"ebaa2d91859d2c9","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/463//#testresult/ebaa2d91859d2c9","status":"failed","statusDetails":"AssertionError: assert 400 == 201\n +  where 400 = <Response [400]>.status_code","time":{"start":1753878269119,"stop":1753878271221,"duration":2102}},{"uid":"953cedbf8bf64b5c","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/462//#testresult/953cedbf8bf64b5c","status":"passed","time":{"start":1753859477589,"stop":1753859482864,"duration":5275}},{"uid":"5c7612a4f2f124a2","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/461//#testresult/5c7612a4f2f124a2","status":"passed","time":{"start":1753773033035,"stop":1753773041432,"duration":8397}},{"uid":"7e25191713720b7a","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/460//#testresult/7e25191713720b7a","status":"passed","time":{"start":1753686709523,"stop":1753686717165,"duration":7642}},{"uid":"2fb2695b39d9f75c","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/459//#testresult/2fb2695b39d9f75c","status":"passed","time":{"start":1753600047708,"stop":1753600056200,"duration":8492}},{"uid":"1874ebe9081b5bca","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/458//#testresult/1874ebe9081b5bca","status":"passed","time":{"start":1753513659109,"stop":1753513667767,"duration":8658}},{"uid":"9d3e89971ed1c203","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/457//#testresult/9d3e89971ed1c203","status":"passed","time":{"start":1753433561587,"stop":1753433566317,"duration":4730}},{"uid":"b760b4978b976735","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/456//#testresult/b760b4978b976735","status":"passed","time":{"start":1753427385231,"stop":1753427389953,"duration":4722}},{"uid":"fed4deb16ee3b5c4","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/455//#testresult/fed4deb16ee3b5c4","status":"failed","statusDetails":"AssertionError: assert 400 == 201\n +  where 400 = <Response [400]>.status_code","time":{"start":1753366987266,"stop":1753366989557,"duration":2291}},{"uid":"5601fb7799b1f03f","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/454//#testresult/5601fb7799b1f03f","status":"passed","time":{"start":1753351348969,"stop":1753351352721,"duration":3752}},{"uid":"67a35365640b85f7","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/453//#testresult/67a35365640b85f7","status":"passed","time":{"start":1753340992562,"stop":1753341001011,"duration":8449}},{"uid":"c1e2f31024763c37","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/452//#testresult/c1e2f31024763c37","status":"passed","time":{"start":1753254615205,"stop":1753254622746,"duration":7541}},{"uid":"6bbf9bee4fab018b","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/451//#testresult/6bbf9bee4fab018b","status":"failed","statusDetails":"AssertionError: assert 400 == 201\n +  where 400 = <Response [400]>.status_code","time":{"start":1753168179528,"stop":1753168181115,"duration":1587}},{"uid":"13346a324958434e","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/450//#testresult/13346a324958434e","status":"broken","statusDetails":"requests.exceptions.SSLError: HTTPSConnectionPool(host='stgcbiglobeopenbankingapigateway.nexi.it', port=443): Max retries exceeded with url: /nexi/oauth/v2/token (Caused by SSLError(SSLEOFError(8, '[SSL: UNEXPECTED_EOF_WHILE_READING] EOF occurred in violation of protocol (_ssl.c:1028)')))","time":{"start":1753081900969,"stop":1753081901375,"duration":406}},{"uid":"634ee8e3224a9324","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/449//#testresult/634ee8e3224a9324","status":"failed","statusDetails":"AssertionError: assert 400 == 201\n +  where 400 = <Response [400]>.status_code","time":{"start":1752995257208,"stop":1752995266298,"duration":9090}},{"uid":"76bfc18920e2155a","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/448//#testresult/76bfc18920e2155a","status":"failed","statusDetails":"AssertionError: assert 400 == 201\n +  where 400 = <Response [400]>.status_code","time":{"start":1752908896421,"stop":1752908903019,"duration":6598}},{"uid":"632917b452f4f3bc","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/447//#testresult/632917b452f4f3bc","status":"passed","time":{"start":1752822620758,"stop":1752822628170,"duration":7412}},{"uid":"cc7a2380658fb42e","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/446//#testresult/cc7a2380658fb42e","status":"passed","time":{"start":1752736171395,"stop":1752736179882,"duration":8487}}]},"tags":["cbi","send","happy_path"]},"source":"32907e340b617d61.json","parameterValues":[]}