{"uid":"2629953abdf16a9d","name":"Invalid pagination parameters returns 400","fullName":"functional-tests.tests.test_activation#test_get_all_activations_invalid_params","historyId":"495b89c77372f0fca35211e92c389df5","time":{"start":1761805356726,"stop":1761805357981,"duration":1255},"status":"failed","statusMessage":"AssertionError: Expected 400 for invalid params, got 200\nassert 200 == 400\n +  where 200 = <Response [200]>.status_code","statusTrace":"page = -1, size = 16\n\n    @allure.feature('Activation')\n    @allure.story('List Activations')\n    @allure.title('Invalid pagination parameters returns 400')\n    @pytest.mark.auth\n    @pytest.mark.activation\n    @pytest.mark.unhappy_path\n    @pytest.mark.parametrize('page,size', [(-1,16), (0,-5)])\n    def test_get_all_activations_invalid_params(page, size):\n        access_token = get_valid_access_token(\n            client_id=secrets.debtor_service_provider.client_id,\n            client_secret=secrets.debtor_service_provider.client_secret,\n            access_token_function=get_access_token\n        )\n        res = get_all_activations(access_token, page=page, size=size)\n>       assert res.status_code == 400, f'Expected 400 for invalid params, got {res.status_code}'\nE       AssertionError: Expected 400 for invalid params, got 200\nE       assert 200 == 400\nE        +  where 200 = <Response [200]>.status_code\n\nfunctional-tests/tests/test_activation.py:228: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"_session_faker","time":{"start":1761805339882,"stop":1761805339940,"duration":58},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"afterStages":[],"labels":[{"name":"story","value":"List Activations"},{"name":"feature","value":"Activation"},{"name":"tag","value":"unhappy_path"},{"name":"tag","value":"activation"},{"name":"tag","value":"auth"},{"name":"parentSuite","value":"functional-tests.tests"},{"name":"suite","value":"test_activation"},{"name":"host","value":"runnervmwhb2z"},{"name":"thread","value":"2490-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"functional-tests.tests.test_activation"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"page","value":"-1"},{"name":"size","value":"16"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":4,"broken":0,"skipped":0,"passed":24,"unknown":0,"total":28},"items":[{"uid":"9cab01101f8431b9","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/596//#testresult/9cab01101f8431b9","status":"failed","statusDetails":"AssertionError: Expected 400 for invalid params, got 200\nassert 200 == 400\n +  where 200 = <Response [200]>.status_code","time":{"start":1761752075319,"stop":1761752076120,"duration":801}},{"uid":"aed947de9f489d57","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/595//#testresult/aed947de9f489d57","status":"failed","statusDetails":"AssertionError: Expected 400 for invalid params, got 200\nassert 200 == 400\n +  where 200 = <Response [200]>.status_code","time":{"start":1761719067786,"stop":1761719069052,"duration":1266}},{"uid":"fa8c7815b762b385","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/594//#testresult/fa8c7815b762b385","status":"failed","statusDetails":"AssertionError: Expected 400 for invalid params, got 200\nassert 200 == 400\n +  where 200 = <Response [200]>.status_code","time":{"start":1761632699595,"stop":1761632700461,"duration":866}},{"uid":"3b239985f7fe191","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/593//#testresult/3b239985f7fe191","status":"passed","time":{"start":1761546345299,"stop":1761546346586,"duration":1287}},{"uid":"7d76ac16d3e71569","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/592//#testresult/7d76ac16d3e71569","status":"passed","time":{"start":1761459705859,"stop":1761459706906,"duration":1047}},{"uid":"4b6402d64844c709","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/591//#testresult/4b6402d64844c709","status":"passed","time":{"start":1761373263007,"stop":1761373264078,"duration":1071}},{"uid":"f5b4bd1d6f84d2bd","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/590//#testresult/f5b4bd1d6f84d2bd","status":"passed","time":{"start":1761286941106,"stop":1761286942377,"duration":1271}},{"uid":"e96abae52e859d33","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/589//#testresult/e96abae52e859d33","status":"passed","time":{"start":1761200561656,"stop":1761200562749,"duration":1093}},{"uid":"2d0b4f2f4c2d0838","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/588//#testresult/2d0b4f2f4c2d0838","status":"passed","time":{"start":1761114231239,"stop":1761114232017,"duration":778}},{"uid":"9e3b8ec661095d00","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/587//#testresult/9e3b8ec661095d00","status":"passed","time":{"start":1761053804300,"stop":1761053805492,"duration":1192}},{"uid":"e2a97e8a3bf8268a","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/586//#testresult/e2a97e8a3bf8268a","status":"passed","time":{"start":1761040662558,"stop":1761040663322,"duration":764}},{"uid":"cb894f116869444c","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/585//#testresult/cb894f116869444c","status":"passed","time":{"start":1761027781821,"stop":1761027782804,"duration":983}},{"uid":"c0a3172ffc3566e2","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/584//#testresult/c0a3172ffc3566e2","status":"passed","time":{"start":1760941420505,"stop":1760941421419,"duration":914}},{"uid":"c985584752cb4f7c","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/583//#testresult/c985584752cb4f7c","status":"passed","time":{"start":1760854920526,"stop":1760854921355,"duration":829}},{"uid":"4e08782c86470e18","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/582//#testresult/4e08782c86470e18","status":"passed","time":{"start":1760768447232,"stop":1760768448168,"duration":936}},{"uid":"d534deb8cbb2b982","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/581//#testresult/d534deb8cbb2b982","status":"passed","time":{"start":1760682114640,"stop":1760682115527,"duration":887}},{"uid":"8186bbd8d5dde5ae","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/580//#testresult/8186bbd8d5dde5ae","status":"passed","time":{"start":1760624464042,"stop":1760624465362,"duration":1320}},{"uid":"4199268b88b9e201","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/579//#testresult/4199268b88b9e201","status":"passed","time":{"start":1760619646810,"stop":1760619647949,"duration":1139}},{"uid":"a864818834e3f38a","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/578//#testresult/a864818834e3f38a","status":"passed","time":{"start":1760595767120,"stop":1760595767968,"duration":848}},{"uid":"f27613e83a17d8ea","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/577//#testresult/f27613e83a17d8ea","status":"passed","time":{"start":1760523105903,"stop":1760523107143,"duration":1240}}]},"tags":["auth","activation","unhappy_path"]},"source":"2629953abdf16a9d.json","parameterValues":["-1","16"]}