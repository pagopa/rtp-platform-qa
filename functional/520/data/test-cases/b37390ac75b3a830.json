{"uid":"b37390ac75b3a830","name":"An RTP is sent to ICCREA service with activated fiscal code","fullName":"tests.test_send_rtp#test_send_rtp_to_iccrea","historyId":"43c6e6f1884b3efb611eee04b5b6eb0c","time":{"start":1757057143643,"stop":1757057144306,"duration":663},"status":"broken","statusMessage":"requests.exceptions.HTTPError: 502 Server Error: Bad Gateway for url: https://api-mcshared.uat.cstar.pagopa.it/auth/token","statusTrace":"@allure.feature('RTP Send')\n    @allure.story('Service provider sends an RTP to a provider')\n    @allure.title('An RTP is sent to ICCREA service with activated fiscal code')\n    @pytest.mark.send\n    @pytest.mark.happy_path\n    @pytest.mark.real_integration\n    @pytest.mark.iccrea\n    def test_send_rtp_to_iccrea():\n        rtp_data = generate_rtp_data(payer_id=secrets.iccrea_activated_fiscal_code)\n    \n>       creditor_service_provider_access_token = get_valid_access_token(\n            client_id=secrets.creditor_service_provider.client_id,\n            client_secret=secrets.creditor_service_provider.client_secret,\n            access_token_function=get_access_token,\n        )\n\nfunctional-tests/tests/test_send_rtp.py:134: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \napi/auth.py:8: in get_valid_access_token\n    token_response.raise_for_status()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <Response [502]>\n\n    def raise_for_status(self):\n        \"\"\"Raises :class:`HTTPError`, if one occurred.\"\"\"\n    \n        http_error_msg = \"\"\n        if isinstance(self.reason, bytes):\n            # We attempt to decode utf-8 first because some servers\n            # choose to localize their reason strings. If the string\n            # isn't utf-8, we fall back to iso-8859-1 for all other\n            # encodings. (See PR #3538)\n            try:\n                reason = self.reason.decode(\"utf-8\")\n            except UnicodeDecodeError:\n                reason = self.reason.decode(\"iso-8859-1\")\n        else:\n            reason = self.reason\n    \n        if 400 <= self.status_code < 500:\n            http_error_msg = (\n                f\"{self.status_code} Client Error: {reason} for url: {self.url}\"\n            )\n    \n        elif 500 <= self.status_code < 600:\n            http_error_msg = (\n                f\"{self.status_code} Server Error: {reason} for url: {self.url}\"\n            )\n    \n        if http_error_msg:\n>           raise HTTPError(http_error_msg, response=self)\nE           requests.exceptions.HTTPError: 502 Server Error: Bad Gateway for url: https://api-mcshared.uat.cstar.pagopa.it/auth/token\n\n/opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/requests/models.py:1026: HTTPError","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"_session_faker","time":{"start":1757056838070,"stop":1757056838126,"duration":56},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"afterStages":[],"labels":[{"name":"story","value":"Service provider sends an RTP to a provider"},{"name":"feature","value":"RTP Send"},{"name":"tag","value":"iccrea"},{"name":"tag","value":"real_integration"},{"name":"tag","value":"happy_path"},{"name":"tag","value":"send"},{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_send_rtp"},{"name":"host","value":"pkrvm7jw40e0xgp"},{"name":"thread","value":"2510-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_send_rtp"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":59,"broken":18,"skipped":0,"passed":20,"unknown":0,"total":97},"items":[{"uid":"ab32865ea53a74aa","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/519//#testresult/ab32865ea53a74aa","status":"failed","statusDetails":"AssertionError: assert 422 == 201\n +  where 422 = <Response [422]>.status_code","time":{"start":1756969690496,"stop":1756969693633,"duration":3137}},{"uid":"941cd43021e1ddd7","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/518//#testresult/941cd43021e1ddd7","status":"failed","statusDetails":"AssertionError: assert 422 == 201\n +  where 422 = <Response [422]>.status_code","time":{"start":1756910929458,"stop":1756910933173,"duration":3715}},{"uid":"c6a7758b607b7aeb","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/517//#testresult/c6a7758b607b7aeb","status":"failed","statusDetails":"AssertionError: assert 422 == 201\n +  where 422 = <Response [422]>.status_code","time":{"start":1756883311589,"stop":1756883314748,"duration":3159}},{"uid":"d7d28d70feecd377","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/516//#testresult/d7d28d70feecd377","status":"failed","statusDetails":"AssertionError: assert 422 == 201\n +  where 422 = <Response [422]>.status_code","time":{"start":1756798032644,"stop":1756798035002,"duration":2358}},{"uid":"82920d3ea3e4df0e","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/515//#testresult/82920d3ea3e4df0e","status":"failed","statusDetails":"AssertionError: assert 422 == 201\n +  where 422 = <Response [422]>.status_code","time":{"start":1756796908588,"stop":1756796911262,"duration":2674}},{"uid":"e78900e4e2cc7bb7","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/514//#testresult/e78900e4e2cc7bb7","status":"failed","statusDetails":"AssertionError: assert 422 == 201\n +  where 422 = <Response [422]>.status_code","time":{"start":1756719647900,"stop":1756719651589,"duration":3689}},{"uid":"670ae45706153c8e","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/513//#testresult/670ae45706153c8e","status":"failed","statusDetails":"AssertionError: assert 422 == 201\n +  where 422 = <Response [422]>.status_code","time":{"start":1756710595224,"stop":1756710598639,"duration":3415}},{"uid":"285e51fdcadf0e88","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/512//#testresult/285e51fdcadf0e88","status":"failed","statusDetails":"AssertionError: assert 422 == 201\n +  where 422 = <Response [422]>.status_code","time":{"start":1756624062912,"stop":1756624065367,"duration":2455}},{"uid":"d00938b48423924c","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/511//#testresult/d00938b48423924c","status":"failed","statusDetails":"AssertionError: assert 422 == 201\n +  where 422 = <Response [422]>.status_code","time":{"start":1756537655384,"stop":1756537658366,"duration":2982}},{"uid":"c8338f4450f50af7","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/510//#testresult/c8338f4450f50af7","status":"failed","statusDetails":"AssertionError: assert 422 == 201\n +  where 422 = <Response [422]>.status_code","time":{"start":1756451311507,"stop":1756451314739,"duration":3232}},{"uid":"c83144d91b16f31","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/509//#testresult/c83144d91b16f31","status":"failed","statusDetails":"AssertionError: assert 422 == 201\n +  where 422 = <Response [422]>.status_code","time":{"start":1756385976956,"stop":1756385980490,"duration":3534}},{"uid":"7bfcd306ea857d67","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/508//#testresult/7bfcd306ea857d67","status":"failed","statusDetails":"AssertionError: assert 422 == 201\n +  where 422 = <Response [422]>.status_code","time":{"start":1756364945481,"stop":1756364948804,"duration":3323}},{"uid":"1f35d21f64a35bb2","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/507//#testresult/1f35d21f64a35bb2","status":"failed","statusDetails":"AssertionError: assert 422 == 201\n +  where 422 = <Response [422]>.status_code","time":{"start":1756278532208,"stop":1756278535805,"duration":3597}},{"uid":"6f840f68cd864caf","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/506//#testresult/6f840f68cd864caf","status":"failed","statusDetails":"AssertionError: assert 422 == 201\n +  where 422 = <Response [422]>.status_code","time":{"start":1756192121711,"stop":1756192124158,"duration":2447}},{"uid":"d15727aa803793f7","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/505//#testresult/d15727aa803793f7","status":"failed","statusDetails":"AssertionError: assert 422 == 201\n +  where 422 = <Response [422]>.status_code","time":{"start":1756105767835,"stop":1756105770452,"duration":2617}},{"uid":"5152b051a8444b26","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/504//#testresult/5152b051a8444b26","status":"failed","statusDetails":"AssertionError: assert 422 == 201\n +  where 422 = <Response [422]>.status_code","time":{"start":1756019255639,"stop":1756019258317,"duration":2678}},{"uid":"f4d0d072c6208a5","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/503//#testresult/f4d0d072c6208a5","status":"failed","statusDetails":"AssertionError: assert 422 == 201\n +  where 422 = <Response [422]>.status_code","time":{"start":1755932850097,"stop":1755932853490,"duration":3393}},{"uid":"e1996dc0e3ac5985","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/502//#testresult/e1996dc0e3ac5985","status":"failed","statusDetails":"AssertionError: assert 422 == 201\n +  where 422 = <Response [422]>.status_code","time":{"start":1755847723107,"stop":1755847726329,"duration":3222}},{"uid":"7a285f4dbef5dafd","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/501//#testresult/7a285f4dbef5dafd","status":"failed","statusDetails":"AssertionError: assert 422 == 201\n +  where 422 = <Response [422]>.status_code","time":{"start":1755846505816,"stop":1755846508966,"duration":3150}},{"uid":"a35d991ef4d05230","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/500//#testresult/a35d991ef4d05230","status":"failed","statusDetails":"AssertionError: assert 422 == 201\n +  where 422 = <Response [422]>.status_code","time":{"start":1755843971586,"stop":1755843974301,"duration":2715}}]},"tags":["iccrea","real_integration","send","happy_path"]},"source":"b37390ac75b3a830.json","parameterValues":[]}