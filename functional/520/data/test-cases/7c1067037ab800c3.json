{"uid":"7c1067037ab800c3","name":"inexistent RTP -> empty body","fullName":"tests.test_get_rtp#test_get_rtp_not_found","historyId":"f374baeb8e6aa77fbe08e6036a22e13b","time":{"start":1757057137242,"stop":1757057137833,"duration":591},"status":"broken","statusMessage":"requests.exceptions.HTTPError: 502 Server Error: Bad Gateway for url: https://api-mcshared.uat.cstar.pagopa.it/auth/token","statusTrace":"@allure.feature('RTP Get')\n    @allure.story('Service provider retrieves an RTP')\n    @allure.title('inexistent RTP -> empty body')\n    @pytest.mark.get\n    @pytest.mark.unhappy_path\n    def test_get_rtp_not_found():\n        fake_rtp_id = str(uuid.uuid4())\n    \n>       token = get_valid_access_token(\n            client_id=secrets.creditor_service_provider.client_id,\n            client_secret=secrets.creditor_service_provider.client_secret,\n            access_token_function=get_access_token,\n        )\n\nfunctional-tests/tests/test_get_rtp.py:67: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \napi/auth.py:8: in get_valid_access_token\n    token_response.raise_for_status()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <Response [502]>\n\n    def raise_for_status(self):\n        \"\"\"Raises :class:`HTTPError`, if one occurred.\"\"\"\n    \n        http_error_msg = \"\"\n        if isinstance(self.reason, bytes):\n            # We attempt to decode utf-8 first because some servers\n            # choose to localize their reason strings. If the string\n            # isn't utf-8, we fall back to iso-8859-1 for all other\n            # encodings. (See PR #3538)\n            try:\n                reason = self.reason.decode(\"utf-8\")\n            except UnicodeDecodeError:\n                reason = self.reason.decode(\"iso-8859-1\")\n        else:\n            reason = self.reason\n    \n        if 400 <= self.status_code < 500:\n            http_error_msg = (\n                f\"{self.status_code} Client Error: {reason} for url: {self.url}\"\n            )\n    \n        elif 500 <= self.status_code < 600:\n            http_error_msg = (\n                f\"{self.status_code} Server Error: {reason} for url: {self.url}\"\n            )\n    \n        if http_error_msg:\n>           raise HTTPError(http_error_msg, response=self)\nE           requests.exceptions.HTTPError: 502 Server Error: Bad Gateway for url: https://api-mcshared.uat.cstar.pagopa.it/auth/token\n\n/opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/requests/models.py:1026: HTTPError","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"_session_faker","time":{"start":1757056838070,"stop":1757056838126,"duration":56},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"afterStages":[],"labels":[{"name":"story","value":"Service provider retrieves an RTP"},{"name":"feature","value":"RTP Get"},{"name":"tag","value":"unhappy_path"},{"name":"tag","value":"get"},{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_get_rtp"},{"name":"host","value":"pkrvm7jw40e0xgp"},{"name":"thread","value":"2510-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_get_rtp"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":43,"broken":19,"skipped":0,"passed":70,"unknown":0,"total":132},"items":[{"uid":"65e4c10b7831d0c2","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/519//#testresult/65e4c10b7831d0c2","status":"failed","statusDetails":"AssertionError: Status code: 403, body: \nassert 403 in (404, 204)\n +  where 403 = <Response [403]>.status_code","time":{"start":1756969679522,"stop":1756969680332,"duration":810}},{"uid":"85ce41346e481aef","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/518//#testresult/85ce41346e481aef","status":"failed","statusDetails":"AssertionError: Status code: 403, body: \nassert 403 in (404, 204)\n +  where 403 = <Response [403]>.status_code","time":{"start":1756910913866,"stop":1756910915183,"duration":1317}},{"uid":"3f45928531cedb1e","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/517//#testresult/3f45928531cedb1e","status":"failed","statusDetails":"AssertionError: Status code: 403, body: \nassert 403 in (404, 204)\n +  where 403 = <Response [403]>.status_code","time":{"start":1756883300789,"stop":1756883301671,"duration":882}},{"uid":"3161e53920067c9c","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/516//#testresult/3161e53920067c9c","status":"failed","statusDetails":"AssertionError: Status code: 403, body: \nassert 403 in (404, 204)\n +  where 403 = <Response [403]>.status_code","time":{"start":1756798023255,"stop":1756798024030,"duration":775}},{"uid":"4303bc11393372a7","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/515//#testresult/4303bc11393372a7","status":"failed","statusDetails":"AssertionError: Status code: 403, body: \nassert 403 in (404, 204)\n +  where 403 = <Response [403]>.status_code","time":{"start":1756796897927,"stop":1756796898714,"duration":787}},{"uid":"e7db33d0e2bcfa75","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/514//#testresult/e7db33d0e2bcfa75","status":"failed","statusDetails":"AssertionError: Status code: 403, body: \nassert 403 in (404, 204)\n +  where 403 = <Response [403]>.status_code","time":{"start":1756719632559,"stop":1756719633841,"duration":1282}},{"uid":"ce14dd7755aa27e5","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/513//#testresult/ce14dd7755aa27e5","status":"failed","statusDetails":"AssertionError: Status code: 403, body: \nassert 403 in (404, 204)\n +  where 403 = <Response [403]>.status_code","time":{"start":1756710580986,"stop":1756710582161,"duration":1175}},{"uid":"ebdbab99a6185ef","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/512//#testresult/ebdbab99a6185ef","status":"failed","statusDetails":"AssertionError: Status code: 403, body: \nassert 403 in (404, 204)\n +  where 403 = <Response [403]>.status_code","time":{"start":1756624052823,"stop":1756624053584,"duration":761}},{"uid":"56505f132f9214c4","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/511//#testresult/56505f132f9214c4","status":"failed","statusDetails":"AssertionError: Status code: 403, body: \nassert 403 in (404, 204)\n +  where 403 = <Response [403]>.status_code","time":{"start":1756537644210,"stop":1756537645022,"duration":812}},{"uid":"426f2bbce4174acf","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/510//#testresult/426f2bbce4174acf","status":"failed","statusDetails":"AssertionError: Status code: 403, body: \nassert 403 in (404, 204)\n +  where 403 = <Response [403]>.status_code","time":{"start":1756451300780,"stop":1756451301669,"duration":889}},{"uid":"66f40ce948a21604","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/509//#testresult/66f40ce948a21604","status":"failed","statusDetails":"AssertionError: Status code: 403, body: \nassert 403 in (404, 204)\n +  where 403 = <Response [403]>.status_code","time":{"start":1756385961712,"stop":1756385963007,"duration":1295}},{"uid":"d78334bde8126294","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/508//#testresult/d78334bde8126294","status":"failed","statusDetails":"AssertionError: Status code: 403, body: \nassert 403 in (404, 204)\n +  where 403 = <Response [403]>.status_code","time":{"start":1756364929742,"stop":1756364931006,"duration":1264}},{"uid":"df9bc8efc29ba9a8","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/507//#testresult/df9bc8efc29ba9a8","status":"failed","statusDetails":"AssertionError: Status code: 403, body: \nassert 403 in (404, 204)\n +  where 403 = <Response [403]>.status_code","time":{"start":1756278516244,"stop":1756278517567,"duration":1323}},{"uid":"df449fdb32b3a5d6","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/506//#testresult/df449fdb32b3a5d6","status":"failed","statusDetails":"AssertionError: Status code: 403, body: \nassert 403 in (404, 204)\n +  where 403 = <Response [403]>.status_code","time":{"start":1756192109941,"stop":1756192110746,"duration":805}},{"uid":"fd2da99d489e721a","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/505//#testresult/fd2da99d489e721a","status":"failed","statusDetails":"AssertionError: Status code: 403, body: \nassert 403 in (404, 204)\n +  where 403 = <Response [403]>.status_code","time":{"start":1756105757464,"stop":1756105758256,"duration":792}},{"uid":"1f10e95a7d48cb40","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/504//#testresult/1f10e95a7d48cb40","status":"failed","statusDetails":"AssertionError: Status code: 403, body: \nassert 403 in (404, 204)\n +  where 403 = <Response [403]>.status_code","time":{"start":1756019245074,"stop":1756019245830,"duration":756}},{"uid":"28b2e9eeae4d4899","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/503//#testresult/28b2e9eeae4d4899","status":"failed","statusDetails":"AssertionError: Status code: 403, body: \nassert 403 in (404, 204)\n +  where 403 = <Response [403]>.status_code","time":{"start":1755932837638,"stop":1755932838535,"duration":897}},{"uid":"30327171f57d6f87","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/502//#testresult/30327171f57d6f87","status":"failed","statusDetails":"AssertionError: Status code: 403, body: \nassert 403 in (404, 204)\n +  where 403 = <Response [403]>.status_code","time":{"start":1755847704601,"stop":1755847705779,"duration":1178}},{"uid":"7df0d11fe2a24e18","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/501//#testresult/7df0d11fe2a24e18","status":"failed","statusDetails":"AssertionError: Status code: 403, body: \nassert 403 in (404, 204)\n +  where 403 = <Response [403]>.status_code","time":{"start":1755846493690,"stop":1755846494609,"duration":919}},{"uid":"8ad7dcf2f1e168a1","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/500//#testresult/8ad7dcf2f1e168a1","status":"failed","statusDetails":"AssertionError: Status code: 403, body: \nassert 403 in (404, 204)\n +  where 403 = <Response [403]>.status_code","time":{"start":1755843958914,"stop":1755843959801,"duration":887}}]},"tags":["get","unhappy_path"]},"source":"7c1067037ab800c3.json","parameterValues":[]}