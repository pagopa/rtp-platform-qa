{"uid":"3202327fe4cc61be","name":"An RTP callback is successfully received","fullName":"tests.test_callback#test_receive_rtp_callback_DS_08N_compliant","historyId":"d5748ad5568cbf463a334911f922c3be","time":{"start":1757057090067,"stop":1757057090673,"duration":606},"status":"broken","statusMessage":"requests.exceptions.HTTPError: 502 Server Error: Bad Gateway for url: https://api-mcshared.uat.cstar.pagopa.it/auth/token","statusTrace":"@allure.feature('RTP Callback')\n    @allure.story('Service provider sends a callback referred to an RTP')\n    @allure.title('An RTP callback is successfully received')\n    @pytest.mark.callback\n    @pytest.mark.happy_path\n    def test_receive_rtp_callback_DS_08N_compliant():\n        rtp_data = generate_rtp_data()\n    \n>       debtor_service_provider_access_token = get_valid_access_token(\n            client_id=secrets.debtor_service_provider.client_id,\n            client_secret=secrets.debtor_service_provider.client_secret,\n            access_token_function=get_access_token,\n        )\n\nfunctional-tests/tests/test_callback.py:85: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \napi/auth.py:8: in get_valid_access_token\n    token_response.raise_for_status()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <Response [502]>\n\n    def raise_for_status(self):\n        \"\"\"Raises :class:`HTTPError`, if one occurred.\"\"\"\n    \n        http_error_msg = \"\"\n        if isinstance(self.reason, bytes):\n            # We attempt to decode utf-8 first because some servers\n            # choose to localize their reason strings. If the string\n            # isn't utf-8, we fall back to iso-8859-1 for all other\n            # encodings. (See PR #3538)\n            try:\n                reason = self.reason.decode(\"utf-8\")\n            except UnicodeDecodeError:\n                reason = self.reason.decode(\"iso-8859-1\")\n        else:\n            reason = self.reason\n    \n        if 400 <= self.status_code < 500:\n            http_error_msg = (\n                f\"{self.status_code} Client Error: {reason} for url: {self.url}\"\n            )\n    \n        elif 500 <= self.status_code < 600:\n            http_error_msg = (\n                f\"{self.status_code} Server Error: {reason} for url: {self.url}\"\n            )\n    \n        if http_error_msg:\n>           raise HTTPError(http_error_msg, response=self)\nE           requests.exceptions.HTTPError: 502 Server Error: Bad Gateway for url: https://api-mcshared.uat.cstar.pagopa.it/auth/token\n\n/opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/requests/models.py:1026: HTTPError","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"_session_faker","time":{"start":1757056838070,"stop":1757056838126,"duration":56},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"afterStages":[],"labels":[{"name":"story","value":"Service provider sends a callback referred to an RTP"},{"name":"feature","value":"RTP Callback"},{"name":"tag","value":"happy_path"},{"name":"tag","value":"callback"},{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_callback"},{"name":"host","value":"pkrvm7jw40e0xgp"},{"name":"thread","value":"2510-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_callback"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":43,"broken":18,"skipped":0,"passed":4,"unknown":0,"total":65},"items":[{"uid":"e804f46556c0b0de","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/519//#testresult/e804f46556c0b0de","status":"failed","statusDetails":"AssertionError: assert 403 == 200\n +  where 403 = <Response [403]>.status_code","time":{"start":1756969621934,"stop":1756969624476,"duration":2542}},{"uid":"932f01eddf31b571","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/518//#testresult/932f01eddf31b571","status":"failed","statusDetails":"AssertionError: assert 403 == 200\n +  where 403 = <Response [403]>.status_code","time":{"start":1756910831639,"stop":1756910835613,"duration":3974}},{"uid":"2c7c32ca98bb585e","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/517//#testresult/2c7c32ca98bb585e","status":"failed","statusDetails":"AssertionError: assert 403 == 200\n +  where 403 = <Response [403]>.status_code","time":{"start":1756883242652,"stop":1756883245489,"duration":2837}},{"uid":"ee7bcd16f917a5ef","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/516//#testresult/ee7bcd16f917a5ef","status":"failed","statusDetails":"AssertionError: assert 403 == 200\n +  where 403 = <Response [403]>.status_code","time":{"start":1756797970308,"stop":1756797972730,"duration":2422}},{"uid":"defe61553d65f8d5","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/515//#testresult/defe61553d65f8d5","status":"failed","statusDetails":"AssertionError: assert 403 == 200\n +  where 403 = <Response [403]>.status_code","time":{"start":1756796838770,"stop":1756796841247,"duration":2477}},{"uid":"824ad1c138143644","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/514//#testresult/824ad1c138143644","status":"failed","statusDetails":"AssertionError: assert 403 == 200\n +  where 403 = <Response [403]>.status_code","time":{"start":1756719560002,"stop":1756719563911,"duration":3909}},{"uid":"2d2f27b98b8f9bb3","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/513//#testresult/2d2f27b98b8f9bb3","status":"failed","statusDetails":"AssertionError: assert 403 == 200\n +  where 403 = <Response [403]>.status_code","time":{"start":1756710508716,"stop":1756710512291,"duration":3575}},{"uid":"98a36dc4008bebfa","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/512//#testresult/98a36dc4008bebfa","status":"failed","statusDetails":"AssertionError: assert 403 == 200\n +  where 403 = <Response [403]>.status_code","time":{"start":1756623991561,"stop":1756623994196,"duration":2635}},{"uid":"4395cb00d0859027","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/511//#testresult/4395cb00d0859027","status":"failed","statusDetails":"AssertionError: assert 403 == 200\n +  where 403 = <Response [403]>.status_code","time":{"start":1756537589128,"stop":1756537591626,"duration":2498}},{"uid":"87b55a03ca0e7351","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/510//#testresult/87b55a03ca0e7351","status":"failed","statusDetails":"AssertionError: assert 403 == 200\n +  where 403 = <Response [403]>.status_code","time":{"start":1756451231436,"stop":1756451234167,"duration":2731}},{"uid":"8eefa9c6fa42aa85","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/509//#testresult/8eefa9c6fa42aa85","status":"failed","statusDetails":"AssertionError: assert 403 == 200\n +  where 403 = <Response [403]>.status_code","time":{"start":1756385881394,"stop":1756385885363,"duration":3969}},{"uid":"fcfcdeff1265ccce","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/508//#testresult/fcfcdeff1265ccce","status":"failed","statusDetails":"AssertionError: assert 403 == 200\n +  where 403 = <Response [403]>.status_code","time":{"start":1756364849603,"stop":1756364853693,"duration":4090}},{"uid":"b2fa60ac6254efa8","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/507//#testresult/b2fa60ac6254efa8","status":"failed","statusDetails":"AssertionError: assert 403 == 200\n +  where 403 = <Response [403]>.status_code","time":{"start":1756278438068,"stop":1756278442406,"duration":4338}},{"uid":"cee8a2df4f1c1522","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/506//#testresult/cee8a2df4f1c1522","status":"failed","statusDetails":"AssertionError: assert 403 == 200\n +  where 403 = <Response [403]>.status_code","time":{"start":1756192053121,"stop":1756192055707,"duration":2586}},{"uid":"483e66b3b03f31cb","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/505//#testresult/483e66b3b03f31cb","status":"failed","statusDetails":"AssertionError: assert 403 == 200\n +  where 403 = <Response [403]>.status_code","time":{"start":1756105684914,"stop":1756105687458,"duration":2544}},{"uid":"b27c2fb8960a9d31","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/504//#testresult/b27c2fb8960a9d31","status":"failed","statusDetails":"AssertionError: assert 403 == 200\n +  where 403 = <Response [403]>.status_code","time":{"start":1756019189134,"stop":1756019191622,"duration":2488}},{"uid":"21463edef1a4e071","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/503//#testresult/21463edef1a4e071","status":"failed","statusDetails":"AssertionError: assert 403 == 200\n +  where 403 = <Response [403]>.status_code","time":{"start":1755932776075,"stop":1755932778799,"duration":2724}},{"uid":"9a99b25c36e97e48","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/502//#testresult/9a99b25c36e97e48","status":"failed","statusDetails":"AssertionError: assert 403 == 200\n +  where 403 = <Response [403]>.status_code","time":{"start":1755847636911,"stop":1755847640437,"duration":3526}},{"uid":"80c6bb7f4ea969be","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/501//#testresult/80c6bb7f4ea969be","status":"failed","statusDetails":"AssertionError: assert 403 == 200\n +  where 403 = <Response [403]>.status_code","time":{"start":1755846437889,"stop":1755846440578,"duration":2689}},{"uid":"ceaf576ded781a78","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/500//#testresult/ceaf576ded781a78","status":"failed","statusDetails":"AssertionError: assert 403 == 200\n +  where 403 = <Response [403]>.status_code","time":{"start":1755843890727,"stop":1755843893456,"duration":2729}}]},"tags":["callback","happy_path"]},"source":"3202327fe4cc61be.json","parameterValues":[]}