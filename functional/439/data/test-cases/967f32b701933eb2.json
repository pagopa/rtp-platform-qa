{"uid":"967f32b701933eb2","name":"An RTP is sent through CBI API","fullName":"tests.test_debtor_service_provider_availability#test_send_rtp_to_cbi","historyId":"f80da3262bf8ce0e665c096b1873cbf4","time":{"start":1752304092455,"stop":1752304098229,"duration":5774},"status":"failed","statusMessage":"AssertionError: assert 400 == 201\n +  where 400 = <Response [400]>.status_code","statusTrace":"@allure.feature('RTP Send')\n    @allure.story('Service provider sends an RTP to CBI directly')\n    @allure.title('An RTP is sent through CBI API')\n    @pytest.mark.send\n    @pytest.mark.happy_path\n    @pytest.mark.cbi\n    def test_send_rtp_to_cbi():\n        rtp_data = generate_rtp_data()\n        cbi_payload = generate_epc_rtp_data(rtp_data, bic='UNCRITMM')\n    \n        auth = client_credentials_to_auth_token(\n            secrets.CBI_client_id, secrets.CBI_client_secret\n        )\n        cert, key = pfx_to_pem(\n            secrets.CBI_client_PFX_base64,\n            secrets.CBI_client_PFX_password_base64,\n            config.cert_path,\n            config.key_path,\n        )\n        cbi_token = get_cbi_access_token(cert, key, auth)\n        response = send_srtp_to_cbi(f\"Bearer {cbi_token}\", cbi_payload)\n>       assert response.status_code == 201\nE       assert 400 == 201\nE        +  where 400 = <Response [400]>.status_code\n\nfunctional-tests/tests/test_debtor_service_provider_availability.py:57: AssertionError","flaky":false,"newFailed":true,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"_session_faker","time":{"start":1752304016692,"stop":1752304016747,"duration":55},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"afterStages":[],"labels":[{"name":"story","value":"Service provider sends an RTP to CBI directly"},{"name":"feature","value":"RTP Send"},{"name":"tag","value":"cbi"},{"name":"tag","value":"happy_path"},{"name":"tag","value":"send"},{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_debtor_service_provider_availability"},{"name":"host","value":"pkrvmq0rgcvqdmg"},{"name":"thread","value":"2505-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_debtor_service_provider_availability"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":58,"broken":10,"skipped":0,"passed":15,"unknown":0,"total":83},"items":[{"uid":"e32492a5efda6fd7","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/438//#testresult/e32492a5efda6fd7","status":"broken","statusDetails":"requests.exceptions.SSLError: HTTPSConnectionPool(host='stgcbiglobeopenbankingapigateway.nexi.it', port=443): Max retries exceeded with url: /srtp/core/v1/1.0.0/sepa-request-to-pay-requests (Caused by SSLError(SSLEOFError(8, '[SSL: UNEXPECTED_EOF_WHILE_READING] EOF occurred in violation of protocol (_ssl.c:1028)')))","time":{"start":1752217724766,"stop":1752217726302,"duration":1536}},{"uid":"fbd0fd4993d4077e","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/437//#testresult/fbd0fd4993d4077e","status":"passed","time":{"start":1752163209291,"stop":1752163212524,"duration":3233}},{"uid":"e846eec8f92e3","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/436//#testresult/e846eec8f92e3","status":"passed","time":{"start":1752160521207,"stop":1752160524006,"duration":2799}},{"uid":"a8d819017eea7a4d","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/435//#testresult/a8d819017eea7a4d","status":"passed","time":{"start":1752145253939,"stop":1752145258944,"duration":5005}},{"uid":"db6d6d877e5928f5","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/434//#testresult/db6d6d877e5928f5","status":"passed","time":{"start":1752131319175,"stop":1752131331772,"duration":12597}},{"uid":"e84fb6e582b9bbe4","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/433//#testresult/e84fb6e582b9bbe4","status":"failed","statusDetails":"AssertionError: assert 400 == 201\n +  where 400 = <Response [400]>.status_code","time":{"start":1752049273147,"stop":1752049275205,"duration":2058}},{"uid":"6a5a94834c0a5b74","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/432//#testresult/6a5a94834c0a5b74","status":"passed","time":{"start":1752044905036,"stop":1752044913134,"duration":8098}},{"uid":"30772812d4beec59","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/431//#testresult/30772812d4beec59","status":"passed","time":{"start":1751958496364,"stop":1751958501582,"duration":5218}},{"uid":"d9237d6a9a1fc544","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/430//#testresult/d9237d6a9a1fc544","status":"passed","time":{"start":1751882683107,"stop":1751882687307,"duration":4200}},{"uid":"ac5384512b9b96b2","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/429//#testresult/ac5384512b9b96b2","status":"passed","time":{"start":1751872130216,"stop":1751872136076,"duration":5860}},{"uid":"9f9b063fa6b9d3a4","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/428//#testresult/9f9b063fa6b9d3a4","status":"failed","statusDetails":"AssertionError: assert 400 == 201\n +  where 400 = <Response [400]>.status_code","time":{"start":1751785640613,"stop":1751785647403,"duration":6790}},{"uid":"70e018636badbbd1","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/427//#testresult/70e018636badbbd1","status":"failed","statusDetails":"AssertionError: assert 400 == 201\n +  where 400 = <Response [400]>.status_code","time":{"start":1751699241932,"stop":1751699248251,"duration":6319}},{"uid":"2ece1c9fad42019f","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/426//#testresult/2ece1c9fad42019f","status":"passed","time":{"start":1751612887704,"stop":1751612895762,"duration":8058}},{"uid":"f3d31828aadf3ad5","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/425//#testresult/f3d31828aadf3ad5","status":"passed","time":{"start":1751526500436,"stop":1751526509059,"duration":8623}},{"uid":"361fc6988e522aca","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/424//#testresult/361fc6988e522aca","status":"passed","time":{"start":1751440089275,"stop":1751440098848,"duration":9573}},{"uid":"361263af8c06818e","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/423//#testresult/361263af8c06818e","status":"passed","time":{"start":1751383885918,"stop":1751383889690,"duration":3772}},{"uid":"1efddcf6e8163879","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/422//#testresult/1efddcf6e8163879","status":"passed","time":{"start":1751372105628,"stop":1751372110570,"duration":4942}},{"uid":"219c09de1ae42a2f","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/420//#testresult/219c09de1ae42a2f","status":"failed","statusDetails":"AssertionError: assert 401 == 201\n +  where 401 = <Response [401]>.status_code","time":{"start":1751360003155,"stop":1751360003980,"duration":825}},{"uid":"e0f38216be369c38","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/419//#testresult/e0f38216be369c38","status":"failed","statusDetails":"AssertionError: assert 401 == 201\n +  where 401 = <Response [401]>.status_code","time":{"start":1751353691546,"stop":1751353692761,"duration":1215}},{"uid":"e6f2bf6617720a82","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/418//#testresult/e6f2bf6617720a82","status":"failed","statusDetails":"AssertionError: assert 401 == 201\n +  where 401 = <Response [401]>.status_code","time":{"start":1751267314090,"stop":1751267315733,"duration":1643}}]},"tags":["cbi","send","happy_path"]},"source":"967f32b701933eb2.json","parameterValues":[]}