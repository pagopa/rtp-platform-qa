{"uid":"404e193ea59c90f3","name":"Happy path: a debt position is deleted","fullName":"tests.test_debt_position#test_delete_debt_position_dev_happy_path","historyId":"12f271f0fcc6ad3a5577f2459357dd27","time":{"start":1753433555913,"stop":1753433560113,"duration":4200},"status":"failed","statusMessage":"AssertionError: Expected 404 but got 401\nassert 401 == 404\n +  where 401 = <Response [401]>.status_code","statusTrace":"@allure.feature('Debt Positions')\n    @allure.story('Delete Debt Position')\n    @allure.title('Happy path: a debt position is deleted')\n    @pytest.mark.debt_positions\n    @pytest.mark.happy_path\n    def test_delete_debt_position_dev_happy_path():\n        access_token = get_valid_access_token(\n            client_id=secrets.debtor_service_provider.client_id,\n            client_secret=secrets.debtor_service_provider.client_secret,\n            access_token_function=get_access_token\n        )\n    \n        debtor_fc = fake_fc()\n    \n        activation_response = activate(\n            access_token,\n            debtor_fc,\n            secrets.debtor_service_provider.service_provider_id\n        )\n        assert activation_response.status_code == 201, 'Error activating debtor before creating debt position'\n    \n        subscription_key = secrets.debt_positions_dev.subscription_key\n        organization_id = secrets.debt_positions_dev.organization_id\n    \n        iupd = generate_iupd()\n        iuv = generate_iuv()\n    \n        payload = create_debt_position_payload(debtor_fc=debtor_fc, iupd=iupd, iuv=iuv)\n    \n        create_response = create_debt_position_dev(subscription_key, organization_id, payload, to_publish=True)\n        assert create_response.status_code == 201, f'Expected 201 but got {create_response.status_code}'\n    \n        import time\n        time.sleep(1)\n    \n        delete_response = delete_debt_position_dev(subscription_key, organization_id, iupd)\n        assert delete_response.status_code == 200, f'Expected 200 but got {delete_response.status_code}'\n    \n        get_response = get_debt_position(subscription_key, organization_id, iupd)\n>       assert get_response.status_code == 404, f'Expected 404 but got {get_response.status_code}'\nE       AssertionError: Expected 404 but got 401\nE       assert 401 == 404\nE        +  where 401 = <Response [401]>.status_code\n\nfunctional-tests/tests/test_debt_position.py:169: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"_session_faker","time":{"start":1753433500625,"stop":1753433500681,"duration":56},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"afterStages":[],"labels":[{"name":"feature","value":"Debt Positions"},{"name":"story","value":"Delete Debt Position"},{"name":"tag","value":"happy_path"},{"name":"tag","value":"debt_positions"},{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_debt_position"},{"name":"host","value":"pkrvmpptgkbjq6m"},{"name":"thread","value":"2627-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_debt_position"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"tags":["debt_positions","happy_path"]},"source":"404e193ea59c90f3.json","parameterValues":[]}