{"uid":"bb0d8ef90a0b0fbc","name":"The activation request must contain lower case fiscal code","fullName":"tests.test_activation#test_cannot_activate_debtor_lower_fiscal_code","historyId":"971059c719c6f6b5223e6fd267753e9e","time":{"start":1741590405054,"stop":1741590406874,"duration":1820},"status":"failed","statusMessage":"AssertionError: assert 401 == 400\n +  where 401 = <Response [401]>.status_code","statusTrace":"@allure.feature('Activation')\n    @allure.story('Debtor activation')\n    @allure.title('The activation request must contain lower case fiscal code')\n    @pytest.mark.auth\n    @pytest.mark.activation\n    @pytest.mark.unhappy_path\n    def test_cannot_activate_debtor_lower_fiscal_code():\n        access_token = get_valid_access_token(client_id=secrets.debtor_service_provider.client_id,\n                                              client_secret=secrets.debtor_service_provider.client_secret,\n                                              access_token_function=get_access_token)\n        debtor_fc = fake_fc().lower()\n    \n        res = activate(access_token, debtor_fc, secrets.debtor_service_provider.service_provider_id)\n>       assert res.status_code == 400\nE       assert 401 == 400\nE        +  where 401 = <Response [401]>.status_code\n\nfunctional-tests/tests/test_activation.py:62: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"_session_faker","time":{"start":1741590400379,"stop":1741590400439,"duration":60},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"afterStages":[],"labels":[{"name":"story","value":"Debtor activation"},{"name":"feature","value":"Activation"},{"name":"tag","value":"unhappy_path"},{"name":"tag","value":"activation"},{"name":"tag","value":"auth"},{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_activation"},{"name":"host","value":"fv-az1911-851"},{"name":"thread","value":"2290-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_activation"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":25,"broken":0,"skipped":0,"passed":38,"unknown":0,"total":63},"items":[{"uid":"7b7136131d3a2ae4","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/231//#testresult/7b7136131d3a2ae4","status":"failed","statusDetails":"AssertionError: assert 401 == 400\n +  where 401 = <Response [401]>.status_code","time":{"start":1741503940937,"stop":1741503942967,"duration":2030}},{"uid":"80a4efdb723b6630","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/230//#testresult/80a4efdb723b6630","status":"failed","statusDetails":"AssertionError: assert 401 == 400\n +  where 401 = <Response [401]>.status_code","time":{"start":1741417523695,"stop":1741417526615,"duration":2920}},{"uid":"f09cdb2b1815c710","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/229//#testresult/f09cdb2b1815c710","status":"passed","time":{"start":1741368321873,"stop":1741368323406,"duration":1533}},{"uid":"676e2dd1125bd5b","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/228//#testresult/676e2dd1125bd5b","status":"passed","time":{"start":1741365917944,"stop":1741365920078,"duration":2134}},{"uid":"dca61518c34703be","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/227//#testresult/dca61518c34703be","status":"passed","time":{"start":1741364136305,"stop":1741364138378,"duration":2073}},{"uid":"abf2b3975d7832c3","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/225//#testresult/abf2b3975d7832c3","status":"failed","statusDetails":"AssertionError: assert 401 == 400\n +  where 401 = <Response [401]>.status_code","time":{"start":1741331199599,"stop":1741331201886,"duration":2287}},{"uid":"2f6f95f9fc6a22eb","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/224//#testresult/2f6f95f9fc6a22eb","status":"failed","statusDetails":"AssertionError: assert 401 == 400\n +  where 401 = <Response [401]>.status_code","time":{"start":1741244794945,"stop":1741244796911,"duration":1966}},{"uid":"ecf1e3d63a035a78","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/223//#testresult/ecf1e3d63a035a78","status":"failed","statusDetails":"AssertionError: assert 401 == 400\n +  where 401 = <Response [401]>.status_code","time":{"start":1741158382197,"stop":1741158383922,"duration":1725}},{"uid":"22e30f30b1342c01","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/222//#testresult/22e30f30b1342c01","status":"passed","time":{"start":1741071997862,"stop":1741071999814,"duration":1952}},{"uid":"319cb67aa30a5540","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/221//#testresult/319cb67aa30a5540","status":"failed","statusDetails":"AssertionError: assert 401 == 400\n +  where 401 = <Response [401]>.status_code","time":{"start":1740985603612,"stop":1740985605560,"duration":1948}},{"uid":"8ebcf00b9e312569","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/220//#testresult/8ebcf00b9e312569","status":"failed","statusDetails":"AssertionError: assert 401 == 400\n +  where 401 = <Response [401]>.status_code","time":{"start":1740899138736,"stop":1740899140739,"duration":2003}},{"uid":"d4564831461c2401","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/219//#testresult/d4564831461c2401","status":"passed","time":{"start":1740812737036,"stop":1740812738674,"duration":1638}},{"uid":"b734b89d10f32188","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/218//#testresult/b734b89d10f32188","status":"passed","time":{"start":1740726395792,"stop":1740726397355,"duration":1563}},{"uid":"8287ac1807a88434","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/217//#testresult/8287ac1807a88434","status":"failed","statusDetails":"AssertionError: assert 401 == 400\n +  where 401 = <Response [401]>.status_code","time":{"start":1740639983808,"stop":1740639985613,"duration":1805}},{"uid":"50384f58e780da9","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/216//#testresult/50384f58e780da9","status":"passed","time":{"start":1740577970406,"stop":1740577972659,"duration":2253}},{"uid":"9998612b22c89994","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/215//#testresult/9998612b22c89994","status":"failed","statusDetails":"AssertionError: assert 401 == 400\n +  where 401 = <Response [401]>.status_code","time":{"start":1740553588236,"stop":1740553590235,"duration":1999}},{"uid":"f51bc6f8fbb0421b","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/214//#testresult/f51bc6f8fbb0421b","status":"failed","statusDetails":"AssertionError: assert 401 == 400\n +  where 401 = <Response [401]>.status_code","time":{"start":1740467180667,"stop":1740467182877,"duration":2210}},{"uid":"6fcdf74bb4d469b4","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/213//#testresult/6fcdf74bb4d469b4","status":"passed","time":{"start":1740391809264,"stop":1740391810847,"duration":1583}},{"uid":"7263c541c616a0e4","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/212//#testresult/7263c541c616a0e4","status":"failed","statusDetails":"AssertionError: assert 'Pattern.acti...er.fiscalCode' == 'Pattern'\n  \n  - Pattern\n  + Pattern.activationReqDtoMono.payer.fiscalCode","time":{"start":1740380808967,"stop":1740380810808,"duration":1841}},{"uid":"b7fbe978637860ff","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/211//#testresult/b7fbe978637860ff","status":"failed","statusDetails":"AssertionError: assert 401 == 400\n +  where 401 = <Response [401]>.status_code","time":{"start":1740294341983,"stop":1740294344152,"duration":2169}}]},"tags":["auth","activation","unhappy_path"]},"source":"bb0d8ef90a0b0fbc.json","parameterValues":[]}