{"uid":"e4318af5edc22951","name":"An RTP callback is successfully received","fullName":"tests.test_callback#test_receive_rtp_callback_DS_08P_compliant","historyId":"e98ff8a1e43c45b6eec2e1ce025e4cfc","time":{"start":1748848069954,"stop":1748848070454,"duration":500},"status":"failed","statusMessage":"AssertionError: Error from callback, expected 200 got 400\nassert 400 == 200\n +  where 400 = <Response [400]>.status_code","statusTrace":"@allure.feature('RTP Callback')\n    @allure.story('Service provider sends a callback referred to an RTP')\n    @allure.title('An RTP callback is successfully received')\n    @pytest.mark.callback\n    @pytest.mark.happy_path\n    def test_receive_rtp_callback_DS_08P_compliant():\n        callback_data = generate_callback_data_DS_08P_compliant()\n    \n        cert, key = pfx_to_pem(secrets.debtor_service_provider_mock_PFX_base64,\n                               secrets.debtor_service_provider_mock_PFX_password_base64,\n                               config.cert_path,\n                               config.key_path)\n    \n        callback_response = srtp_callback(rtp_payload=callback_data,\n                                          cert_path=cert,\n                                          key_path=key)\n>       assert callback_response.status_code == 200, f'Error from callback, expected 200 got {callback_response.status_code}'\nE       AssertionError: Error from callback, expected 200 got 400\nE       assert 400 == 200\nE        +  where 400 = <Response [400]>.status_code\n\nfunctional-tests/tests/test_callback.py:47: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"_session_faker","time":{"start":1748848055587,"stop":1748848055646,"duration":59},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"afterStages":[],"labels":[{"name":"story","value":"Service provider sends a callback referred to an RTP"},{"name":"feature","value":"RTP Callback"},{"name":"tag","value":"happy_path"},{"name":"tag","value":"callback"},{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_callback"},{"name":"host","value":"pkrvmf6wy0o8zjz"},{"name":"thread","value":"2475-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_callback"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":6,"broken":1,"skipped":0,"passed":50,"unknown":0,"total":57},"items":[{"uid":"81e3e4d8776ad425","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/353//#testresult/81e3e4d8776ad425","status":"failed","statusDetails":"AssertionError: Error from callback, expected 200 got 400\nassert 400 == 200\n +  where 400 = <Response [400]>.status_code","time":{"start":1748761623861,"stop":1748761624512,"duration":651}},{"uid":"a91dbfeca101794","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/352//#testresult/a91dbfeca101794","status":"failed","statusDetails":"AssertionError: Error from callback, expected 200 got 400\nassert 400 == 200\n +  where 400 = <Response [400]>.status_code","time":{"start":1748675215909,"stop":1748675216366,"duration":457}},{"uid":"e96315c6f7c9e3ee","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/351//#testresult/e96315c6f7c9e3ee","status":"failed","statusDetails":"AssertionError: Error from callback, expected 200 got 400\nassert 400 == 200\n +  where 400 = <Response [400]>.status_code","time":{"start":1748588828314,"stop":1748588828977,"duration":663}},{"uid":"226f1be6312b2ca7","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/350//#testresult/226f1be6312b2ca7","status":"failed","statusDetails":"AssertionError: Error from callback, expected 200 got 400\nassert 400 == 200\n +  where 400 = <Response [400]>.status_code","time":{"start":1748534028633,"stop":1748534029080,"duration":447}},{"uid":"e6487a6118a14ab4","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/349//#testresult/e6487a6118a14ab4","status":"passed","time":{"start":1748502452910,"stop":1748502453556,"duration":646}},{"uid":"aedbf0ee1f8150c8","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/348//#testresult/aedbf0ee1f8150c8","status":"passed","time":{"start":1748449648194,"stop":1748449648787,"duration":593}},{"uid":"9b550581bf601fff","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/347//#testresult/9b550581bf601fff","status":"passed","time":{"start":1748442442538,"stop":1748442442958,"duration":420}},{"uid":"a59b0368aafc725a","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/346//#testresult/a59b0368aafc725a","status":"passed","time":{"start":1748441496569,"stop":1748441496965,"duration":396}},{"uid":"9fb45d4424c9dc2e","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/345//#testresult/9fb45d4424c9dc2e","status":"passed","time":{"start":1748436774541,"stop":1748436775049,"duration":508}},{"uid":"9c98e5a1890fcd9","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/344//#testresult/9c98e5a1890fcd9","status":"broken","statusDetails":"AttributeError: 'dict' object has no attribute 'debtor_service_provider_mock_PFX_base64'","time":{"start":1748417982642,"stop":1748417982643,"duration":1}},{"uid":"b9ae65a5a2daebc2","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/343//#testresult/b9ae65a5a2daebc2","status":"passed","time":{"start":1748416027330,"stop":1748416027720,"duration":390}},{"uid":"93e75736d7697887","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/342//#testresult/93e75736d7697887","status":"passed","time":{"start":1748329640730,"stop":1748329641390,"duration":660}},{"uid":"4322dc6186a044d0","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/341//#testresult/4322dc6186a044d0","status":"passed","time":{"start":1748264263695,"stop":1748264264091,"duration":396}},{"uid":"940faa83cc45cff1","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/340//#testresult/940faa83cc45cff1","status":"passed","time":{"start":1748243386875,"stop":1748243387333,"duration":458}},{"uid":"235319d8be3fc6","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/339//#testresult/235319d8be3fc6","status":"passed","time":{"start":1748156833394,"stop":1748156833913,"duration":519}},{"uid":"e0ae97c8aa925440","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/338//#testresult/e0ae97c8aa925440","status":"passed","time":{"start":1748070406443,"stop":1748070407028,"duration":585}},{"uid":"b7e5dfeee9dbb405","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/337//#testresult/b7e5dfeee9dbb405","status":"passed","time":{"start":1747984035814,"stop":1747984036198,"duration":384}},{"uid":"dcef1f920eec0e57","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/336//#testresult/dcef1f920eec0e57","status":"passed","time":{"start":1747897633282,"stop":1747897633799,"duration":517}},{"uid":"68965e2a56002b9d","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/335//#testresult/68965e2a56002b9d","status":"passed","time":{"start":1747840417497,"stop":1747840417886,"duration":389}},{"uid":"7261164cc1bf8d22","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/334//#testresult/7261164cc1bf8d22","status":"passed","time":{"start":1747811223473,"stop":1747811223871,"duration":398}}]},"tags":["callback","happy_path"]},"source":"e4318af5edc22951.json","parameterValues":[]}