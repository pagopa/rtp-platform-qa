{"uid":"11d2365a0adf45b7","name":"An RTP callback is successfully received","fullName":"tests.test_callback#test_receive_rtp_callback_DS_08N_compliant","historyId":"d5748ad5568cbf463a334911f922c3be","time":{"start":1755673671797,"stop":1755673675821,"duration":4024},"status":"failed","statusMessage":"AssertionError: assert 403 == 200\n +  where 403 = <Response [403]>.status_code","statusTrace":"@allure.feature('RTP Callback')\n    @allure.story('Service provider sends a callback referred to an RTP')\n    @allure.title('An RTP callback is successfully received')\n    @pytest.mark.callback\n    @pytest.mark.happy_path\n    def test_receive_rtp_callback_DS_08N_compliant():\n        rtp_data = generate_rtp_data()\n    \n        debtor_service_provider_access_token = get_valid_access_token(\n            client_id=secrets.debtor_service_provider.client_id,\n            client_secret=secrets.debtor_service_provider.client_secret,\n            access_token_function=get_access_token,\n        )\n    \n        creditor_service_provider_access_token = get_valid_access_token(\n            client_id=secrets.creditor_service_provider.client_id,\n            client_secret=secrets.creditor_service_provider.client_secret,\n            access_token_function=get_access_token,\n        )\n    \n        activation_response = activate(\n            debtor_service_provider_access_token,\n            rtp_data['payer']['payerId'],\n            secrets.debtor_service_provider.service_provider_id,\n        )\n        assert activation_response.status_code == 201\n    \n        send_response = send_rtp(\n            access_token=creditor_service_provider_access_token, rtp_payload=rtp_data\n        )\n        assert send_response.status_code == 201\n    \n        location = send_response.headers['Location']\n        resource_id = location.split('/')[-1]\n    \n        original_msg_id = resource_id.replace('-', '')\n    \n        callback_data = generate_callback_data_DS_08N_compliant()\n        callback_data['AsynchronousSepaRequestToPayResponse']['Document']['CdtrPmtActvtnReqStsRpt'][\n            'OrgnlGrpInfAndSts'\n        ]['OrgnlMsgId'] = original_msg_id\n    \n        cert, key = pfx_to_pem(\n            secrets.debtor_service_provider_mock_PFX_base64,\n            secrets.debtor_service_provider_mock_PFX_password_base64,\n            config.cert_path,\n            config.key_path,\n        )\n    \n        callback_response = srtp_callback(\n            rtp_payload=callback_data, cert_path=cert, key_path=key\n        )\n        assert (\n            callback_response.status_code == 200\n        ), f\"Error from callback, expected 200 got {callback_response.status_code}\"\n    \n        get_response = get_rtp(\n            access_token=creditor_service_provider_access_token, rtp_id=resource_id\n        )\n>       assert get_response.status_code == 200\nE       assert 403 == 200\nE        +  where 403 = <Response [403]>.status_code\n\nfunctional-tests/tests/test_callback.py:136: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"_session_faker","time":{"start":1755673640510,"stop":1755673640572,"duration":62},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"afterStages":[],"labels":[{"name":"feature","value":"RTP Callback"},{"name":"story","value":"Service provider sends a callback referred to an RTP"},{"name":"tag","value":"happy_path"},{"name":"tag","value":"callback"},{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_callback"},{"name":"host","value":"pkrvmubgrv54qmi"},{"name":"thread","value":"2527-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_callback"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":22,"broken":17,"skipped":0,"passed":4,"unknown":0,"total":43},"items":[{"uid":"d6fd9cc17705ecd9","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/497//#testresult/d6fd9cc17705ecd9","status":"failed","statusDetails":"AssertionError: assert 403 == 200\n +  where 403 = <Response [403]>.status_code","time":{"start":1755613289885,"stop":1755613292936,"duration":3051}},{"uid":"ffa72379b3cb503","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/496//#testresult/ffa72379b3cb503","status":"failed","statusDetails":"AssertionError: assert 403 == 200\n +  where 403 = <Response [403]>.status_code","time":{"start":1755588476573,"stop":1755588479164,"duration":2591}},{"uid":"14198979e85fc23","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/495//#testresult/14198979e85fc23","status":"failed","statusDetails":"AssertionError: assert 403 == 200\n +  where 403 = <Response [403]>.status_code","time":{"start":1755587254965,"stop":1755587257720,"duration":2755}},{"uid":"ac76740a486d3b5f","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/494//#testresult/ac76740a486d3b5f","status":"failed","statusDetails":"AssertionError: assert 403 == 200\n +  where 403 = <Response [403]>.status_code","time":{"start":1755500986538,"stop":1755500990442,"duration":3904}},{"uid":"f2450093e731e37e","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/493//#testresult/f2450093e731e37e","status":"failed","statusDetails":"AssertionError: assert 403 == 200\n +  where 403 = <Response [403]>.status_code","time":{"start":1755414400227,"stop":1755414402656,"duration":2429}},{"uid":"144bab502140e087","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/492//#testresult/144bab502140e087","status":"failed","statusDetails":"AssertionError: assert 403 == 200\n +  where 403 = <Response [403]>.status_code","time":{"start":1755327991862,"stop":1755327994267,"duration":2405}},{"uid":"8502de7f6db03ead","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/491//#testresult/8502de7f6db03ead","status":"failed","statusDetails":"AssertionError: assert 403 == 200\n +  where 403 = <Response [403]>.status_code","time":{"start":1755241678491,"stop":1755241680997,"duration":2506}},{"uid":"384424547c02894d","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/490//#testresult/384424547c02894d","status":"failed","statusDetails":"AssertionError: assert 403 == 200\n +  where 403 = <Response [403]>.status_code","time":{"start":1755166779971,"stop":1755166782978,"duration":3007}},{"uid":"64b5be76ff9ae197","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/489//#testresult/64b5be76ff9ae197","status":"failed","statusDetails":"AssertionError: assert 403 == 200\n +  where 403 = <Response [403]>.status_code","time":{"start":1755158295765,"stop":1755158298150,"duration":2385}},{"uid":"b1babb2a0661de09","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/488//#testresult/b1babb2a0661de09","status":"failed","statusDetails":"AssertionError: assert 403 == 200\n +  where 403 = <Response [403]>.status_code","time":{"start":1755155314497,"stop":1755155318335,"duration":3838}},{"uid":"8164c6541029deef","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/487//#testresult/8164c6541029deef","status":"failed","statusDetails":"AssertionError: assert 403 == 200\n +  where 403 = <Response [403]>.status_code","time":{"start":1755068903071,"stop":1755068905912,"duration":2841}},{"uid":"78a0e8673cd39b48","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/486//#testresult/78a0e8673cd39b48","status":"failed","statusDetails":"AssertionError: assert 403 == 200\n +  where 403 = <Response [403]>.status_code","time":{"start":1754982504125,"stop":1754982508085,"duration":3960}},{"uid":"bb1d24008d35c553","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/485//#testresult/bb1d24008d35c553","status":"failed","statusDetails":"AssertionError: assert 403 == 200\n +  where 403 = <Response [403]>.status_code","time":{"start":1754907836004,"stop":1754907838698,"duration":2694}},{"uid":"90a744f62cb32fe1","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/483//#testresult/90a744f62cb32fe1","status":"failed","statusDetails":"AssertionError: assert 403 == 200\n +  where 403 = <Response [403]>.status_code","time":{"start":1754896260464,"stop":1754896264421,"duration":3957}},{"uid":"53b04a4838cf02f5","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/482//#testresult/53b04a4838cf02f5","status":"failed","statusDetails":"AssertionError: assert 403 == 200\n +  where 403 = <Response [403]>.status_code","time":{"start":1754809603494,"stop":1754809606238,"duration":2744}},{"uid":"7c8327e06b44a10e","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/481//#testresult/7c8327e06b44a10e","status":"failed","statusDetails":"AssertionError: assert 403 == 200\n +  where 403 = <Response [403]>.status_code","time":{"start":1754723219524,"stop":1754723222260,"duration":2736}},{"uid":"933ae2215db86234","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/480//#testresult/933ae2215db86234","status":"failed","statusDetails":"AssertionError: assert 403 == 200\n +  where 403 = <Response [403]>.status_code","time":{"start":1754637093076,"stop":1754637097207,"duration":4131}},{"uid":"a11ac0ea32a1fcdb","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/479//#testresult/a11ac0ea32a1fcdb","status":"failed","statusDetails":"AssertionError: assert 403 == 200\n +  where 403 = <Response [403]>.status_code","time":{"start":1754550670663,"stop":1754550673844,"duration":3181}},{"uid":"88ec3e6a37fefcad","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/478//#testresult/88ec3e6a37fefcad","status":"failed","statusDetails":"AssertionError: assert 403 == 200\n +  where 403 = <Response [403]>.status_code","time":{"start":1754464771515,"stop":1754464775778,"duration":4263}},{"uid":"c245fb88c4ed0dd","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/476//#testresult/c245fb88c4ed0dd","status":"failed","statusDetails":"AssertionError: assert 403 == 200\n +  where 403 = <Response [403]>.status_code","time":{"start":1754464718504,"stop":1754464720851,"duration":2347}}]},"tags":["callback","happy_path"]},"source":"11d2365a0adf45b7.json","parameterValues":[]}