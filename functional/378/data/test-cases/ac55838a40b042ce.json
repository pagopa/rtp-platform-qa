{"uid":"ac55838a40b042ce","name":"An RTP callback is successfully received","fullName":"tests.test_callback#test_receive_rtp_callback_DS_04b_compliant","historyId":"475e3c0708b05c2b7bfae9db8dc283af","time":{"start":1749800520001,"stop":1749800520002,"duration":1},"status":"broken","statusMessage":"TypeError: argument should be a bytes-like object or ASCII string, not 'NoneType'","statusTrace":"@allure.feature('RTP Callback')\n    @allure.story('Service provider sends a callback referred to an RTP')\n    @allure.title('An RTP callback is successfully received')\n    @pytest.mark.callback\n    @pytest.mark.happy_path\n    def test_receive_rtp_callback_DS_04b_compliant():\n        callback_data = generate_callback_data_DS_04b_compliant()\n    \n>       cert, key = pfx_to_pem(secrets.debtor_service_provider_mock_PFX_base64,\n                               secrets.debtor_service_provider_mock_PFX_password_base64,\n                               config.cert_path,\n                               config.key_path)\n\nfunctional-tests/tests/test_callback.py:20: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nutils/cryptography.py:20: in pfx_to_pem\n    pfx_data = base64.b64decode(base64_pfx)\n/opt/hostedtoolcache/Python/3.13.3/x64/lib/python3.13/base64.py:83: in b64decode\n    s = _bytes_from_decode_data(s)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ns = None\n\n    def _bytes_from_decode_data(s):\n        if isinstance(s, str):\n            try:\n                return s.encode('ascii')\n            except UnicodeEncodeError:\n                raise ValueError('string argument should contain only ASCII characters')\n        if isinstance(s, bytes_types):\n            return s\n        try:\n            return memoryview(s).tobytes()\n        except TypeError:\n>           raise TypeError(\"argument should be a bytes-like object or ASCII \"\n                            \"string, not %r\" % s.__class__.__name__) from None\nE           TypeError: argument should be a bytes-like object or ASCII string, not 'NoneType'\n\n/opt/hostedtoolcache/Python/3.13.3/x64/lib/python3.13/base64.py:45: TypeError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"_session_faker","time":{"start":1749800516321,"stop":1749800516376,"duration":55},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"afterStages":[],"labels":[{"name":"story","value":"Service provider sends a callback referred to an RTP"},{"name":"feature","value":"RTP Callback"},{"name":"tag","value":"happy_path"},{"name":"tag","value":"callback"},{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_callback"},{"name":"host","value":"pkrvmxyh4eaekms"},{"name":"thread","value":"2485-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_callback"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":20,"broken":9,"skipped":0,"passed":50,"unknown":0,"total":79},"items":[{"uid":"1e2872a5031294ce","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/377//#testresult/1e2872a5031294ce","status":"broken","statusDetails":"TypeError: argument should be a bytes-like object or ASCII string, not 'NoneType'","time":{"start":1749799850718,"stop":1749799850718,"duration":0}},{"uid":"e5a733da0d6c4082","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/376//#testresult/e5a733da0d6c4082","status":"failed","statusDetails":"AssertionError: Error from callback, expected 200 got 400\nassert 400 == 200\n +  where 400 = <Response [400]>.status_code","time":{"start":1749798429835,"stop":1749798430343,"duration":508}},{"uid":"5498c25dd346f887","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/375//#testresult/5498c25dd346f887","status":"failed","statusDetails":"AssertionError: Error from callback, expected 200 got 400\nassert 400 == 200\n +  where 400 = <Response [400]>.status_code","time":{"start":1749712036927,"stop":1749712038659,"duration":1732}},{"uid":"61de6d4d0f77863f","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/374//#testresult/61de6d4d0f77863f","status":"failed","statusDetails":"AssertionError: Error from callback, expected 200 got 400\nassert 400 == 200\n +  where 400 = <Response [400]>.status_code","time":{"start":1749625630957,"stop":1749625632767,"duration":1810}},{"uid":"5485a4f70b634e07","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/373//#testresult/5485a4f70b634e07","status":"failed","statusDetails":"AssertionError: Error from callback, expected 200 got 400\nassert 400 == 200\n +  where 400 = <Response [400]>.status_code","time":{"start":1749539223506,"stop":1749539223975,"duration":469}},{"uid":"7a1c245151ec380d","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/372//#testresult/7a1c245151ec380d","status":"broken","statusDetails":"TypeError: argument should be a bytes-like object or ASCII string, not 'NoneType'","time":{"start":1749485083122,"stop":1749485083123,"duration":1}},{"uid":"22228631954f01fd","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/371//#testresult/22228631954f01fd","status":"broken","statusDetails":"TypeError: argument should be a bytes-like object or ASCII string, not 'NoneType'","time":{"start":1749484925307,"stop":1749484925307,"duration":0}},{"uid":"6d2f146d37f8e3bb","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/370//#testresult/6d2f146d37f8e3bb","status":"broken","statusDetails":"TypeError: argument should be a bytes-like object or ASCII string, not 'NoneType'","time":{"start":1749484603795,"stop":1749484603795,"duration":0}},{"uid":"c1fbc1a2a2252a96","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/369//#testresult/c1fbc1a2a2252a96","status":"broken","statusDetails":"TypeError: argument should be a bytes-like object or ASCII string, not 'NoneType'","time":{"start":1749484257495,"stop":1749484257495,"duration":0}},{"uid":"6cbcafdb4dade21e","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/368//#testresult/6cbcafdb4dade21e","status":"broken","statusDetails":"TypeError: argument should be a bytes-like object or ASCII string, not 'NoneType'","time":{"start":1749483915618,"stop":1749483915618,"duration":0}},{"uid":"8d54da6cfa863020","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/365//#testresult/8d54da6cfa863020","status":"failed","statusDetails":"AssertionError: Error from callback, expected 200 got 400\nassert 400 == 200\n +  where 400 = <Response [400]>.status_code","time":{"start":1749482092089,"stop":1749482097029,"duration":4940}},{"uid":"5ba2f8f317655a6f","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/367//#testresult/5ba2f8f317655a6f","status":"broken","statusDetails":"TypeError: argument should be a bytes-like object or ASCII string, not 'NoneType'","time":{"start":1749482223356,"stop":1749482223356,"duration":0}},{"uid":"3f3a539aeda09c41","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/363//#testresult/3f3a539aeda09c41","status":"failed","statusDetails":"AssertionError: Error from callback, expected 200 got 400\nassert 400 == 200\n +  where 400 = <Response [400]>.status_code","time":{"start":1749452878633,"stop":1749452880317,"duration":1684}},{"uid":"a1673622c6aeffde","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/362//#testresult/a1673622c6aeffde","status":"failed","statusDetails":"AssertionError: Error from callback, expected 200 got 400\nassert 400 == 200\n +  where 400 = <Response [400]>.status_code","time":{"start":1749366421421,"stop":1749366423776,"duration":2355}},{"uid":"53cf76b7ab86fcfa","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/361//#testresult/53cf76b7ab86fcfa","status":"failed","statusDetails":"AssertionError: Error from callback, expected 200 got 400\nassert 400 == 200\n +  where 400 = <Response [400]>.status_code","time":{"start":1749280008781,"stop":1749280009300,"duration":519}},{"uid":"a2007737f877da57","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/360//#testresult/a2007737f877da57","status":"failed","statusDetails":"AssertionError: Error from callback, expected 200 got 400\nassert 400 == 200\n +  where 400 = <Response [400]>.status_code","time":{"start":1749193617849,"stop":1749193618370,"duration":521}},{"uid":"20e5de553d68d641","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/359//#testresult/20e5de553d68d641","status":"failed","statusDetails":"AssertionError: Error from callback, expected 200 got 400\nassert 400 == 200\n +  where 400 = <Response [400]>.status_code","time":{"start":1749107241987,"stop":1749107243046,"duration":1059}},{"uid":"317dcc0a8f5bbc6b","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/358//#testresult/317dcc0a8f5bbc6b","status":"failed","statusDetails":"AssertionError: Error from callback, expected 200 got 400\nassert 400 == 200\n +  where 400 = <Response [400]>.status_code","time":{"start":1749020827514,"stop":1749020828069,"duration":555}},{"uid":"729dcd15595be28e","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/357//#testresult/729dcd15595be28e","status":"failed","statusDetails":"AssertionError: Error from callback, expected 200 got 400\nassert 400 == 200\n +  where 400 = <Response [400]>.status_code","time":{"start":1748956563392,"stop":1748956563803,"duration":411}},{"uid":"4c572c7faf027ad4","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/356//#testresult/4c572c7faf027ad4","status":"failed","statusDetails":"AssertionError: Error from callback, expected 200 got 400\nassert 400 == 200\n +  where 400 = <Response [400]>.status_code","time":{"start":1748953129189,"stop":1748953129687,"duration":498}}]},"tags":["callback","happy_path"]},"source":"ac55838a40b042ce.json","parameterValues":[]}