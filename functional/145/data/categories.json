{"uid":"4b4757e66a1912dae1a509f688f20b0f","children":[{"name":"Test defects","children":[{"name":"dynaconf.vendor.box.exceptions.BoxKeyError: \"'DynaBox' object has no attribute 'client_id'\"","children":[{"name":"A debtor is activated by an authenticated service provider","uid":"7cc7d0e6f934d760","parentUid":"799a5e69032ed04ca8e8678c3395b27d","status":"broken","time":{"start":1736406365202,"stop":1736406365202,"duration":0},"flaky":false,"newFailed":false,"newPassed":false,"newBroken":false,"retriesCount":0,"retriesStatusChange":false,"parameters":[],"tags":["auth","activation","happy_path"]},{"name":"A Service Provider is authenticated","uid":"7ed1d388328f11","parentUid":"799a5e69032ed04ca8e8678c3395b27d","status":"broken","time":{"start":1736406365220,"stop":1736406365220,"duration":0},"flaky":false,"newFailed":false,"newPassed":false,"newBroken":false,"retriesCount":0,"retriesStatusChange":false,"parameters":[],"tags":["auth","happy_path"]},{"name":"A Service Provider with invalid client secret is not authenticated","uid":"5f38b96f98e98fdb","parentUid":"799a5e69032ed04ca8e8678c3395b27d","status":"broken","time":{"start":1736406365257,"stop":1736406365257,"duration":0},"flaky":false,"newFailed":false,"newPassed":false,"newBroken":false,"retriesCount":0,"retriesStatusChange":false,"parameters":[],"tags":["auth","unhappy_path"]}],"uid":"799a5e69032ed04ca8e8678c3395b27d"},{"name":"dynaconf.vendor.box.exceptions.BoxKeyError: \"'DynaBox' object has no attribute 'client_secret'\"","children":[{"name":"A Service Provider with invalid client ID is not authenticated","uid":"2b5dfad9bcd3ad0e","parentUid":"1bb7a83ebc15042acff32ae18ada2ac8","status":"broken","time":{"start":1736406365240,"stop":1736406365240,"duration":0},"flaky":false,"newFailed":false,"newPassed":false,"newBroken":false,"retriesCount":0,"retriesStatusChange":false,"parameters":[],"tags":["auth","unhappy_path"]}],"uid":"1bb7a83ebc15042acff32ae18ada2ac8"}],"uid":"bdbf199525818fae7a8651db9eafe741"},{"name":"Product defects","children":[{"name":"AssertionError: assert 404 == 200\n +  where 404 = <Response [404]>.status_code","children":[{"name":"An RTP is sent through API","uid":"291e4ecbafb8aea5","parentUid":"df7705a0aab3c19c785a3eb6d8832e60","status":"failed","time":{"start":1736406365784,"stop":1736406366265,"duration":481},"flaky":false,"newFailed":false,"newPassed":false,"newBroken":false,"retriesCount":0,"retriesStatusChange":false,"parameters":[],"tags":["send","happy_path"]}],"uid":"df7705a0aab3c19c785a3eb6d8832e60"}],"uid":"8fb3a91ba5aaf9de24cc8a92edc82b5d"}],"name":"categories"}