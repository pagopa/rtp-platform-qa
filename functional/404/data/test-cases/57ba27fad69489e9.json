{"uid":"57ba27fad69489e9","name":"An RTP is sent through CBI API","fullName":"tests.test_debtor_service_provider_availability#test_send_rtp_to_cbi","historyId":"f80da3262bf8ce0e665c096b1873cbf4","time":{"start":1750756723012,"stop":1750756724065,"duration":1053},"status":"failed","statusMessage":"AssertionError: assert 400 == 201\n +  where 400 = <Response [400]>.status_code","statusTrace":"@allure.feature('RTP Send')\n    @allure.story('Service provider sends an RTP to CBI directly')\n    @allure.title('An RTP is sent through CBI API')\n    @pytest.mark.send\n    @pytest.mark.happy_path\n    @pytest.mark.cbi\n    def test_send_rtp_to_cbi():\n        rtp_data = generate_rtp_data()\n        cbi_payload = generate_cbi_rtp_data(rtp_data)\n    \n        auth = client_credentials_to_auth_token(\n            secrets.CBI_client_id, secrets.CBI_client_secret\n        )\n        cert, key = pfx_to_pem(\n            secrets.CBI_client_PFX_base64,\n            secrets.CBI_client_PFX_password_base64,\n            config.cert_path,\n            config.key_path,\n        )\n        cbi_token = get_cbi_access_token(cert, key, auth)\n    \n        response = send_srtp_to_cbi(f\"Bearer {cbi_token}\", cbi_payload)\n>       assert response.status_code == 201\nE       assert 400 == 201\nE        +  where 400 = <Response [400]>.status_code\n\nfunctional-tests/tests/test_debtor_service_provider_availability.py:55: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"_session_faker","time":{"start":1750756702162,"stop":1750756702218,"duration":56},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"afterStages":[],"labels":[{"name":"story","value":"Service provider sends an RTP to CBI directly"},{"name":"feature","value":"RTP Send"},{"name":"tag","value":"cbi"},{"name":"tag","value":"happy_path"},{"name":"tag","value":"send"},{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_debtor_service_provider_availability"},{"name":"host","value":"pkrvmxyh4eaekms"},{"name":"thread","value":"2481-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_debtor_service_provider_availability"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":43,"broken":8,"skipped":0,"passed":0,"unknown":0,"total":51},"items":[{"uid":"e44ddce00d126191","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/403//#testresult/e44ddce00d126191","status":"failed","statusDetails":"AssertionError: assert 400 == 201\n +  where 400 = <Response [400]>.status_code","time":{"start":1750748872183,"stop":1750748873268,"duration":1085}},{"uid":"c2c76a5675390727","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/402//#testresult/c2c76a5675390727","status":"failed","statusDetails":"AssertionError: assert 400 == 201\n +  where 400 = <Response [400]>.status_code","time":{"start":1750684867665,"stop":1750684868874,"duration":1209}},{"uid":"81c76e00a85655e3","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/401//#testresult/81c76e00a85655e3","status":"failed","statusDetails":"AssertionError: assert 400 == 201\n +  where 400 = <Response [400]>.status_code","time":{"start":1750662506169,"stop":1750662507888,"duration":1719}},{"uid":"9d021fbb0995f07","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/400//#testresult/9d021fbb0995f07","status":"failed","statusDetails":"AssertionError: assert 400 == 201\n +  where 400 = <Response [400]>.status_code","time":{"start":1750576081237,"stop":1750576082417,"duration":1180}},{"uid":"8ba137136895e7f3","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/399//#testresult/8ba137136895e7f3","status":"failed","statusDetails":"AssertionError: assert 500 == 201\n +  where 500 = <Response [500]>.status_code","time":{"start":1750489647950,"stop":1750489649286,"duration":1336}},{"uid":"3891d2c55b8d8cd1","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/398//#testresult/3891d2c55b8d8cd1","status":"failed","statusDetails":"AssertionError: assert 400 == 201\n +  where 400 = <Response [400]>.status_code","time":{"start":1750403242341,"stop":1750403243249,"duration":908}},{"uid":"9930cebdef4a874a","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/397//#testresult/9930cebdef4a874a","status":"failed","statusDetails":"AssertionError: assert 400 == 201\n +  where 400 = <Response [400]>.status_code","time":{"start":1750335013292,"stop":1750335015112,"duration":1820}},{"uid":"7cd532238a918da6","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/396//#testresult/7cd532238a918da6","status":"failed","statusDetails":"AssertionError: assert 400 == 201\n +  where 400 = <Response [400]>.status_code","time":{"start":1750329653348,"stop":1750329655017,"duration":1669}},{"uid":"28faa180a6c7c5ec","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/395//#testresult/28faa180a6c7c5ec","status":"failed","statusDetails":"AssertionError: assert 500 == 201\n +  where 500 = <Response [500]>.status_code","time":{"start":1750328590901,"stop":1750328592138,"duration":1237}},{"uid":"fcd1aaf4313f6fe0","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/394//#testresult/fcd1aaf4313f6fe0","status":"failed","statusDetails":"AssertionError: assert 400 == 201\n +  where 400 = <Response [400]>.status_code","time":{"start":1750317550938,"stop":1750317552031,"duration":1093}},{"uid":"3326e1428bd45b06","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/393//#testresult/3326e1428bd45b06","status":"failed","statusDetails":"AssertionError: assert 400 == 201\n +  where 400 = <Response [400]>.status_code","time":{"start":1750316874401,"stop":1750316875916,"duration":1515}},{"uid":"55feede07d907d08","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/392//#testresult/55feede07d907d08","status":"failed","statusDetails":"AssertionError: assert 400 == 201\n +  where 400 = <Response [400]>.status_code","time":{"start":1750230491351,"stop":1750230492820,"duration":1469}},{"uid":"a59f7941d213b914","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/391//#testresult/a59f7941d213b914","status":"failed","statusDetails":"AssertionError: assert 400 == 201\n +  where 400 = <Response [400]>.status_code","time":{"start":1750170142274,"stop":1750170143403,"duration":1129}},{"uid":"83380338fab0d649","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/389//#testresult/83380338fab0d649","status":"failed","statusDetails":"AssertionError: assert 400 == 201\n +  where 400 = <Response [400]>.status_code","time":{"start":1750144055998,"stop":1750144057526,"duration":1528}},{"uid":"37cdb4845ff0fc37","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/388//#testresult/37cdb4845ff0fc37","status":"failed","statusDetails":"AssertionError: assert 400 == 201\n +  where 400 = <Response [400]>.status_code","time":{"start":1750069037593,"stop":1750069038842,"duration":1249}},{"uid":"c8b73219c8a95bfa","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/387//#testresult/c8b73219c8a95bfa","status":"failed","statusDetails":"AssertionError: assert 400 == 201\n +  where 400 = <Response [400]>.status_code","time":{"start":1750057718472,"stop":1750057719714,"duration":1242}},{"uid":"4b2b915eb8e7210b","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/386//#testresult/4b2b915eb8e7210b","status":"failed","statusDetails":"AssertionError: assert 500 == 201\n +  where 500 = <Response [500]>.status_code","time":{"start":1749971255836,"stop":1749971256996,"duration":1160}},{"uid":"56b88e8087cb13a3","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/385//#testresult/56b88e8087cb13a3","status":"failed","statusDetails":"AssertionError: assert 400 == 201\n +  where 400 = <Response [400]>.status_code","time":{"start":1749884861911,"stop":1749884862955,"duration":1044}},{"uid":"e21ed81e2947d15f","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/384//#testresult/e21ed81e2947d15f","status":"failed","statusDetails":"AssertionError: assert 400 == 201\n +  where 400 = <Response [400]>.status_code","time":{"start":1749810128459,"stop":1749810129560,"duration":1101}},{"uid":"9cf8caf45f958895","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/383//#testresult/9cf8caf45f958895","status":"failed","statusDetails":"AssertionError: assert 400 == 201\n +  where 400 = <Response [400]>.status_code","time":{"start":1749805355410,"stop":1749805357310,"duration":1900}}]},"tags":["cbi","send","happy_path"]},"source":"57ba27fad69489e9.json","parameterValues":[]}