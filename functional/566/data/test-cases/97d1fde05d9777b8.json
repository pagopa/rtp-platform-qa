{"uid":"97d1fde05d9777b8","name":"A debtor cannot be activated more than once","fullName":"tests.test_activation#test_fail_activate_debtor_two_times","historyId":"8704b37d564cbbe926da79ebe6202dbe","time":{"start":1760340154664,"stop":1760340156597,"duration":1933},"status":"broken","statusMessage":"requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)","statusTrace":"self = <Response [409]>, kwargs = {}\n\n    def json(self, **kwargs):\n        r\"\"\"Decodes the JSON response body (if any) as a Python object.\n    \n        This may return a dictionary, list, etc. depending on what is in the response.\n    \n        :param \\*\\*kwargs: Optional arguments that ``json.loads`` takes.\n        :raises requests.exceptions.JSONDecodeError: If the response body does not\n            contain valid json.\n        \"\"\"\n    \n        if not self.encoding and self.content and len(self.content) > 3:\n            # No encoding set. JSON RFC 4627 section 3 states we should expect\n            # UTF-8, -16 or -32. Detect which one to use; If the detection or\n            # decoding fails, fall back to `self.text` (using charset_normalizer to make\n            # a best guess).\n            encoding = guess_json_utf(self.content)\n            if encoding is not None:\n                try:\n                    return complexjson.loads(self.content.decode(encoding), **kwargs)\n                except UnicodeDecodeError:\n                    # Wrong UTF codec detected; usually because it's not UTF-8\n                    # but some other 8-bit codec.  This is an RFC violation,\n                    # and the server didn't bother to tell us what codec *was*\n                    # used.\n                    pass\n                except JSONDecodeError as e:\n                    raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\n    \n        try:\n>           return complexjson.loads(self.text, **kwargs)\n\n/opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/requests/models.py:976: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/json/__init__.py:346: in loads\n    return _default_decoder.decode(s)\n/opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/json/decoder.py:345: in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <json.decoder.JSONDecoder object at 0x7fc4eb530590>, s = '', idx = 0\n\n    def raw_decode(self, s, idx=0):\n        \"\"\"Decode a JSON document from ``s`` (a ``str`` beginning with\n        a JSON document) and return a 2-tuple of the Python\n        representation and the index in ``s`` where the document ended.\n    \n        This can be used to decode a JSON document from a string that may\n        have extraneous data at the end.\n    \n        \"\"\"\n        try:\n            obj, end = self.scan_once(s, idx)\n        except StopIteration as err:\n>           raise JSONDecodeError(\"Expecting value\", s, err.value) from None\nE           json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\n/opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/json/decoder.py:363: JSONDecodeError\n\nDuring handling of the above exception, another exception occurred:\n\n    @allure.feature('Activation')\n    @allure.story('Debtor activation')\n    @allure.title('A debtor cannot be activated more than once')\n    @pytest.mark.activation\n    @pytest.mark.unhappy_path\n    def test_fail_activate_debtor_two_times():\n        access_token = get_valid_access_token(client_id=secrets.debtor_service_provider.client_id,\n                                              client_secret=secrets.debtor_service_provider.client_secret,\n                                              access_token_function=get_access_token)\n        debtor_fc = fake_fc()\n    \n        res = activate(access_token, debtor_fc, secrets.debtor_service_provider.service_provider_id)\n        assert res.status_code == 201, f'Error activating debtor, expected 201 but got {res.status_code}'\n    \n        res = activate(access_token, debtor_fc, secrets.debtor_service_provider.service_provider_id)\n        assert res.status_code == 409, f'Error activating debtor, expected 409 but got {res.status_code}'\n>       assert res.json()['errors'][0]['code'] == '01031000E'\n\nfunctional-tests/tests/test_activation.py:169: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <Response [409]>, kwargs = {}\n\n    def json(self, **kwargs):\n        r\"\"\"Decodes the JSON response body (if any) as a Python object.\n    \n        This may return a dictionary, list, etc. depending on what is in the response.\n    \n        :param \\*\\*kwargs: Optional arguments that ``json.loads`` takes.\n        :raises requests.exceptions.JSONDecodeError: If the response body does not\n            contain valid json.\n        \"\"\"\n    \n        if not self.encoding and self.content and len(self.content) > 3:\n            # No encoding set. JSON RFC 4627 section 3 states we should expect\n            # UTF-8, -16 or -32. Detect which one to use; If the detection or\n            # decoding fails, fall back to `self.text` (using charset_normalizer to make\n            # a best guess).\n            encoding = guess_json_utf(self.content)\n            if encoding is not None:\n                try:\n                    return complexjson.loads(self.content.decode(encoding), **kwargs)\n                except UnicodeDecodeError:\n                    # Wrong UTF codec detected; usually because it's not UTF-8\n                    # but some other 8-bit codec.  This is an RFC violation,\n                    # and the server didn't bother to tell us what codec *was*\n                    # used.\n                    pass\n                except JSONDecodeError as e:\n                    raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\n    \n        try:\n            return complexjson.loads(self.text, **kwargs)\n        except JSONDecodeError as e:\n            # Catch JSON-related errors and raise as requests.JSONDecodeError\n            # This aliases json.JSONDecodeError and simplejson.JSONDecodeError\n>           raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\nE           requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\n/opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/requests/models.py:980: JSONDecodeError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"_session_faker","time":{"start":1760340142691,"stop":1760340142749,"duration":58},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"afterStages":[],"labels":[{"name":"feature","value":"Activation"},{"name":"story","value":"Debtor activation"},{"name":"tag","value":"unhappy_path"},{"name":"tag","value":"activation"},{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_activation"},{"name":"host","value":"runnervmwhb2z"},{"name":"thread","value":"2561-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_activation"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":73,"broken":15,"skipped":0,"passed":164,"unknown":0,"total":252},"items":[{"uid":"62709337e7d46a25","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/565//#testresult/62709337e7d46a25","status":"broken","statusDetails":"requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)","time":{"start":1760253545305,"stop":1760253547373,"duration":2068}},{"uid":"9084bd6e5b687322","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/564//#testresult/9084bd6e5b687322","status":"broken","statusDetails":"requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)","time":{"start":1760167133583,"stop":1760167135069,"duration":1486}},{"uid":"765fafa30ead10fb","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/563//#testresult/765fafa30ead10fb","status":"passed","time":{"start":1760080843680,"stop":1760080845116,"duration":1436}},{"uid":"37f993fffea4165d","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/562//#testresult/37f993fffea4165d","status":"passed","time":{"start":1759994478093,"stop":1759994479677,"duration":1584}},{"uid":"f4b4826d338c0ae7","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/561//#testresult/f4b4826d338c0ae7","status":"passed","time":{"start":1759929005570,"stop":1759929007194,"duration":1624}},{"uid":"639d5a1ec2474ed","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/560//#testresult/639d5a1ec2474ed","status":"passed","time":{"start":1759920822185,"stop":1759920823537,"duration":1352}},{"uid":"e5a34a1019cd0515","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/559//#testresult/e5a34a1019cd0515","status":"passed","time":{"start":1759919581364,"stop":1759919582621,"duration":1257}},{"uid":"83ed4f916743a053","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/558//#testresult/83ed4f916743a053","status":"passed","time":{"start":1759908033351,"stop":1759908035024,"duration":1673}},{"uid":"dfac17e41b0b8685","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/557//#testresult/dfac17e41b0b8685","status":"passed","time":{"start":1759821666887,"stop":1759821668223,"duration":1336}},{"uid":"af5d4d1e37039f8f","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/556//#testresult/af5d4d1e37039f8f","status":"passed","time":{"start":1759735312996,"stop":1759735314878,"duration":1882}},{"uid":"f5da23a74c825583","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/555//#testresult/f5da23a74c825583","status":"passed","time":{"start":1759648698975,"stop":1759648700350,"duration":1375}},{"uid":"d044cb11bbbdac6","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/554//#testresult/d044cb11bbbdac6","status":"passed","time":{"start":1759562331816,"stop":1759562334022,"duration":2206}},{"uid":"7979a89a6538fd59","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/553//#testresult/7979a89a6538fd59","status":"passed","time":{"start":1759483534008,"stop":1759483535910,"duration":1902}},{"uid":"c672f54f1535a736","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/552//#testresult/c672f54f1535a736","status":"passed","time":{"start":1759476011920,"stop":1759476014173,"duration":2253}},{"uid":"67748c6f04f29628","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/551//#testresult/67748c6f04f29628","status":"passed","time":{"start":1759389594594,"stop":1759389595911,"duration":1317}},{"uid":"81bc63204f23605b","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/550//#testresult/81bc63204f23605b","status":"passed","time":{"start":1759315748944,"stop":1759315750257,"duration":1313}},{"uid":"62fd7e3c0069ab22","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/549//#testresult/62fd7e3c0069ab22","status":"passed","time":{"start":1759303325435,"stop":1759303326873,"duration":1438}},{"uid":"58f3930881ec80da","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/548//#testresult/58f3930881ec80da","status":"passed","time":{"start":1759216929768,"stop":1759216931448,"duration":1680}},{"uid":"d2ba412c52b8c8d0","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/547//#testresult/d2ba412c52b8c8d0","status":"passed","time":{"start":1759130545675,"stop":1759130547094,"duration":1419}},{"uid":"5173bda03749e17c","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/546//#testresult/5173bda03749e17c","status":"passed","time":{"start":1759043940465,"stop":1759043942509,"duration":2044}}]},"tags":["activation","unhappy_path"]},"source":"97d1fde05d9777b8.json","parameterValues":[]}