{"uid":"1db5b21f05c04dd8","name":"malformed rtp_id → 400 Bad Request","fullName":"tests.test_get_rtp#test_get_rtp_invalid_id_format","historyId":"c21612d12b7544d1e793acec3594d7a6","time":{"start":1750777966846,"stop":1750777967312,"duration":466},"status":"broken","statusMessage":"requests.exceptions.HTTPError: 400 Client Error: Bad Request for url: https://api-mcshared.uat.cstar.pagopa.it/auth/token","statusTrace":"@allure.feature(\"RTP Get\")\n    @allure.story(\"Service provider retrieves an RTP\")\n    @allure.title(\"malformed rtp_id → 400 Bad Request\")\n    @pytest.mark.get\n    @pytest.mark.unhappy_path\n    def test_get_rtp_invalid_id_format():\n        bad_id = \"123-not-a-uuid\"\n>       token = get_valid_access_token(\n            client_id=secrets.creditor_service_provider.client_id,\n            client_secret=secrets.creditor_service_provider.client_secret,\n            access_token_function=get_access_token,\n        )\n\nfunctional-tests/tests/test_get_rtp.py:105: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \napi/auth.py:8: in get_valid_access_token\n    token_response.raise_for_status()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <Response [400]>\n\n    def raise_for_status(self):\n        \"\"\"Raises :class:`HTTPError`, if one occurred.\"\"\"\n    \n        http_error_msg = \"\"\n        if isinstance(self.reason, bytes):\n            # We attempt to decode utf-8 first because some servers\n            # choose to localize their reason strings. If the string\n            # isn't utf-8, we fall back to iso-8859-1 for all other\n            # encodings. (See PR #3538)\n            try:\n                reason = self.reason.decode(\"utf-8\")\n            except UnicodeDecodeError:\n                reason = self.reason.decode(\"iso-8859-1\")\n        else:\n            reason = self.reason\n    \n        if 400 <= self.status_code < 500:\n            http_error_msg = (\n                f\"{self.status_code} Client Error: {reason} for url: {self.url}\"\n            )\n    \n        elif 500 <= self.status_code < 600:\n            http_error_msg = (\n                f\"{self.status_code} Server Error: {reason} for url: {self.url}\"\n            )\n    \n        if http_error_msg:\n>           raise HTTPError(http_error_msg, response=self)\nE           requests.exceptions.HTTPError: 400 Client Error: Bad Request for url: https://api-mcshared.uat.cstar.pagopa.it/auth/token\n\n/opt/hostedtoolcache/Python/3.13.3/x64/lib/python3.13/site-packages/requests/models.py:1026: HTTPError","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"_session_faker","time":{"start":1750777957420,"stop":1750777957482,"duration":62},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"afterStages":[],"labels":[{"name":"feature","value":"RTP Get"},{"name":"story","value":"Service provider retrieves an RTP"},{"name":"tag","value":"unhappy_path"},{"name":"tag","value":"get"},{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_get_rtp"},{"name":"host","value":"pkrvmxyh4eaekms"},{"name":"thread","value":"2232-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_get_rtp"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":1,"skipped":0,"passed":21,"unknown":0,"total":22},"items":[{"uid":"71d53e1317d72602","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/404//#testresult/71d53e1317d72602","status":"passed","time":{"start":1750756863881,"stop":1750756864564,"duration":683}},{"uid":"1f7fa0710357a8b0","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/403//#testresult/1f7fa0710357a8b0","status":"passed","time":{"start":1750749012967,"stop":1750749013650,"duration":683}},{"uid":"6edf6e5eed5ea2c0","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/402//#testresult/6edf6e5eed5ea2c0","status":"passed","time":{"start":1750685011126,"stop":1750685011829,"duration":703}},{"uid":"7993207a0238a3a6","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/401//#testresult/7993207a0238a3a6","status":"passed","time":{"start":1750662651398,"stop":1750662652725,"duration":1327}},{"uid":"d2aa6d8e91802240","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/400//#testresult/d2aa6d8e91802240","status":"passed","time":{"start":1750576224626,"stop":1750576225510,"duration":884}},{"uid":"cb43850dc1533ca3","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/399//#testresult/cb43850dc1533ca3","status":"passed","time":{"start":1750489792054,"stop":1750489793268,"duration":1214}},{"uid":"3ee3ce0606333cff","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/398//#testresult/3ee3ce0606333cff","status":"passed","time":{"start":1750403385995,"stop":1750403387002,"duration":1007}},{"uid":"5907f58d9a379c30","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/397//#testresult/5907f58d9a379c30","status":"passed","time":{"start":1750335158736,"stop":1750335159844,"duration":1108}},{"uid":"e5f1565afcde9013","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/396//#testresult/e5f1565afcde9013","status":"passed","time":{"start":1750329799820,"stop":1750329801042,"duration":1222}},{"uid":"1c7ce68a827aab10","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/395//#testresult/1c7ce68a827aab10","status":"passed","time":{"start":1750328731875,"stop":1750328732668,"duration":793}},{"uid":"833a4de6f059ed48","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/394//#testresult/833a4de6f059ed48","status":"passed","time":{"start":1750317692591,"stop":1750317693259,"duration":668}},{"uid":"604a4b1a45822c23","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/393//#testresult/604a4b1a45822c23","status":"passed","time":{"start":1750317021200,"stop":1750317022446,"duration":1246}},{"uid":"f2977d528f84bf0d","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/392//#testresult/f2977d528f84bf0d","status":"passed","time":{"start":1750230634950,"stop":1750230636096,"duration":1146}},{"uid":"cb0e8d620012116b","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/391//#testresult/cb0e8d620012116b","status":"passed","time":{"start":1750170284044,"stop":1750170284765,"duration":721}},{"uid":"83d111b8bb0b0e56","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/389//#testresult/83d111b8bb0b0e56","status":"passed","time":{"start":1750144199864,"stop":1750144201095,"duration":1231}},{"uid":"367d9504723a48f7","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/388//#testresult/367d9504723a48f7","status":"passed","time":{"start":1750069180378,"stop":1750069181319,"duration":941}},{"uid":"4f7083c6f39bfd1b","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/387//#testresult/4f7083c6f39bfd1b","status":"passed","time":{"start":1750057861994,"stop":1750057862813,"duration":819}},{"uid":"4b266e295e34ec19","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/386//#testresult/4b266e295e34ec19","status":"passed","time":{"start":1749971399982,"stop":1749971400864,"duration":882}},{"uid":"ffec7f38a7789764","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/385//#testresult/ffec7f38a7789764","status":"passed","time":{"start":1749885004713,"stop":1749885005531,"duration":818}},{"uid":"498007f804c83a66","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/384//#testresult/498007f804c83a66","status":"passed","time":{"start":1749810268387,"stop":1749810269208,"duration":821}}]},"tags":["get","unhappy_path"]},"source":"1db5b21f05c04dd8.json","parameterValues":[]}