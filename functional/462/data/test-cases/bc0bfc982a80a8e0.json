{"uid":"bc0bfc982a80a8e0","name":"An RTP is sent to ICCREA service with activated fiscal code","fullName":"tests.test_send_rtp#test_send_rtp_to_iccrea","historyId":"43c6e6f1884b3efb611eee04b5b6eb0c","time":{"start":1753859503707,"stop":1753859504345,"duration":638},"status":"broken","statusMessage":"requests.exceptions.HTTPError: 401 Client Error: Unauthorized for url: https://api-mcshared.uat.cstar.pagopa.it/auth/token","statusTrace":"@allure.feature('RTP Send')\n    @allure.story('Service provider sends an RTP to a provider')\n    @allure.title('An RTP is sent to ICCREA service with activated fiscal code')\n    @pytest.mark.send\n    @pytest.mark.happy_path\n    @pytest.mark.real_integration\n    @pytest.mark.iccrea\n    def test_send_rtp_to_iccrea():\n        rtp_data = generate_rtp_data(payer_id=secrets.iccrea_activated_fiscal_code)\n    \n>       creditor_service_provider_access_token = get_valid_access_token(\n            client_id=secrets.creditor_service_provider.client_id,\n            client_secret=secrets.creditor_service_provider.client_secret,\n            access_token_function=get_access_token,\n        )\n\nfunctional-tests/tests/test_send_rtp.py:134: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \napi/auth.py:8: in get_valid_access_token\n    token_response.raise_for_status()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <Response [401]>\n\n    def raise_for_status(self):\n        \"\"\"Raises :class:`HTTPError`, if one occurred.\"\"\"\n    \n        http_error_msg = \"\"\n        if isinstance(self.reason, bytes):\n            # We attempt to decode utf-8 first because some servers\n            # choose to localize their reason strings. If the string\n            # isn't utf-8, we fall back to iso-8859-1 for all other\n            # encodings. (See PR #3538)\n            try:\n                reason = self.reason.decode(\"utf-8\")\n            except UnicodeDecodeError:\n                reason = self.reason.decode(\"iso-8859-1\")\n        else:\n            reason = self.reason\n    \n        if 400 <= self.status_code < 500:\n            http_error_msg = (\n                f\"{self.status_code} Client Error: {reason} for url: {self.url}\"\n            )\n    \n        elif 500 <= self.status_code < 600:\n            http_error_msg = (\n                f\"{self.status_code} Server Error: {reason} for url: {self.url}\"\n            )\n    \n        if http_error_msg:\n>           raise HTTPError(http_error_msg, response=self)\nE           requests.exceptions.HTTPError: 401 Client Error: Unauthorized for url: https://api-mcshared.uat.cstar.pagopa.it/auth/token\n\n/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/requests/models.py:1026: HTTPError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"_session_faker","time":{"start":1753859421536,"stop":1753859421602,"duration":66},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"afterStages":[],"labels":[{"name":"feature","value":"RTP Send"},{"name":"story","value":"Service provider sends an RTP to a provider"},{"name":"tag","value":"iccrea"},{"name":"tag","value":"real_integration"},{"name":"tag","value":"happy_path"},{"name":"tag","value":"send"},{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_send_rtp"},{"name":"host","value":"pkrvmjbmru5nbw0"},{"name":"thread","value":"2562-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_send_rtp"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":16,"broken":5,"skipped":0,"passed":20,"unknown":0,"total":41},"items":[{"uid":"4f7b024e3dd109b0","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/461//#testresult/4f7b024e3dd109b0","status":"broken","statusDetails":"requests.exceptions.HTTPError: 401 Client Error: Unauthorized for url: https://api-mcshared.uat.cstar.pagopa.it/auth/token","time":{"start":1753773061546,"stop":1753773062192,"duration":646}},{"uid":"5f84ccf7c3844ae4","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/460//#testresult/5f84ccf7c3844ae4","status":"broken","statusDetails":"requests.exceptions.HTTPError: 401 Client Error: Unauthorized for url: https://api-mcshared.uat.cstar.pagopa.it/auth/token","time":{"start":1753686734812,"stop":1753686735325,"duration":513}},{"uid":"738bc1e1336131ca","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/459//#testresult/738bc1e1336131ca","status":"broken","statusDetails":"requests.exceptions.HTTPError: 401 Client Error: Unauthorized for url: https://api-mcshared.uat.cstar.pagopa.it/auth/token","time":{"start":1753600070216,"stop":1753600070580,"duration":364}},{"uid":"169281a148ef9372","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/458//#testresult/169281a148ef9372","status":"broken","statusDetails":"requests.exceptions.HTTPError: 401 Client Error: Unauthorized for url: https://api-mcshared.uat.cstar.pagopa.it/auth/token","time":{"start":1753513683348,"stop":1753513683717,"duration":369}},{"uid":"fb81e4ac2a67c9ec","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/457//#testresult/fb81e4ac2a67c9ec","status":"failed","statusDetails":"AssertionError: assert 422 == 201\n +  where 422 = <Response [422]>.status_code","time":{"start":1753433598611,"stop":1753433601932,"duration":3321}},{"uid":"90ff29486edfe610","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/456//#testresult/90ff29486edfe610","status":"passed","time":{"start":1753427413908,"stop":1753427415572,"duration":1664}},{"uid":"dc4e490fba97dcad","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/455//#testresult/dc4e490fba97dcad","status":"failed","statusDetails":"AssertionError: assert 422 == 201\n +  where 422 = <Response [422]>.status_code","time":{"start":1753367017510,"stop":1753367020511,"duration":3001}},{"uid":"528a7297a0b31aaf","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/454//#testresult/528a7297a0b31aaf","status":"passed","time":{"start":1753351374275,"stop":1753351375721,"duration":1446}},{"uid":"9f2c7e015c16c0ba","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/453//#testresult/9f2c7e015c16c0ba","status":"failed","statusDetails":"AssertionError: assert 422 == 201\n +  where 422 = <Response [422]>.status_code","time":{"start":1753341028458,"stop":1753341031947,"duration":3489}},{"uid":"66e8616d9297944","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/452//#testresult/66e8616d9297944","status":"passed","time":{"start":1753254648073,"stop":1753254649146,"duration":1073}},{"uid":"78281b9397874a1c","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/451//#testresult/78281b9397874a1c","status":"failed","statusDetails":"AssertionError: assert 422 == 201\n +  where 422 = <Response [422]>.status_code","time":{"start":1753168199954,"stop":1753168202535,"duration":2581}},{"uid":"5ba08e752037da03","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/450//#testresult/5ba08e752037da03","status":"failed","statusDetails":"AssertionError: assert 422 == 201\n +  where 422 = <Response [422]>.status_code","time":{"start":1753081919527,"stop":1753081922856,"duration":3329}},{"uid":"22cf238d75765fee","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/449//#testresult/22cf238d75765fee","status":"passed","time":{"start":1752995291509,"stop":1752995292598,"duration":1089}},{"uid":"fbbb7292271d449c","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/448//#testresult/fbbb7292271d449c","status":"passed","time":{"start":1752908936616,"stop":1752908938313,"duration":1697}},{"uid":"6149274e1818ae05","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/447//#testresult/6149274e1818ae05","status":"passed","time":{"start":1752822659224,"stop":1752822660846,"duration":1622}},{"uid":"ee7a9a4479e2f814","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/446//#testresult/ee7a9a4479e2f814","status":"failed","statusDetails":"AssertionError: assert 422 == 201\n +  where 422 = <Response [422]>.status_code","time":{"start":1752736203907,"stop":1752736207309,"duration":3402}},{"uid":"76390342b3c9cf41","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/445//#testresult/76390342b3c9cf41","status":"failed","statusDetails":"AssertionError: assert 422 == 201\n +  where 422 = <Response [422]>.status_code","time":{"start":1752672670480,"stop":1752672674594,"duration":4114}},{"uid":"85733fa899fe28f1","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/444//#testresult/85733fa899fe28f1","status":"passed","time":{"start":1752649801439,"stop":1752649803049,"duration":1610}},{"uid":"5a94b843a59b15e5","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/443//#testresult/5a94b843a59b15e5","status":"failed","statusDetails":"AssertionError: assert 422 == 201\n +  where 422 = <Response [422]>.status_code","time":{"start":1752569327145,"stop":1752569329958,"duration":2813}},{"uid":"85943c8a1ce5156","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/442//#testresult/85943c8a1ce5156","status":"passed","time":{"start":1752563413104,"stop":1752563417113,"duration":4009}}]},"tags":["iccrea","real_integration","send","happy_path"]},"source":"bc0bfc982a80a8e0.json","parameterValues":[]}