{"uid":"9e8dd1ddc7475091","name":"inexistent RTP -> empty body","fullName":"tests.test_get_rtp#test_get_rtp_not_found","historyId":"f374baeb8e6aa77fbe08e6036a22e13b","time":{"start":1759476820965,"stop":1759476821542,"duration":577},"status":"broken","statusMessage":"requests.exceptions.HTTPError: 502 Server Error: Bad Gateway for url: https://api-mcshared.uat.cstar.pagopa.it/auth/token","statusTrace":"@allure.feature('RTP Get')\n    @allure.story('Service provider retrieves an RTP')\n    @allure.title('inexistent RTP -> empty body')\n    @pytest.mark.get\n    @pytest.mark.unhappy_path\n    def test_get_rtp_not_found():\n        fake_rtp_id = str(uuid.uuid4())\n    \n>       token = get_valid_access_token(\n            client_id=secrets.rtp_reader.client_id,\n            client_secret=secrets.rtp_reader.client_secret,\n            access_token_function=get_access_token,\n        )\n\nfunctional-tests/tests/test_get_rtp.py:74: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \napi/auth.py:8: in get_valid_access_token\n    token_response.raise_for_status()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <Response [502]>\n\n    def raise_for_status(self):\n        \"\"\"Raises :class:`HTTPError`, if one occurred.\"\"\"\n    \n        http_error_msg = \"\"\n        if isinstance(self.reason, bytes):\n            # We attempt to decode utf-8 first because some servers\n            # choose to localize their reason strings. If the string\n            # isn't utf-8, we fall back to iso-8859-1 for all other\n            # encodings. (See PR #3538)\n            try:\n                reason = self.reason.decode(\"utf-8\")\n            except UnicodeDecodeError:\n                reason = self.reason.decode(\"iso-8859-1\")\n        else:\n            reason = self.reason\n    \n        if 400 <= self.status_code < 500:\n            http_error_msg = (\n                f\"{self.status_code} Client Error: {reason} for url: {self.url}\"\n            )\n    \n        elif 500 <= self.status_code < 600:\n            http_error_msg = (\n                f\"{self.status_code} Server Error: {reason} for url: {self.url}\"\n            )\n    \n        if http_error_msg:\n>           raise HTTPError(http_error_msg, response=self)\nE           requests.exceptions.HTTPError: 502 Server Error: Bad Gateway for url: https://api-mcshared.uat.cstar.pagopa.it/auth/token\n\n/opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/requests/models.py:1026: HTTPError","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"_session_faker","time":{"start":1759476000591,"stop":1759476000649,"duration":58},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"afterStages":[],"labels":[{"name":"feature","value":"RTP Get"},{"name":"story","value":"Service provider retrieves an RTP"},{"name":"tag","value":"unhappy_path"},{"name":"tag","value":"get"},{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_get_rtp"},{"name":"host","value":"runnervm3ublj"},{"name":"thread","value":"2538-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_get_rtp"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":51,"broken":21,"skipped":0,"passed":92,"unknown":0,"total":164},"items":[{"uid":"5c0929f7b80fbc48","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/551//#testresult/5c0929f7b80fbc48","status":"passed","time":{"start":1759390808276,"stop":1759390809035,"duration":759}},{"uid":"db0fc699a1616344","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/550//#testresult/db0fc699a1616344","status":"passed","time":{"start":1759316208639,"stop":1759316209464,"duration":825}},{"uid":"bfd0a9038a0a6dcc","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/549//#testresult/bfd0a9038a0a6dcc","status":"passed","time":{"start":1759303779393,"stop":1759303780135,"duration":742}},{"uid":"856a30bbd92bc656","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/548//#testresult/856a30bbd92bc656","status":"passed","time":{"start":1759217364034,"stop":1759217364903,"duration":869}},{"uid":"e34bc10bc4fe4e1a","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/547//#testresult/e34bc10bc4fe4e1a","status":"passed","time":{"start":1759130908521,"stop":1759130909251,"duration":730}},{"uid":"e143e0578dd91775","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/546//#testresult/e143e0578dd91775","status":"passed","time":{"start":1759044357726,"stop":1759044358919,"duration":1193}},{"uid":"6118545b3236af1","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/545//#testresult/6118545b3236af1","status":"passed","time":{"start":1758957725492,"stop":1758957726300,"duration":808}},{"uid":"85f4fc2972822211","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/544//#testresult/85f4fc2972822211","status":"passed","time":{"start":1758872008145,"stop":1758872009372,"duration":1227}},{"uid":"197308bbdf40dee","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/543//#testresult/197308bbdf40dee","status":"passed","time":{"start":1758786152868,"stop":1758786153637,"duration":769}},{"uid":"12038965ea7b9ee6","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/542//#testresult/12038965ea7b9ee6","status":"passed","time":{"start":1758699757500,"stop":1758699758660,"duration":1160}},{"uid":"4505dc40f2d71185","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/541//#testresult/4505dc40f2d71185","status":"passed","time":{"start":1758612580767,"stop":1758612581900,"duration":1133}},{"uid":"dff2045ab7664dfa","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/540//#testresult/dff2045ab7664dfa","status":"passed","time":{"start":1758526245691,"stop":1758526246934,"duration":1243}},{"uid":"876845c2708d49fa","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/539//#testresult/876845c2708d49fa","status":"passed","time":{"start":1758439588100,"stop":1758439589244,"duration":1144}},{"uid":"3c48c9edbf164c62","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/538//#testresult/3c48c9edbf164c62","status":"passed","time":{"start":1758353246990,"stop":1758353248198,"duration":1208}},{"uid":"b2b52796cacd92f1","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/537//#testresult/b2b52796cacd92f1","status":"broken","statusDetails":"requests.exceptions.HTTPError: 502 Server Error: Bad Gateway for url: https://api-mcshared.uat.cstar.pagopa.it/auth/token","time":{"start":1758271088326,"stop":1758271088879,"duration":553}},{"uid":"aa8c4c66d175feb8","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/536//#testresult/aa8c4c66d175feb8","status":"passed","time":{"start":1758267109603,"stop":1758267110427,"duration":824}},{"uid":"71a765a1f1027556","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/535//#testresult/71a765a1f1027556","status":"passed","time":{"start":1758180713119,"stop":1758180714238,"duration":1119}},{"uid":"a6263d567bb908e8","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/534//#testresult/a6263d567bb908e8","status":"passed","time":{"start":1758094293531,"stop":1758094294350,"duration":819}},{"uid":"75003e99087e2db8","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/533//#testresult/75003e99087e2db8","status":"passed","time":{"start":1758007962186,"stop":1758007963077,"duration":891}},{"uid":"179e4d4cc6924cd","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/532//#testresult/179e4d4cc6924cd","status":"passed","time":{"start":1757921588808,"stop":1757921589559,"duration":751}}]},"tags":["get","unhappy_path"]},"source":"9e8dd1ddc7475091.json","parameterValues":[]}