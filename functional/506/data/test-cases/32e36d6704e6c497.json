{"uid":"32e36d6704e6c497","name":"An RTP callback with status ACTC is successfully received","fullName":"tests.test_callback#test_receive_rtp_callback_DS_05_ACTC_compliant","historyId":"4b2bd33e1a231657dc457cb580c88b06","time":{"start":1756192055719,"stop":1756192058274,"duration":2555},"status":"failed","statusMessage":"AssertionError: assert 403 == 200\n +  where 403 = <Response [403]>.status_code","statusTrace":"@allure.feature('RTP Callback')\n    @allure.story('Service provider sends a callback referred to an RTP with status ACTC')\n    @allure.title('An RTP callback with status ACTC is successfully received')\n    @pytest.mark.callback\n    @pytest.mark.happy_path\n    def test_receive_rtp_callback_DS_05_ACTC_compliant():\n        rtp_data = generate_rtp_data()\n    \n        debtor_service_provider_access_token = get_valid_access_token(\n            client_id=secrets.debtor_service_provider.client_id,\n            client_secret=secrets.debtor_service_provider.client_secret,\n            access_token_function=get_access_token,\n        )\n    \n        creditor_service_provider_access_token = get_valid_access_token(\n            client_id=secrets.creditor_service_provider.client_id,\n            client_secret=secrets.creditor_service_provider.client_secret,\n            access_token_function=get_access_token,\n        )\n    \n        activation_response = activate(\n            debtor_service_provider_access_token,\n            rtp_data['payer']['payerId'],\n            secrets.debtor_service_provider.service_provider_id,\n        )\n        assert activation_response.status_code == 201\n    \n        send_response = send_rtp(\n            access_token=creditor_service_provider_access_token, rtp_payload=rtp_data\n        )\n        assert send_response.status_code == 201\n    \n        location = send_response.headers['Location']\n        resource_id = location.split('/')[-1]\n    \n        original_msg_id = resource_id.replace('-', '')\n    \n        callback_data = generate_callback_data_DS_05_ACTC_compliant()\n        callback_data['AsynchronousSepaRequestToPayResponse']['Document']['CdtrPmtActvtnReqStsRpt'][\n            'OrgnlGrpInfAndSts'\n        ]['OrgnlMsgId'] = original_msg_id\n    \n        cert, key = pfx_to_pem(\n            secrets.debtor_service_provider_mock_PFX_base64,\n            secrets.debtor_service_provider_mock_PFX_password_base64,\n            config.cert_path,\n            config.key_path,\n        )\n    \n        callback_response = srtp_callback(\n            rtp_payload=callback_data, cert_path=cert, key_path=key\n        )\n        assert (\n            callback_response.status_code == 200\n        ), f\"Error from callback, expected 200 got {callback_response.status_code}\"\n    \n        get_response = get_rtp(\n            access_token=creditor_service_provider_access_token, rtp_id=resource_id\n        )\n>       assert get_response.status_code == 200\nE       assert 403 == 200\nE        +  where 403 = <Response [403]>.status_code\n\nfunctional-tests/tests/test_callback.py:200: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"_session_faker","time":{"start":1756192033394,"stop":1756192033451,"duration":57},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"afterStages":[],"labels":[{"name":"feature","value":"RTP Callback"},{"name":"story","value":"Service provider sends a callback referred to an RTP with status ACTC"},{"name":"tag","value":"happy_path"},{"name":"tag","value":"callback"},{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_callback"},{"name":"host","value":"pkrvmqc4gcfdwos"},{"name":"thread","value":"2502-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_callback"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":30,"broken":17,"skipped":0,"passed":4,"unknown":0,"total":51},"items":[{"uid":"e354c12b954faadd","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/505//#testresult/e354c12b954faadd","status":"failed","statusDetails":"AssertionError: assert 403 == 200\n +  where 403 = <Response [403]>.status_code","time":{"start":1756105687470,"stop":1756105689940,"duration":2470}},{"uid":"907d6b061aad4161","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/504//#testresult/907d6b061aad4161","status":"failed","statusDetails":"AssertionError: assert 403 == 200\n +  where 403 = <Response [403]>.status_code","time":{"start":1756019191634,"stop":1756019194176,"duration":2542}},{"uid":"47c3d5f2c8397d67","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/503//#testresult/47c3d5f2c8397d67","status":"failed","statusDetails":"AssertionError: assert 403 == 200\n +  where 403 = <Response [403]>.status_code","time":{"start":1755932778812,"stop":1755932781550,"duration":2738}},{"uid":"954a4c95f2c7c5dd","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/502//#testresult/954a4c95f2c7c5dd","status":"failed","statusDetails":"AssertionError: assert 403 == 200\n +  where 403 = <Response [403]>.status_code","time":{"start":1755847640453,"stop":1755847644090,"duration":3637}},{"uid":"8e2886b8f63dfbda","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/501//#testresult/8e2886b8f63dfbda","status":"failed","statusDetails":"AssertionError: assert 403 == 200\n +  where 403 = <Response [403]>.status_code","time":{"start":1755846440591,"stop":1755846443364,"duration":2773}},{"uid":"d8ea89ea764fc2d4","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/500//#testresult/d8ea89ea764fc2d4","status":"failed","statusDetails":"AssertionError: assert 403 == 200\n +  where 403 = <Response [403]>.status_code","time":{"start":1755843893469,"stop":1755843896265,"duration":2796}},{"uid":"b4ea2a641719faa5","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/499//#testresult/b4ea2a641719faa5","status":"failed","statusDetails":"AssertionError: assert 403 == 200\n +  where 403 = <Response [403]>.status_code","time":{"start":1755760173944,"stop":1755760176274,"duration":2330}},{"uid":"483aef41281112e0","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/498//#testresult/483aef41281112e0","status":"failed","statusDetails":"AssertionError: assert 403 == 200\n +  where 403 = <Response [403]>.status_code","time":{"start":1755673675834,"stop":1755673679788,"duration":3954}},{"uid":"5373a23b470e2d57","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/497//#testresult/5373a23b470e2d57","status":"failed","statusDetails":"AssertionError: assert 403 == 200\n +  where 403 = <Response [403]>.status_code","time":{"start":1755613292949,"stop":1755613295921,"duration":2972}},{"uid":"28a91f68d0004b44","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/496//#testresult/28a91f68d0004b44","status":"failed","statusDetails":"AssertionError: assert 403 == 200\n +  where 403 = <Response [403]>.status_code","time":{"start":1755588479176,"stop":1755588481665,"duration":2489}},{"uid":"8b08f1879752d6b","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/495//#testresult/8b08f1879752d6b","status":"failed","statusDetails":"AssertionError: assert 403 == 200\n +  where 403 = <Response [403]>.status_code","time":{"start":1755587257733,"stop":1755587260519,"duration":2786}},{"uid":"c43a1d5bf5cd9832","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/494//#testresult/c43a1d5bf5cd9832","status":"failed","statusDetails":"AssertionError: assert 403 == 200\n +  where 403 = <Response [403]>.status_code","time":{"start":1755500990455,"stop":1755500994407,"duration":3952}},{"uid":"c351a523a34ead7f","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/493//#testresult/c351a523a34ead7f","status":"failed","statusDetails":"AssertionError: assert 403 == 200\n +  where 403 = <Response [403]>.status_code","time":{"start":1755414402668,"stop":1755414405149,"duration":2481}},{"uid":"aa7c2d40052e590c","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/492//#testresult/aa7c2d40052e590c","status":"failed","statusDetails":"AssertionError: assert 403 == 200\n +  where 403 = <Response [403]>.status_code","time":{"start":1755327994280,"stop":1755327996817,"duration":2537}},{"uid":"52ee25bb68ec95f6","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/491//#testresult/52ee25bb68ec95f6","status":"failed","statusDetails":"AssertionError: assert 403 == 200\n +  where 403 = <Response [403]>.status_code","time":{"start":1755241681010,"stop":1755241683443,"duration":2433}},{"uid":"9f5e0c3afb0b71f0","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/490//#testresult/9f5e0c3afb0b71f0","status":"failed","statusDetails":"AssertionError: assert 403 == 200\n +  where 403 = <Response [403]>.status_code","time":{"start":1755166782991,"stop":1755166786014,"duration":3023}},{"uid":"6c93aa7f78613264","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/489//#testresult/6c93aa7f78613264","status":"failed","statusDetails":"AssertionError: assert 403 == 200\n +  where 403 = <Response [403]>.status_code","time":{"start":1755158298162,"stop":1755158300679,"duration":2517}},{"uid":"aa8ea303e17f93d7","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/488//#testresult/aa8ea303e17f93d7","status":"failed","statusDetails":"AssertionError: assert 403 == 200\n +  where 403 = <Response [403]>.status_code","time":{"start":1755155318348,"stop":1755155322171,"duration":3823}},{"uid":"e283055702db32c5","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/487//#testresult/e283055702db32c5","status":"failed","statusDetails":"AssertionError: assert 403 == 200\n +  where 403 = <Response [403]>.status_code","time":{"start":1755068905925,"stop":1755068908797,"duration":2872}},{"uid":"4da2a3963602f889","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/486//#testresult/4da2a3963602f889","status":"failed","statusDetails":"AssertionError: assert 403 == 200\n +  where 403 = <Response [403]>.status_code","time":{"start":1754982508098,"stop":1754982512079,"duration":3981}}]},"tags":["callback","happy_path"]},"source":"32e36d6704e6c497.json","parameterValues":[]}