{"uid":"18adfd4896426df1","name":"RTP callback is successfully received","fullName":"tests.test_callback#test_receive_rtp_callback","historyId":"564f1dce6aedb3cd53747bbee764bfb9","time":{"start":1744787226573,"stop":1744787227097,"duration":524},"status":"failed","statusMessage":"AssertionError: Error from callback\nassert 400 == 200\n +  where 400 = <Response [400]>.status_code","statusTrace":"@allure.feature('RTP Callback')\n    @allure.story('Service provider receives RTP callback')\n    @allure.title('RTP callback is successfully received')\n    @pytest.mark.callback\n    @pytest.mark.happy_path\n    def test_receive_rtp_callback():\n        rtp_data = generate_rtp_data()\n    \n        cert, key = pfx_to_pem(secrets.debtor_service_provider_mock_PFX_base64,\n                               secrets.debtor_service_provider_mock_PFX_password_base64,\n                               config.cert_path,\n                               config.key_path)\n    \n        activation_response = srtp_callback(rtp_payload=rtp_data, cert_path=cert, key_path=key)\n>       assert activation_response.status_code == 200, 'Error from callback'\nE       AssertionError: Error from callback\nE       assert 400 == 200\nE        +  where 400 = <Response [400]>.status_code\n\nfunctional-tests/tests/test_callback.py:25: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"_session_faker","time":{"start":1744787214743,"stop":1744787214805,"duration":62},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"afterStages":[],"labels":[{"name":"story","value":"Service provider receives RTP callback"},{"name":"feature","value":"RTP Callback"},{"name":"tag","value":"happy_path"},{"name":"tag","value":"callback"},{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_callback"},{"name":"host","value":"fv-az1964-605"},{"name":"thread","value":"2328-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_callback"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":12,"broken":24,"skipped":0,"passed":1,"unknown":0,"total":37},"items":[{"uid":"c389230f5a76c8fb","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/294//#testresult/c389230f5a76c8fb","status":"failed","statusDetails":"AssertionError: Error from callback\nassert 400 == 200\n +  where 400 = <Response [400]>.status_code","time":{"start":1744727110653,"stop":1744727111314,"duration":661}},{"uid":"7ea92dd0feed56f6","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/293//#testresult/7ea92dd0feed56f6","status":"failed","statusDetails":"AssertionError: Error from callback\nassert 400 == 200\n +  where 400 = <Response [400]>.status_code","time":{"start":1744726250211,"stop":1744726250733,"duration":522}},{"uid":"ffc50114143d0be","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/292//#testresult/ffc50114143d0be","status":"failed","statusDetails":"AssertionError: Error from callback\nassert 400 == 200\n +  where 400 = <Response [400]>.status_code","time":{"start":1744725392434,"stop":1744725392949,"duration":515}},{"uid":"eb3d9b76ef9b639a","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/291//#testresult/eb3d9b76ef9b639a","status":"failed","statusDetails":"AssertionError: Error from callback\nassert 400 == 200\n +  where 400 = <Response [400]>.status_code","time":{"start":1744700822206,"stop":1744700822672,"duration":466}},{"uid":"3c0b13bfef6454db","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/290//#testresult/3c0b13bfef6454db","status":"failed","statusDetails":"AssertionError: Error from callback\nassert 400 == 200\n +  where 400 = <Response [400]>.status_code","time":{"start":1744640107397,"stop":1744640107816,"duration":419}},{"uid":"a64320cbc4a7eaf0","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/289//#testresult/a64320cbc4a7eaf0","status":"failed","statusDetails":"AssertionError: Error from callback\nassert 400 == 200\n +  where 400 = <Response [400]>.status_code","time":{"start":1744614435506,"stop":1744614435983,"duration":477}},{"uid":"f919553caf473cfc","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/288//#testresult/f919553caf473cfc","status":"failed","statusDetails":"AssertionError: Error from callback\nassert 400 == 200\n +  where 400 = <Response [400]>.status_code","time":{"start":1744528010880,"stop":1744528011666,"duration":786}},{"uid":"78f9956dd1cfe8b0","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/287//#testresult/78f9956dd1cfe8b0","status":"failed","statusDetails":"AssertionError: Error from callback\nassert 400 == 200\n +  where 400 = <Response [400]>.status_code","time":{"start":1744441588032,"stop":1744441588554,"duration":522}},{"uid":"a866989112eff7d3","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/285//#testresult/a866989112eff7d3","status":"failed","statusDetails":"AssertionError: Error from callback\nassert 400 == 200\n +  where 400 = <Response [400]>.status_code","time":{"start":1744355216219,"stop":1744355216880,"duration":661}},{"uid":"225b52a8e3d6a1da","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/284//#testresult/225b52a8e3d6a1da","status":"passed","time":{"start":1744296840495,"stop":1744296840969,"duration":474}},{"uid":"d4461fbdfdca7993","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/283//#testresult/d4461fbdfdca7993","status":"failed","statusDetails":"AssertionError: Error from callback\nassert 400 == 200\n +  where 400 = <Response [400]>.status_code","time":{"start":1744268803091,"stop":1744268803550,"duration":459}},{"uid":"ef8907b3aec62f79","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/282//#testresult/ef8907b3aec62f79","status":"failed","statusDetails":"AssertionError: Error from callback\nassert 400 == 200\n +  where 400 = <Response [400]>.status_code","time":{"start":1744215113979,"stop":1744215114390,"duration":411}},{"uid":"51101f52f9303d94","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/275//#testresult/51101f52f9303d94","status":"broken","statusDetails":"ValueError: Could not deserialize PKCS12 data","time":{"start":1744182409740,"stop":1744182409740,"duration":0}},{"uid":"a369497129f4207c","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/273//#testresult/a369497129f4207c","status":"broken","statusDetails":"ValueError: Could not deserialize PKCS12 data","time":{"start":1744096027911,"stop":1744096027912,"duration":1}},{"uid":"4daadbb9aa090d07","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/272//#testresult/4daadbb9aa090d07","status":"broken","statusDetails":"ValueError: Could not deserialize PKCS12 data","time":{"start":1744009623590,"stop":1744009623591,"duration":1}},{"uid":"b714b17fe2260363","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/271//#testresult/b714b17fe2260363","status":"broken","statusDetails":"ValueError: Could not deserialize PKCS12 data","time":{"start":1743923184749,"stop":1743923184750,"duration":1}},{"uid":"473d4b4727e2be6b","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/270//#testresult/473d4b4727e2be6b","status":"broken","statusDetails":"ValueError: Could not deserialize PKCS12 data","time":{"start":1743836801715,"stop":1743836801715,"duration":0}},{"uid":"4a2cfa993d19a00a","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/269//#testresult/4a2cfa993d19a00a","status":"broken","statusDetails":"ValueError: Could not deserialize PKCS12 data","time":{"start":1743755294818,"stop":1743755294819,"duration":1}},{"uid":"2add8cf8ffde4ed5","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/268//#testresult/2add8cf8ffde4ed5","status":"broken","statusDetails":"ValueError: Could not deserialize PKCS12 data","time":{"start":1743754330537,"stop":1743754330538,"duration":1}},{"uid":"2aec45c1ee9164ef","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/267//#testresult/2aec45c1ee9164ef","status":"broken","statusDetails":"ValueError: Could not deserialize PKCS12 data","time":{"start":1743750399821,"stop":1743750399821,"duration":0}}]},"tags":["callback","happy_path"]},"source":"18adfd4896426df1.json","parameterValues":[]}