{"uid":"52e2e9f9533a3264","name":"A debtor cannot be activated more than once","fullName":"functional-tests.tests.test_activation#test_fail_activate_debtor_two_times","historyId":"5c3b3f3987abc7d89ad84c11e0f01f3a","time":{"start":1761040658731,"stop":1761040660164,"duration":1433},"status":"broken","statusMessage":"requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)","statusTrace":"self = <Response [409]>, kwargs = {}\n\n    def json(self, **kwargs):\n        r\"\"\"Decodes the JSON response body (if any) as a Python object.\n    \n        This may return a dictionary, list, etc. depending on what is in the response.\n    \n        :param \\*\\*kwargs: Optional arguments that ``json.loads`` takes.\n        :raises requests.exceptions.JSONDecodeError: If the response body does not\n            contain valid json.\n        \"\"\"\n    \n        if not self.encoding and self.content and len(self.content) > 3:\n            # No encoding set. JSON RFC 4627 section 3 states we should expect\n            # UTF-8, -16 or -32. Detect which one to use; If the detection or\n            # decoding fails, fall back to `self.text` (using charset_normalizer to make\n            # a best guess).\n            encoding = guess_json_utf(self.content)\n            if encoding is not None:\n                try:\n                    return complexjson.loads(self.content.decode(encoding), **kwargs)\n                except UnicodeDecodeError:\n                    # Wrong UTF codec detected; usually because it's not UTF-8\n                    # but some other 8-bit codec.  This is an RFC violation,\n                    # and the server didn't bother to tell us what codec *was*\n                    # used.\n                    pass\n                except JSONDecodeError as e:\n                    raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\n    \n        try:\n>           return complexjson.loads(self.text, **kwargs)\n                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n/opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/requests/models.py:976: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/json/__init__.py:346: in loads\n    return _default_decoder.decode(s)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^\n/opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/json/decoder.py:345: in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <json.decoder.JSONDecoder object at 0x7fa9166fee40>, s = '', idx = 0\n\n    def raw_decode(self, s, idx=0):\n        \"\"\"Decode a JSON document from ``s`` (a ``str`` beginning with\n        a JSON document) and return a 2-tuple of the Python\n        representation and the index in ``s`` where the document ended.\n    \n        This can be used to decode a JSON document from a string that may\n        have extraneous data at the end.\n    \n        \"\"\"\n        try:\n            obj, end = self.scan_once(s, idx)\n        except StopIteration as err:\n>           raise JSONDecodeError(\"Expecting value\", s, err.value) from None\nE           json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\n/opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/json/decoder.py:363: JSONDecodeError\n\nDuring handling of the above exception, another exception occurred:\n\n    @allure.feature('Activation')\n    @allure.story('Debtor activation')\n    @allure.title('A debtor cannot be activated more than once')\n    @pytest.mark.activation\n    @pytest.mark.unhappy_path\n    def test_fail_activate_debtor_two_times():\n        access_token = get_valid_access_token(client_id=secrets.debtor_service_provider.client_id,\n                                              client_secret=secrets.debtor_service_provider.client_secret,\n                                              access_token_function=get_access_token)\n        debtor_fc = fake_fc()\n    \n        res = activate(access_token, debtor_fc, secrets.debtor_service_provider.service_provider_id)\n        assert res.status_code == 201, f'Error activating debtor, expected 201 but got {res.status_code}'\n    \n        res = activate(access_token, debtor_fc, secrets.debtor_service_provider.service_provider_id)\n        assert res.status_code == 409, f'Error activating debtor, expected 409 but got {res.status_code}'\n>       assert res.json()['errors'][0]['code'] == '01031000E'\n               ^^^^^^^^^^\n\nfunctional-tests/tests/test_activation.py:169: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <Response [409]>, kwargs = {}\n\n    def json(self, **kwargs):\n        r\"\"\"Decodes the JSON response body (if any) as a Python object.\n    \n        This may return a dictionary, list, etc. depending on what is in the response.\n    \n        :param \\*\\*kwargs: Optional arguments that ``json.loads`` takes.\n        :raises requests.exceptions.JSONDecodeError: If the response body does not\n            contain valid json.\n        \"\"\"\n    \n        if not self.encoding and self.content and len(self.content) > 3:\n            # No encoding set. JSON RFC 4627 section 3 states we should expect\n            # UTF-8, -16 or -32. Detect which one to use; If the detection or\n            # decoding fails, fall back to `self.text` (using charset_normalizer to make\n            # a best guess).\n            encoding = guess_json_utf(self.content)\n            if encoding is not None:\n                try:\n                    return complexjson.loads(self.content.decode(encoding), **kwargs)\n                except UnicodeDecodeError:\n                    # Wrong UTF codec detected; usually because it's not UTF-8\n                    # but some other 8-bit codec.  This is an RFC violation,\n                    # and the server didn't bother to tell us what codec *was*\n                    # used.\n                    pass\n                except JSONDecodeError as e:\n                    raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\n    \n        try:\n            return complexjson.loads(self.text, **kwargs)\n        except JSONDecodeError as e:\n            # Catch JSON-related errors and raise as requests.JSONDecodeError\n            # This aliases json.JSONDecodeError and simplejson.JSONDecodeError\n>           raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\nE           requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\n/opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/requests/models.py:980: JSONDecodeError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"_session_faker","time":{"start":1761040649826,"stop":1761040649884,"duration":58},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"afterStages":[],"labels":[{"name":"feature","value":"Activation"},{"name":"story","value":"Debtor activation"},{"name":"tag","value":"unhappy_path"},{"name":"tag","value":"activation"},{"name":"parentSuite","value":"functional-tests.tests"},{"name":"suite","value":"test_activation"},{"name":"host","value":"runnervmwhb2z"},{"name":"thread","value":"2549-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"functional-tests.tests.test_activation"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":17,"skipped":0,"passed":0,"unknown":0,"total":17},"items":[{"uid":"a2ecd0042d6119e6","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/585//#testresult/a2ecd0042d6119e6","status":"broken","statusDetails":"requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)","time":{"start":1761027777857,"stop":1761027779268,"duration":1411}},{"uid":"adf48cbccfc772cf","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/584//#testresult/adf48cbccfc772cf","status":"broken","statusDetails":"requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)","time":{"start":1760941416583,"stop":1760941418000,"duration":1417}},{"uid":"4b5b8bd1296d5884","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/583//#testresult/4b5b8bd1296d5884","status":"broken","statusDetails":"requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)","time":{"start":1760854916862,"stop":1760854918284,"duration":1422}},{"uid":"e517eebbee7fd50c","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/582//#testresult/e517eebbee7fd50c","status":"broken","statusDetails":"requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)","time":{"start":1760768443665,"stop":1760768445021,"duration":1356}},{"uid":"816d36ad6f4cc3fa","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/581//#testresult/816d36ad6f4cc3fa","status":"broken","statusDetails":"requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)","time":{"start":1760682111067,"stop":1760682112323,"duration":1256}},{"uid":"3f22801f4a9bdfec","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/580//#testresult/3f22801f4a9bdfec","status":"broken","statusDetails":"requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)","time":{"start":1760624458043,"stop":1760624460429,"duration":2386}},{"uid":"ca219f4e51a44d74","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/579//#testresult/ca219f4e51a44d74","status":"broken","statusDetails":"requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)","time":{"start":1760619642009,"stop":1760619643906,"duration":1897}},{"uid":"db7fd5c74d95f0b0","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/578//#testresult/db7fd5c74d95f0b0","status":"broken","statusDetails":"requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)","time":{"start":1760595763368,"stop":1760595764765,"duration":1397}},{"uid":"9187b0aab7375d2f","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/577//#testresult/9187b0aab7375d2f","status":"broken","statusDetails":"requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)","time":{"start":1760523100397,"stop":1760523102602,"duration":2205}},{"uid":"f92f9cb2db61b377","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/576//#testresult/f92f9cb2db61b377","status":"broken","statusDetails":"requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)","time":{"start":1760523009782,"stop":1760523011651,"duration":1869}},{"uid":"604fb0009937cbc5","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/575//#testresult/604fb0009937cbc5","status":"broken","statusDetails":"requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)","time":{"start":1760522070611,"stop":1760522072659,"duration":2048}},{"uid":"b271490a981bb77f","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/574//#testresult/b271490a981bb77f","status":"broken","statusDetails":"requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)","time":{"start":1760521307771,"stop":1760521309213,"duration":1442}},{"uid":"d6d84ae4953c8e34","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/573//#testresult/d6d84ae4953c8e34","status":"broken","statusDetails":"requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)","time":{"start":1760520510168,"stop":1760520511518,"duration":1350}},{"uid":"e0451692f54cc48a","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/571//#testresult/e0451692f54cc48a","status":"broken","statusDetails":"requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)","time":{"start":1760443929249,"stop":1760443930819,"duration":1570}},{"uid":"6e39bb220a5eea7f","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/570//#testresult/6e39bb220a5eea7f","status":"broken","statusDetails":"requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)","time":{"start":1760439480495,"stop":1760439482276,"duration":1781}},{"uid":"2d5ae589a3269a39","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/569//#testresult/2d5ae589a3269a39","status":"broken","statusDetails":"requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)","time":{"start":1760439278647,"stop":1760439280090,"duration":1443}}]},"tags":["activation","unhappy_path"]},"source":"52e2e9f9533a3264.json","parameterValues":[]}