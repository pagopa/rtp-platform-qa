{"uid":"8e0b96b98f577f92","name":"An RTP callback with status ACTC is successfully received","fullName":"tests.test_callback#test_receive_rtp_callback_DS_05_ACTC_compliant","historyId":"4b2bd33e1a231657dc457cb580c88b06","time":{"start":1756710512303,"stop":1756710515894,"duration":3591},"status":"failed","statusMessage":"AssertionError: assert 403 == 200\n +  where 403 = <Response [403]>.status_code","statusTrace":"@allure.feature('RTP Callback')\n    @allure.story('Service provider sends a callback referred to an RTP with status ACTC')\n    @allure.title('An RTP callback with status ACTC is successfully received')\n    @pytest.mark.callback\n    @pytest.mark.happy_path\n    def test_receive_rtp_callback_DS_05_ACTC_compliant():\n        rtp_data = generate_rtp_data()\n    \n        debtor_service_provider_access_token = get_valid_access_token(\n            client_id=secrets.debtor_service_provider.client_id,\n            client_secret=secrets.debtor_service_provider.client_secret,\n            access_token_function=get_access_token,\n        )\n    \n        creditor_service_provider_access_token = get_valid_access_token(\n            client_id=secrets.creditor_service_provider.client_id,\n            client_secret=secrets.creditor_service_provider.client_secret,\n            access_token_function=get_access_token,\n        )\n    \n        activation_response = activate(\n            debtor_service_provider_access_token,\n            rtp_data['payer']['payerId'],\n            secrets.debtor_service_provider.service_provider_id,\n        )\n        assert activation_response.status_code == 201\n    \n        send_response = send_rtp(\n            access_token=creditor_service_provider_access_token, rtp_payload=rtp_data\n        )\n        assert send_response.status_code == 201\n    \n        location = send_response.headers['Location']\n        resource_id = location.split('/')[-1]\n    \n        original_msg_id = resource_id.replace('-', '')\n    \n        callback_data = generate_callback_data_DS_05_ACTC_compliant()\n        callback_data['AsynchronousSepaRequestToPayResponse']['Document']['CdtrPmtActvtnReqStsRpt'][\n            'OrgnlGrpInfAndSts'\n        ]['OrgnlMsgId'] = original_msg_id\n    \n        cert, key = pfx_to_pem(\n            secrets.debtor_service_provider_mock_PFX_base64,\n            secrets.debtor_service_provider_mock_PFX_password_base64,\n            config.cert_path,\n            config.key_path,\n        )\n    \n        callback_response = srtp_callback(\n            rtp_payload=callback_data, cert_path=cert, key_path=key\n        )\n        assert (\n            callback_response.status_code == 200\n        ), f\"Error from callback, expected 200 got {callback_response.status_code}\"\n    \n        get_response = get_rtp(\n            access_token=creditor_service_provider_access_token, rtp_id=resource_id\n        )\n>       assert get_response.status_code == 200\nE       assert 403 == 200\nE        +  where 403 = <Response [403]>.status_code\n\nfunctional-tests/tests/test_callback.py:200: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"_session_faker","time":{"start":1756710484103,"stop":1756710484162,"duration":59},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"afterStages":[],"labels":[{"name":"story","value":"Service provider sends a callback referred to an RTP with status ACTC"},{"name":"feature","value":"RTP Callback"},{"name":"tag","value":"happy_path"},{"name":"tag","value":"callback"},{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_callback"},{"name":"host","value":"pkrvmccyg1gnepe"},{"name":"thread","value":"2545-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_callback"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":37,"broken":17,"skipped":0,"passed":4,"unknown":0,"total":58},"items":[{"uid":"99dfff0077b07a97","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/512//#testresult/99dfff0077b07a97","status":"failed","statusDetails":"AssertionError: assert 403 == 200\n +  where 403 = <Response [403]>.status_code","time":{"start":1756623994209,"stop":1756623996611,"duration":2402}},{"uid":"ea2be36e0a15af4","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/511//#testresult/ea2be36e0a15af4","status":"failed","statusDetails":"AssertionError: assert 403 == 200\n +  where 403 = <Response [403]>.status_code","time":{"start":1756537591638,"stop":1756537594294,"duration":2656}},{"uid":"8cf47a2764551b2e","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/510//#testresult/8cf47a2764551b2e","status":"failed","statusDetails":"AssertionError: assert 403 == 200\n +  where 403 = <Response [403]>.status_code","time":{"start":1756451234180,"stop":1756451236950,"duration":2770}},{"uid":"feef5a5c4a9ba528","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/509//#testresult/feef5a5c4a9ba528","status":"failed","statusDetails":"AssertionError: assert 403 == 200\n +  where 403 = <Response [403]>.status_code","time":{"start":1756385885375,"stop":1756385889398,"duration":4023}},{"uid":"9a1e5b70a7b750a1","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/508//#testresult/9a1e5b70a7b750a1","status":"failed","statusDetails":"AssertionError: assert 403 == 200\n +  where 403 = <Response [403]>.status_code","time":{"start":1756364853705,"stop":1756364857644,"duration":3939}},{"uid":"c61088e5fd491990","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/507//#testresult/c61088e5fd491990","status":"failed","statusDetails":"AssertionError: assert 403 == 200\n +  where 403 = <Response [403]>.status_code","time":{"start":1756278442419,"stop":1756278446570,"duration":4151}},{"uid":"32e36d6704e6c497","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/506//#testresult/32e36d6704e6c497","status":"failed","statusDetails":"AssertionError: assert 403 == 200\n +  where 403 = <Response [403]>.status_code","time":{"start":1756192055719,"stop":1756192058274,"duration":2555}},{"uid":"e354c12b954faadd","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/505//#testresult/e354c12b954faadd","status":"failed","statusDetails":"AssertionError: assert 403 == 200\n +  where 403 = <Response [403]>.status_code","time":{"start":1756105687470,"stop":1756105689940,"duration":2470}},{"uid":"907d6b061aad4161","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/504//#testresult/907d6b061aad4161","status":"failed","statusDetails":"AssertionError: assert 403 == 200\n +  where 403 = <Response [403]>.status_code","time":{"start":1756019191634,"stop":1756019194176,"duration":2542}},{"uid":"47c3d5f2c8397d67","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/503//#testresult/47c3d5f2c8397d67","status":"failed","statusDetails":"AssertionError: assert 403 == 200\n +  where 403 = <Response [403]>.status_code","time":{"start":1755932778812,"stop":1755932781550,"duration":2738}},{"uid":"954a4c95f2c7c5dd","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/502//#testresult/954a4c95f2c7c5dd","status":"failed","statusDetails":"AssertionError: assert 403 == 200\n +  where 403 = <Response [403]>.status_code","time":{"start":1755847640453,"stop":1755847644090,"duration":3637}},{"uid":"8e2886b8f63dfbda","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/501//#testresult/8e2886b8f63dfbda","status":"failed","statusDetails":"AssertionError: assert 403 == 200\n +  where 403 = <Response [403]>.status_code","time":{"start":1755846440591,"stop":1755846443364,"duration":2773}},{"uid":"d8ea89ea764fc2d4","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/500//#testresult/d8ea89ea764fc2d4","status":"failed","statusDetails":"AssertionError: assert 403 == 200\n +  where 403 = <Response [403]>.status_code","time":{"start":1755843893469,"stop":1755843896265,"duration":2796}},{"uid":"b4ea2a641719faa5","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/499//#testresult/b4ea2a641719faa5","status":"failed","statusDetails":"AssertionError: assert 403 == 200\n +  where 403 = <Response [403]>.status_code","time":{"start":1755760173944,"stop":1755760176274,"duration":2330}},{"uid":"483aef41281112e0","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/498//#testresult/483aef41281112e0","status":"failed","statusDetails":"AssertionError: assert 403 == 200\n +  where 403 = <Response [403]>.status_code","time":{"start":1755673675834,"stop":1755673679788,"duration":3954}},{"uid":"5373a23b470e2d57","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/497//#testresult/5373a23b470e2d57","status":"failed","statusDetails":"AssertionError: assert 403 == 200\n +  where 403 = <Response [403]>.status_code","time":{"start":1755613292949,"stop":1755613295921,"duration":2972}},{"uid":"28a91f68d0004b44","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/496//#testresult/28a91f68d0004b44","status":"failed","statusDetails":"AssertionError: assert 403 == 200\n +  where 403 = <Response [403]>.status_code","time":{"start":1755588479176,"stop":1755588481665,"duration":2489}},{"uid":"8b08f1879752d6b","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/495//#testresult/8b08f1879752d6b","status":"failed","statusDetails":"AssertionError: assert 403 == 200\n +  where 403 = <Response [403]>.status_code","time":{"start":1755587257733,"stop":1755587260519,"duration":2786}},{"uid":"c43a1d5bf5cd9832","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/494//#testresult/c43a1d5bf5cd9832","status":"failed","statusDetails":"AssertionError: assert 403 == 200\n +  where 403 = <Response [403]>.status_code","time":{"start":1755500990455,"stop":1755500994407,"duration":3952}},{"uid":"c351a523a34ead7f","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/493//#testresult/c351a523a34ead7f","status":"failed","statusDetails":"AssertionError: assert 403 == 200\n +  where 403 = <Response [403]>.status_code","time":{"start":1755414402668,"stop":1755414405149,"duration":2481}}]},"tags":["callback","happy_path"]},"source":"8e0b96b98f577f92.json","parameterValues":[]}