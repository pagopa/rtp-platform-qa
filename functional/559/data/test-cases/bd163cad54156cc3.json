{"uid":"bd163cad54156cc3","name":"Get list of service providers successfully","fullName":"tests.test_service_providers_registry.TestServiceProvidersRegistry#test_get_service_providers_success","historyId":"672313a90fcd5952f4d0a6c4b0a65474","time":{"start":1759920075382,"stop":1759920075779,"duration":397},"status":"broken","statusMessage":"requests.exceptions.JSONDecodeError: Expecting ',' delimiter: line 20 column 3 (char 687)","statusTrace":"self = <Response [200]>, kwargs = {}\n\n    def json(self, **kwargs):\n        r\"\"\"Decodes the JSON response body (if any) as a Python object.\n    \n        This may return a dictionary, list, etc. depending on what is in the response.\n    \n        :param \\*\\*kwargs: Optional arguments that ``json.loads`` takes.\n        :raises requests.exceptions.JSONDecodeError: If the response body does not\n            contain valid json.\n        \"\"\"\n    \n        if not self.encoding and self.content and len(self.content) > 3:\n            # No encoding set. JSON RFC 4627 section 3 states we should expect\n            # UTF-8, -16 or -32. Detect which one to use; If the detection or\n            # decoding fails, fall back to `self.text` (using charset_normalizer to make\n            # a best guess).\n            encoding = guess_json_utf(self.content)\n            if encoding is not None:\n                try:\n                    return complexjson.loads(self.content.decode(encoding), **kwargs)\n                except UnicodeDecodeError:\n                    # Wrong UTF codec detected; usually because it's not UTF-8\n                    # but some other 8-bit codec.  This is an RFC violation,\n                    # and the server didn't bother to tell us what codec *was*\n                    # used.\n                    pass\n                except JSONDecodeError as e:\n                    raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\n    \n        try:\n>           return complexjson.loads(self.text, **kwargs)\n\n/opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/requests/models.py:976: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/json/__init__.py:346: in loads\n    return _default_decoder.decode(s)\n/opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/json/decoder.py:345: in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <json.decoder.JSONDecoder object at 0x7f7f78110590>\ns = '{\\n\\t\"tsps\": [\\n\\t\\t{\\n\\t\\t\\t\"id\": \"08992631005\",\\n\\t\\t\\t\"name\": \"CBI S.c.p.a.\",\\n\\t\\t\\t\"service_endpoint\": \"https://...pe S.p.A.\",\\n\\t\\t\\t\"tsp_id\": \"HYEEIT22XXX\",\\n\\t\\t\\t\"role\": \"\",\\n\\t\\t\\t\"psp_tax_code\": \"Hype-tax-code\"\\n\\t\\t}\\n\\t]\\n}\\n'\nidx = 0\n\n    def raw_decode(self, s, idx=0):\n        \"\"\"Decode a JSON document from ``s`` (a ``str`` beginning with\n        a JSON document) and return a 2-tuple of the Python\n        representation and the index in ``s`` where the document ended.\n    \n        This can be used to decode a JSON document from a string that may\n        have extraneous data at the end.\n    \n        \"\"\"\n        try:\n>           obj, end = self.scan_once(s, idx)\nE           json.decoder.JSONDecodeError: Expecting ',' delimiter: line 20 column 3 (char 687)\n\n/opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/json/decoder.py:361: JSONDecodeError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <tests.test_service_providers_registry.TestServiceProvidersRegistry object at 0x7f7f74dcfc50>\n\n    @allure.title('Get list of service providers successfully')\n    @pytest.mark.happy_path\n    def test_get_service_providers_success(self):\n        response = get_service_providers_registry(self.access_token)\n    \n        assert response.status_code == 200\n>       data = response.json()\n\nfunctional-tests/tests/test_service_providers_registry.py:28: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <Response [200]>, kwargs = {}\n\n    def json(self, **kwargs):\n        r\"\"\"Decodes the JSON response body (if any) as a Python object.\n    \n        This may return a dictionary, list, etc. depending on what is in the response.\n    \n        :param \\*\\*kwargs: Optional arguments that ``json.loads`` takes.\n        :raises requests.exceptions.JSONDecodeError: If the response body does not\n            contain valid json.\n        \"\"\"\n    \n        if not self.encoding and self.content and len(self.content) > 3:\n            # No encoding set. JSON RFC 4627 section 3 states we should expect\n            # UTF-8, -16 or -32. Detect which one to use; If the detection or\n            # decoding fails, fall back to `self.text` (using charset_normalizer to make\n            # a best guess).\n            encoding = guess_json_utf(self.content)\n            if encoding is not None:\n                try:\n                    return complexjson.loads(self.content.decode(encoding), **kwargs)\n                except UnicodeDecodeError:\n                    # Wrong UTF codec detected; usually because it's not UTF-8\n                    # but some other 8-bit codec.  This is an RFC violation,\n                    # and the server didn't bother to tell us what codec *was*\n                    # used.\n                    pass\n                except JSONDecodeError as e:\n                    raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\n    \n        try:\n            return complexjson.loads(self.text, **kwargs)\n        except JSONDecodeError as e:\n            # Catch JSON-related errors and raise as requests.JSONDecodeError\n            # This aliases json.JSONDecodeError and simplejson.JSONDecodeError\n>           raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\nE           requests.exceptions.JSONDecodeError: Expecting ',' delimiter: line 20 column 3 (char 687)\n\n/opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/requests/models.py:980: JSONDecodeError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"_session_faker","time":{"start":1759919573541,"stop":1759919573602,"duration":61},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"setup","time":{"start":1759920074620,"stop":1759920075381,"duration":761},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"afterStages":[],"labels":[{"name":"feature","value":"Service Providers Registry"},{"name":"story","value":"pagoPA retrieves service providers registry"},{"name":"tag","value":"happy_path"},{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_service_providers_registry"},{"name":"subSuite","value":"TestServiceProvidersRegistry"},{"name":"host","value":"runnervmwhb2z"},{"name":"thread","value":"2509-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_service_providers_registry"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":25,"skipped":0,"passed":191,"unknown":0,"total":216},"items":[{"uid":"5eb4c6c3bebb2a3b","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/558//#testresult/5eb4c6c3bebb2a3b","status":"broken","statusDetails":"requests.exceptions.HTTPError: 502 Server Error: Bad Gateway for url: https://api-mcshared.uat.cstar.pagopa.it/auth/token","time":{"start":1759908354630,"stop":1759908354630,"duration":0}},{"uid":"c09259cc3f5e0069","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/557//#testresult/c09259cc3f5e0069","status":"passed","time":{"start":1759822172511,"stop":1759822172875,"duration":364}},{"uid":"70f294d93131cdd7","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/556//#testresult/70f294d93131cdd7","status":"passed","time":{"start":1759735765911,"stop":1759735766508,"duration":597}},{"uid":"8ff8bf0a4bd66cb7","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/555//#testresult/8ff8bf0a4bd66cb7","status":"passed","time":{"start":1759650052307,"stop":1759650052702,"duration":395}},{"uid":"7a2e82c2ef26a329","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/554//#testresult/7a2e82c2ef26a329","status":"passed","time":{"start":1759563721970,"stop":1759563722653,"duration":683}},{"uid":"7717456046cd1a26","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/553//#testresult/7717456046cd1a26","status":"passed","time":{"start":1759484888357,"stop":1759484888978,"duration":621}},{"uid":"ad8cd75a9f69c340","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/552//#testresult/ad8cd75a9f69c340","status":"broken","statusDetails":"requests.exceptions.HTTPError: 502 Server Error: Bad Gateway for url: https://api-mcshared.uat.cstar.pagopa.it/auth/token","time":{"start":1759476839814,"stop":1759476839814,"duration":0}},{"uid":"bf8216b5f5c8b6df","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/551//#testresult/bf8216b5f5c8b6df","status":"passed","time":{"start":1759390837413,"stop":1759390837818,"duration":405}},{"uid":"81c158f37721137b","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/550//#testresult/81c158f37721137b","status":"passed","time":{"start":1759316237773,"stop":1759316238207,"duration":434}},{"uid":"92adc95af960ecbf","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/549//#testresult/92adc95af960ecbf","status":"passed","time":{"start":1759303798793,"stop":1759303799182,"duration":389}},{"uid":"4194ef950b0098","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/548//#testresult/4194ef950b0098","status":"passed","time":{"start":1759217384488,"stop":1759217384999,"duration":511}},{"uid":"78eb0aa9bcf20d33","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/547//#testresult/78eb0aa9bcf20d33","status":"passed","time":{"start":1759130926028,"stop":1759130926429,"duration":401}},{"uid":"db10737269ce08a5","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/546//#testresult/db10737269ce08a5","status":"passed","time":{"start":1759044382096,"stop":1759044382721,"duration":625}},{"uid":"1a412cc4820644e","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/545//#testresult/1a412cc4820644e","status":"passed","time":{"start":1758957744565,"stop":1758957744984,"duration":419}},{"uid":"9059263414cbc67e","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/544//#testresult/9059263414cbc67e","status":"passed","time":{"start":1758872034411,"stop":1758872035052,"duration":641}},{"uid":"f876df92512e7422","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/543//#testresult/f876df92512e7422","status":"passed","time":{"start":1758786171593,"stop":1758786172025,"duration":432}},{"uid":"8437e415b663bc8f","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/542//#testresult/8437e415b663bc8f","status":"passed","time":{"start":1758699776630,"stop":1758699777238,"duration":608}},{"uid":"60d658e8d28033fa","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/541//#testresult/60d658e8d28033fa","status":"passed","time":{"start":1758612607328,"stop":1758612607917,"duration":589}},{"uid":"af91153d47e38853","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/540//#testresult/af91153d47e38853","status":"passed","time":{"start":1758526271567,"stop":1758526272209,"duration":642}},{"uid":"f0b5bea1df62e15c","reportUrl":"https://pagopa.github.io/rtp-platform-qa/functional/539//#testresult/f0b5bea1df62e15c","status":"passed","time":{"start":1758439612118,"stop":1758439612713,"duration":595}}]},"tags":["happy_path"]},"source":"bd163cad54156cc3.json","parameterValues":[]}